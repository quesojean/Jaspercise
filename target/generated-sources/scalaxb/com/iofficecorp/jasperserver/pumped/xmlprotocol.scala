// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package com.iofficecorp.jasperserver.pumped

import scala.concurrent.Future


/**
usage:
val obj = scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.Foo](node)
val document = scalaxb.toXML[com.iofficecorp.jasperserver.pumped.Foo](obj, "foo", com.iofficecorp.jasperserver.pumped.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  implicit lazy val executionContext = scala.concurrent.ExecutionContext.Implicits.global

  val defaultScope = scalaxb.toScope(None -> "http://www.jaspersoft.com/2007/SL/XMLSchema",
    Some("c") -> "http://jasperreports.sourceforge.net/jasperreports/components",
    Some("jr") -> "http://jasperreports.sourceforge.net/jasperreports",
    Some("jsdomain") -> "http://www.jaspersoft.com/2007/SL/XMLSchema",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val DomainSchemaTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.SchemaType] = new DefaultDomainSchemaTypeFormat {}
  implicit lazy val DomainObjectsTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.ObjectsType] = new DefaultDomainObjectsTypeFormat {}
  implicit lazy val DomainItemsTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.ItemsType] = new DefaultDomainItemsTypeFormat {}
  implicit lazy val DomainItemTypableFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.ItemTypable] = new DefaultDomainItemTypableFormat {}
  implicit lazy val DomainItemTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.ItemType] = new DefaultDomainItemTypeFormat {}
  implicit lazy val DomainItemGroupsTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.ItemGroupsType] = new DefaultDomainItemGroupsTypeFormat {}
  implicit lazy val DomainItemGroupTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.ItemGroupType] = new DefaultDomainItemGroupTypeFormat {}
  implicit lazy val DomainDataSourcesTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.DataSourcesType] = new DefaultDomainDataSourcesTypeFormat {}
  implicit lazy val DomainDataSourceTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.DataSourceType] = new DefaultDomainDataSourceTypeFormat {}
  implicit lazy val DomainSchemaMapTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.SchemaMapType] = new DefaultDomainSchemaMapTypeFormat {}
  implicit lazy val DomainSchemaEntryTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.SchemaEntryType] = new DefaultDomainSchemaEntryTypeFormat {}
  implicit lazy val DomainResourcesTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.ResourcesType] = new DefaultDomainResourcesTypeFormat {}
  implicit lazy val DomainFieldListFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.FieldList] = new DefaultDomainFieldListFormat {}
  implicit lazy val DomainGroupListFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.GroupList] = new DefaultDomainGroupListFormat {}
  implicit lazy val DomainAnyDatasetTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.AnyDatasetType] = new DefaultDomainAnyDatasetTypeFormat {}
  implicit lazy val DomainPropertyMapFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.PropertyMap] = new DefaultDomainPropertyMapFormat {}
  implicit lazy val DomainFieldTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.FieldType] = new DefaultDomainFieldTypeFormat {}
  implicit lazy val DomainEntryTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.EntryType] = new DefaultDomainEntryTypeFormat {}
  implicit lazy val DomainGroupTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.GroupType] = new DefaultDomainGroupTypeFormat {}
  implicit lazy val DomainFieldList2Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.FieldList2] = new DefaultDomainFieldList2Format {}
  implicit lazy val DomainDataSetRefTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.DataSetRefType] = new DefaultDomainDataSetRefTypeFormat {}
  implicit lazy val DomainJoinInfoTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.JoinInfoType] = new DefaultDomainJoinInfoTypeFormat {}
  implicit lazy val DomainJoinOptionsTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.JoinOptionsType] = new DefaultDomainJoinOptionsTypeFormat {}
  implicit lazy val DomainFieldRefTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.FieldRefType] = new DefaultDomainFieldRefTypeFormat {}
  implicit lazy val DomainJoinListTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.JoinListType] = new DefaultDomainJoinListTypeFormat {}
  implicit lazy val DomainJoinTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.JoinType] = new DefaultDomainJoinTypeFormat {}
  implicit lazy val DomainTableRefListTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.TableRefListType] = new DefaultDomainTableRefListTypeFormat {}
  implicit lazy val DomainTableRefTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.TableRefType] = new DefaultDomainTableRefTypeFormat {}
  implicit lazy val DomainJoinedDataSetListTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.JoinedDataSetListType] = new DefaultDomainJoinedDataSetListTypeFormat {}
  implicit lazy val DomainJoinedDataSetRefTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.JoinedDataSetRefType] = new DefaultDomainJoinedDataSetRefTypeFormat {}
  implicit lazy val DomainFieldList3Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.FieldList3] = new DefaultDomainFieldList3Format {}
  implicit lazy val DomainJrQueryDataSetTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.JrQueryDataSetType] = new DefaultDomainJrQueryDataSetTypeFormat {}
  implicit lazy val ComponentsPrintOrderFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.PrintOrder] = new DefaultComponentsPrintOrderFormat {}
  implicit lazy val ComponentsListTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.ListType] = new DefaultComponentsListTypeFormat {}
  implicit lazy val ComponentsListContentsFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.ListContents] = new DefaultComponentsListContentsFormat {}
  implicit lazy val ComponentsCodeExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression] = new DefaultComponentsCodeExpressionFormat {}
  implicit lazy val ComponentsApplicationIdentifierExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.ApplicationIdentifierExpression] = new DefaultComponentsApplicationIdentifierExpressionFormat {}
  implicit lazy val ComponentsTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Type] = new DefaultComponentsTypeFormat {}
  implicit lazy val ComponentsRotationFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Rotation] = new DefaultComponentsRotationFormat {}
  implicit lazy val ComponentsBarbecueFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Barbecue] = new DefaultComponentsBarbecueFormat {}
  implicit lazy val ComponentsCodeExpression2Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2] = new DefaultComponentsCodeExpression2Format {}
  implicit lazy val ComponentsBarcodableFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Barcodable] = new DefaultComponentsBarcodableFormat {}
  implicit lazy val ComponentsBarcodeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Barcode] = new DefaultComponentsBarcodeFormat {}
  implicit lazy val ComponentsPatternExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression] = new DefaultComponentsPatternExpressionFormat {}
  implicit lazy val ComponentsOrientationFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Orientation] = new DefaultComponentsOrientationFormat {}
  implicit lazy val ComponentsTextPositionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.TextPosition] = new DefaultComponentsTextPositionFormat {}
  implicit lazy val ComponentsBarcode4jableFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Barcode4jable] = new DefaultComponentsBarcode4jableFormat {}
  implicit lazy val ComponentsBarcode4jFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Barcode4j] = new DefaultComponentsBarcode4jFormat {}
  implicit lazy val ComponentsChecksumMode4jFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.ChecksumMode4j] = new DefaultComponentsChecksumMode4jFormat {}
  implicit lazy val ComponentsCodabarFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Codabar] = new DefaultComponentsCodabarFormat {}
  implicit lazy val ComponentsBarcode4JCode128ableFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Barcode4JCode128able] = new DefaultComponentsBarcode4JCode128ableFormat {}
  implicit lazy val ComponentsBarcode4JCode128Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Barcode4JCode128] = new DefaultComponentsBarcode4JCode128Format {}
  implicit lazy val ComponentsTemplateExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.TemplateExpression] = new DefaultComponentsTemplateExpressionFormat {}
  implicit lazy val ComponentsEAN128Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.EAN128] = new DefaultComponentsEAN128Format {}
  implicit lazy val ComponentsShapeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Shape] = new DefaultComponentsShapeFormat {}
  implicit lazy val ComponentsDataMatrixFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.DataMatrix] = new DefaultComponentsDataMatrixFormat {}
  implicit lazy val ComponentsCode39Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Code39] = new DefaultComponentsCode39Format {}
  implicit lazy val ComponentsInterleaved2Of5Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Interleaved2Of5] = new DefaultComponentsInterleaved2Of5Format {}
  implicit lazy val ComponentsUPCAFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.UPCA] = new DefaultComponentsUPCAFormat {}
  implicit lazy val ComponentsUPCEFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.UPCE] = new DefaultComponentsUPCEFormat {}
  implicit lazy val ComponentsEAN13Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.EAN13] = new DefaultComponentsEAN13Format {}
  implicit lazy val ComponentsEAN8Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.EAN8] = new DefaultComponentsEAN8Format {}
  implicit lazy val ComponentsBarcode4JFourStateFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Barcode4JFourState] = new DefaultComponentsBarcode4JFourStateFormat {}
  implicit lazy val ComponentsBaselinePositionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.BaselinePosition] = new DefaultComponentsBaselinePositionFormat {}
  implicit lazy val ComponentsPOSTNETFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.POSTNET] = new DefaultComponentsPOSTNETFormat {}
  implicit lazy val ComponentsPDF417Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.PDF417] = new DefaultComponentsPDF417Format {}
  implicit lazy val ComponentsErrorCorrectionLevelFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.ErrorCorrectionLevel] = new DefaultComponentsErrorCorrectionLevelFormat {}
  implicit lazy val ComponentsQRCodeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.QRCode] = new DefaultComponentsQRCodeFormat {}
  implicit lazy val ComponentsLatitudeExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.LatitudeExpression] = new DefaultComponentsLatitudeExpressionFormat {}
  implicit lazy val ComponentsLongitudeExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.LongitudeExpression] = new DefaultComponentsLongitudeExpressionFormat {}
  implicit lazy val ComponentsAddressExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.AddressExpression] = new DefaultComponentsAddressExpressionFormat {}
  implicit lazy val ComponentsZoomExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.ZoomExpression] = new DefaultComponentsZoomExpressionFormat {}
  implicit lazy val ComponentsLanguageExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.LanguageExpression] = new DefaultComponentsLanguageExpressionFormat {}
  implicit lazy val ComponentsMapTypeTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.MapTypeType] = new DefaultComponentsMapTypeTypeFormat {}
  implicit lazy val ComponentsMapScaleFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.MapScale] = new DefaultComponentsMapScaleFormat {}
  implicit lazy val ComponentsImageTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.ImageType] = new DefaultComponentsImageTypeFormat {}
  implicit lazy val ComponentsOnErrorTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.OnErrorType] = new DefaultComponentsOnErrorTypeFormat {}
  implicit lazy val ComponentsMapTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.MapType] = new DefaultComponentsMapTypeFormat {}
  implicit lazy val ComponentsMapTypeSequence1Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.MapTypeSequence1] = new DefaultComponentsMapTypeSequence1Format {}
  implicit lazy val ComponentsItemDataFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.ItemData] = new DefaultComponentsItemDataFormat {}
  implicit lazy val ComponentsItemPropertyFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.ItemProperty] = new DefaultComponentsItemPropertyFormat {}
  implicit lazy val ComponentsItemFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Item] = new DefaultComponentsItemFormat {}
  implicit lazy val ComponentsMarkerDatasetFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.MarkerDataset] = new DefaultComponentsMarkerDatasetFormat {}
  implicit lazy val ComponentsMarkerFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Marker] = new DefaultComponentsMarkerFormat {}
  implicit lazy val ComponentsSortFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Sort] = new DefaultComponentsSortFormat {}
  implicit lazy val ComponentsSortFieldTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.SortFieldType] = new DefaultComponentsSortFieldTypeFormat {}
  implicit lazy val ComponentsHandlerVerticalAlignFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.HandlerVerticalAlign] = new DefaultComponentsHandlerVerticalAlignFormat {}
  implicit lazy val ComponentsHandlerHorizontalAlignFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.HandlerHorizontalAlign] = new DefaultComponentsHandlerHorizontalAlignFormat {}
  implicit lazy val ComponentsSymbolFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Symbol] = new DefaultComponentsSymbolFormat {}
  implicit lazy val ComponentsWhenNoDataTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.WhenNoDataType] = new DefaultComponentsWhenNoDataTypeFormat {}
  implicit lazy val ComponentsTableFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Table] = new DefaultComponentsTableFormat {}
  implicit lazy val ComponentsBaseColumnableFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.BaseColumnable] = new DefaultComponentsBaseColumnableFormat {}
  implicit lazy val ComponentsBaseColumnFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.BaseColumn] = new DefaultComponentsBaseColumnFormat {}
  implicit lazy val ComponentsColumnGroupFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.ColumnGroup] = new DefaultComponentsColumnGroupFormat {}
  implicit lazy val ComponentsColumnFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Column] = new DefaultComponentsColumnFormat {}
  implicit lazy val ComponentsTableGroupCellFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.TableGroupCell] = new DefaultComponentsTableGroupCellFormat {}
  implicit lazy val ComponentsTableCellFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.TableCell] = new DefaultComponentsTableCellFormat {}
  implicit lazy val ComponentsSpiderChartFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.SpiderChart] = new DefaultComponentsSpiderChartFormat {}
  implicit lazy val ComponentsIsShowLegendFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.IsShowLegend] = new DefaultComponentsIsShowLegendFormat {}
  implicit lazy val ComponentsChartSettingsFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.ChartSettings] = new DefaultComponentsChartSettingsFormat {}
  implicit lazy val ComponentsRotationTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.RotationType] = new DefaultComponentsRotationTypeFormat {}
  implicit lazy val ComponentsTableOrderFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.TableOrder] = new DefaultComponentsTableOrderFormat {}
  implicit lazy val ComponentsIsWebFilledFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.IsWebFilled] = new DefaultComponentsIsWebFilledFormat {}
  implicit lazy val ComponentsMaxValueExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.MaxValueExpression] = new DefaultComponentsMaxValueExpressionFormat {}
  implicit lazy val ComponentsSpiderPlotFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.SpiderPlot] = new DefaultComponentsSpiderPlotFormat {}
  implicit lazy val ComponentsSpiderDatasetFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.SpiderDataset] = new DefaultComponentsSpiderDatasetFormat {}
  implicit lazy val ComponentsIconPositionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.IconPosition] = new DefaultComponentsIconPositionFormat {}
  implicit lazy val ComponentsLabelFillFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.LabelFill] = new DefaultComponentsLabelFillFormat {}
  implicit lazy val ComponentsHorizontalAlignmentFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.HorizontalAlignment] = new DefaultComponentsHorizontalAlignmentFormat {}
  implicit lazy val ComponentsVerticalAlignmentFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.VerticalAlignment] = new DefaultComponentsVerticalAlignmentFormat {}
  implicit lazy val ComponentsIconLabelFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.IconLabel] = new DefaultComponentsIconLabelFormat {}
  implicit lazy val ComponentsLabelFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Label] = new DefaultComponentsLabelFormat {}
  implicit lazy val ComponentsIconFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Icon] = new DefaultComponentsIconFormat {}
  implicit lazy val ReportPrintOrderFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.PrintOrder] = new DefaultReportPrintOrderFormat {}
  implicit lazy val ReportColumnDirectionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ColumnDirection] = new DefaultReportColumnDirectionFormat {}
  implicit lazy val ReportOrientationFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Orientation] = new DefaultReportOrientationFormat {}
  implicit lazy val ReportWhenNoDataTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.WhenNoDataType] = new DefaultReportWhenNoDataTypeFormat {}
  implicit lazy val ReportSectionTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.SectionType] = new DefaultReportSectionTypeFormat {}
  implicit lazy val ReportIsTitleNewPageFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsTitleNewPage] = new DefaultReportIsTitleNewPageFormat {}
  implicit lazy val ReportIsSummaryNewPageFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsSummaryNewPage] = new DefaultReportIsSummaryNewPageFormat {}
  implicit lazy val ReportIsSummaryWithPageHeaderAndFooterFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsSummaryWithPageHeaderAndFooter] = new DefaultReportIsSummaryWithPageHeaderAndFooterFormat {}
  implicit lazy val ReportIsFloatColumnFooterFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsFloatColumnFooter] = new DefaultReportIsFloatColumnFooterFormat {}
  implicit lazy val ReportWhenResourceMissingTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.WhenResourceMissingType] = new DefaultReportWhenResourceMissingTypeFormat {}
  implicit lazy val ReportIsIgnorePaginationFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsIgnorePagination] = new DefaultReportIsIgnorePaginationFormat {}
  implicit lazy val ReportJasperReportFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.JasperReport] = new DefaultReportJasperReportFormat {}
  implicit lazy val ReportPropertyFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Property] = new DefaultReportPropertyFormat {}
  implicit lazy val ReportPropertyExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.PropertyExpression] = new DefaultReportPropertyExpressionFormat {}
  implicit lazy val ReportImportFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Import] = new DefaultReportImportFormat {}
  implicit lazy val ReportTemplateFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Template] = new DefaultReportTemplateFormat {}
  implicit lazy val ReportIsDefaultFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsDefault] = new DefaultReportIsDefaultFormat {}
  implicit lazy val ReportIsBoldFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsBold] = new DefaultReportIsBoldFormat {}
  implicit lazy val ReportIsItalicFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsItalic] = new DefaultReportIsItalicFormat {}
  implicit lazy val ReportIsUnderlineFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsUnderline] = new DefaultReportIsUnderlineFormat {}
  implicit lazy val ReportIsStrikeThroughFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsStrikeThrough] = new DefaultReportIsStrikeThroughFormat {}
  implicit lazy val ReportIsPdfEmbeddedFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsPdfEmbedded] = new DefaultReportIsPdfEmbeddedFormat {}
  implicit lazy val ReportReportFontFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ReportFont] = new DefaultReportReportFontFormat {}
  implicit lazy val ReportIsDefaultTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsDefaultType] = new DefaultReportIsDefaultTypeFormat {}
  implicit lazy val ReportModeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Mode] = new DefaultReportModeFormat {}
  implicit lazy val ReportPenTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.PenType] = new DefaultReportPenTypeFormat {}
  implicit lazy val ReportFillFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Fill] = new DefaultReportFillFormat {}
  implicit lazy val ReportScaleImageFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ScaleImage] = new DefaultReportScaleImageFormat {}
  implicit lazy val ReportHAlignFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.HAlign] = new DefaultReportHAlignFormat {}
  implicit lazy val ReportHTextAlignFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.HTextAlign] = new DefaultReportHTextAlignFormat {}
  implicit lazy val ReportHImageAlignFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.HImageAlign] = new DefaultReportHImageAlignFormat {}
  implicit lazy val ReportVAlignFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.VAlign] = new DefaultReportVAlignFormat {}
  implicit lazy val ReportVTextAlignFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.VTextAlign] = new DefaultReportVTextAlignFormat {}
  implicit lazy val ReportVImageAlignFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.VImageAlign] = new DefaultReportVImageAlignFormat {}
  implicit lazy val ReportBorderFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Border] = new DefaultReportBorderFormat {}
  implicit lazy val ReportTopBorderFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TopBorder] = new DefaultReportTopBorderFormat {}
  implicit lazy val ReportLeftBorderFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LeftBorder] = new DefaultReportLeftBorderFormat {}
  implicit lazy val ReportBottomBorderFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.BottomBorder] = new DefaultReportBottomBorderFormat {}
  implicit lazy val ReportRightBorderFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.RightBorder] = new DefaultReportRightBorderFormat {}
  implicit lazy val ReportRotationFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Rotation] = new DefaultReportRotationFormat {}
  implicit lazy val ReportLineSpacingFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LineSpacing] = new DefaultReportLineSpacingFormat {}
  implicit lazy val ReportIsStyledTextFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsStyledText] = new DefaultReportIsStyledTextFormat {}
  implicit lazy val ReportIsBoldTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsBoldType] = new DefaultReportIsBoldTypeFormat {}
  implicit lazy val ReportIsItalicTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsItalicType] = new DefaultReportIsItalicTypeFormat {}
  implicit lazy val ReportIsUnderlineTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsUnderlineType] = new DefaultReportIsUnderlineTypeFormat {}
  implicit lazy val ReportIsStrikeThroughTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsStrikeThroughType] = new DefaultReportIsStrikeThroughTypeFormat {}
  implicit lazy val ReportIsPdfEmbeddedTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsPdfEmbeddedType] = new DefaultReportIsPdfEmbeddedTypeFormat {}
  implicit lazy val ReportIsBlankWhenNullFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsBlankWhenNull] = new DefaultReportIsBlankWhenNullFormat {}
  implicit lazy val ReportStyleFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Style] = new DefaultReportStyleFormat {}
  implicit lazy val ReportLineStyleFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LineStyle] = new DefaultReportLineStyleFormat {}
  implicit lazy val ReportPenFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Pen] = new DefaultReportPenFormat {}
  implicit lazy val ReportLineSpacingTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LineSpacingType] = new DefaultReportLineSpacingTypeFormat {}
  implicit lazy val ReportParagraphFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Paragraph] = new DefaultReportParagraphFormat {}
  implicit lazy val ReportAlignmentFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Alignment] = new DefaultReportAlignmentFormat {}
  implicit lazy val ReportTabStopFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TabStop] = new DefaultReportTabStopFormat {}
  implicit lazy val ReportConditionalStyleFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ConditionalStyle] = new DefaultReportConditionalStyleFormat {}
  implicit lazy val ReportConditionExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ConditionExpression] = new DefaultReportConditionExpressionFormat {}
  implicit lazy val ReportWhenResourceMissingTypeTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.WhenResourceMissingTypeType] = new DefaultReportWhenResourceMissingTypeTypeFormat {}
  implicit lazy val ReportSubDatasetFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.SubDataset] = new DefaultReportSubDatasetFormat {}
  implicit lazy val ReportScriptletFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Scriptlet] = new DefaultReportScriptletFormat {}
  implicit lazy val ReportScriptletDescriptionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ScriptletDescription] = new DefaultReportScriptletDescriptionFormat {}
  implicit lazy val ReportIsForPromptingFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsForPrompting] = new DefaultReportIsForPromptingFormat {}
  implicit lazy val ReportParameterFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Parameter] = new DefaultReportParameterFormat {}
  implicit lazy val ReportParameterDescriptionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ParameterDescription] = new DefaultReportParameterDescriptionFormat {}
  implicit lazy val ReportDefaultValueExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.DefaultValueExpression] = new DefaultReportDefaultValueExpressionFormat {}
  implicit lazy val ReportQueryStringFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.QueryString] = new DefaultReportQueryStringFormat {}
  implicit lazy val ReportFieldFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Field] = new DefaultReportFieldFormat {}
  implicit lazy val ReportFieldDescriptionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.FieldDescription] = new DefaultReportFieldDescriptionFormat {}
  implicit lazy val ReportOrderFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Order] = new DefaultReportOrderFormat {}
  implicit lazy val ReportTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Type] = new DefaultReportTypeFormat {}
  implicit lazy val ReportSortFieldFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.SortField] = new DefaultReportSortFieldFormat {}
  implicit lazy val ReportResetTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ResetType] = new DefaultReportResetTypeFormat {}
  implicit lazy val ReportIncrementTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IncrementType] = new DefaultReportIncrementTypeFormat {}
  implicit lazy val ReportCalculationFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Calculation] = new DefaultReportCalculationFormat {}
  implicit lazy val ReportVariableFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Variable] = new DefaultReportVariableFormat {}
  implicit lazy val ReportVariableExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.VariableExpression] = new DefaultReportVariableExpressionFormat {}
  implicit lazy val ReportInitialValueExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.InitialValueExpression] = new DefaultReportInitialValueExpressionFormat {}
  implicit lazy val ReportFilterExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.FilterExpression] = new DefaultReportFilterExpressionFormat {}
  implicit lazy val ReportIsStartNewColumnFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsStartNewColumn] = new DefaultReportIsStartNewColumnFormat {}
  implicit lazy val ReportIsStartNewPageFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsStartNewPage] = new DefaultReportIsStartNewPageFormat {}
  implicit lazy val ReportIsResetPageNumberFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsResetPageNumber] = new DefaultReportIsResetPageNumberFormat {}
  implicit lazy val ReportIsReprintHeaderOnEachPageFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsReprintHeaderOnEachPage] = new DefaultReportIsReprintHeaderOnEachPageFormat {}
  implicit lazy val ReportFooterPositionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.FooterPosition] = new DefaultReportFooterPositionFormat {}
  implicit lazy val ReportKeepTogetherFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.KeepTogether] = new DefaultReportKeepTogetherFormat {}
  implicit lazy val ReportGroupFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Group] = new DefaultReportGroupFormat {}
  implicit lazy val ReportGroupExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.GroupExpression] = new DefaultReportGroupExpressionFormat {}
  implicit lazy val ReportGroupHeaderFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.GroupHeader] = new DefaultReportGroupHeaderFormat {}
  implicit lazy val ReportGroupFooterFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.GroupFooter] = new DefaultReportGroupFooterFormat {}
  implicit lazy val ReportBackgroundFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Background] = new DefaultReportBackgroundFormat {}
  implicit lazy val ReportTitleFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Title] = new DefaultReportTitleFormat {}
  implicit lazy val ReportPageHeaderFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.PageHeader] = new DefaultReportPageHeaderFormat {}
  implicit lazy val ReportColumnHeaderFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ColumnHeader] = new DefaultReportColumnHeaderFormat {}
  implicit lazy val ReportDetailFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Detail] = new DefaultReportDetailFormat {}
  implicit lazy val ReportColumnFooterFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ColumnFooter] = new DefaultReportColumnFooterFormat {}
  implicit lazy val ReportPageFooterFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.PageFooter] = new DefaultReportPageFooterFormat {}
  implicit lazy val ReportLastPageFooterFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LastPageFooter] = new DefaultReportLastPageFooterFormat {}
  implicit lazy val ReportSummaryFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Summary] = new DefaultReportSummaryFormat {}
  implicit lazy val ReportNoDataFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.NoData] = new DefaultReportNoDataFormat {}
  implicit lazy val ReportIsSplitAllowedFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsSplitAllowed] = new DefaultReportIsSplitAllowedFormat {}
  implicit lazy val ReportSplitTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.SplitType] = new DefaultReportSplitTypeFormat {}
  implicit lazy val ReportBandFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Band] = new DefaultReportBandFormat {}
  implicit lazy val ReportEvaluationTimeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.EvaluationTime] = new DefaultReportEvaluationTimeFormat {}
  implicit lazy val ReportPartFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Part] = new DefaultReportPartFormat {}
  implicit lazy val ReportPartNameExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.PartNameExpression] = new DefaultReportPartNameExpressionFormat {}
  implicit lazy val ReportPartComponentTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.PartComponentType] = new DefaultReportPartComponentTypeFormat {}
  implicit lazy val ReportTypeTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TypeType] = new DefaultReportTypeTypeFormat {}
  implicit lazy val ReportBreakFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Break] = new DefaultReportBreakFormat {}
  implicit lazy val ReportDirectionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Direction] = new DefaultReportDirectionFormat {}
  implicit lazy val ReportLineFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Line] = new DefaultReportLineFormat {}
  implicit lazy val ReportPositionTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.PositionType] = new DefaultReportPositionTypeFormat {}
  implicit lazy val ReportStretchTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.StretchType] = new DefaultReportStretchTypeFormat {}
  implicit lazy val ReportIsPrintRepeatedValuesFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsPrintRepeatedValues] = new DefaultReportIsPrintRepeatedValuesFormat {}
  implicit lazy val ReportModeTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ModeType] = new DefaultReportModeTypeFormat {}
  implicit lazy val ReportIsRemoveLineWhenBlankFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsRemoveLineWhenBlank] = new DefaultReportIsRemoveLineWhenBlankFormat {}
  implicit lazy val ReportIsPrintInFirstWholeBandFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsPrintInFirstWholeBand] = new DefaultReportIsPrintInFirstWholeBandFormat {}
  implicit lazy val ReportIsPrintWhenDetailOverflowsFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsPrintWhenDetailOverflows] = new DefaultReportIsPrintWhenDetailOverflowsFormat {}
  implicit lazy val ReportReportElementFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ReportElement] = new DefaultReportReportElementFormat {}
  implicit lazy val ReportPrintWhenExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.PrintWhenExpression] = new DefaultReportPrintWhenExpressionFormat {}
  implicit lazy val ReportStretchTypeTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.StretchTypeType] = new DefaultReportStretchTypeTypeFormat {}
  implicit lazy val ReportPenType2Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.PenType2] = new DefaultReportPenType2Format {}
  implicit lazy val ReportFillTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.FillType] = new DefaultReportFillTypeFormat {}
  implicit lazy val ReportGraphicElementFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.GraphicElement] = new DefaultReportGraphicElementFormat {}
  implicit lazy val ReportRectangleFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Rectangle] = new DefaultReportRectangleFormat {}
  implicit lazy val ReportEllipseFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Ellipse] = new DefaultReportEllipseFormat {}
  implicit lazy val ReportScaleImageTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ScaleImageType] = new DefaultReportScaleImageTypeFormat {}
  implicit lazy val ReportHAlignTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.HAlignType] = new DefaultReportHAlignTypeFormat {}
  implicit lazy val ReportVAlignTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.VAlignType] = new DefaultReportVAlignTypeFormat {}
  implicit lazy val ReportIsUsingCacheFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsUsingCache] = new DefaultReportIsUsingCacheFormat {}
  implicit lazy val ReportIsLazyFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsLazy] = new DefaultReportIsLazyFormat {}
  implicit lazy val ReportOnErrorTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.OnErrorType] = new DefaultReportOnErrorTypeFormat {}
  implicit lazy val ReportImageFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Image] = new DefaultReportImageFormat {}
  implicit lazy val ReportImageExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ImageExpression] = new DefaultReportImageExpressionFormat {}
  implicit lazy val ReportBorderTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.BorderType] = new DefaultReportBorderTypeFormat {}
  implicit lazy val ReportTopBorderTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TopBorderType] = new DefaultReportTopBorderTypeFormat {}
  implicit lazy val ReportLeftBorderTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LeftBorderType] = new DefaultReportLeftBorderTypeFormat {}
  implicit lazy val ReportBottomBorderTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.BottomBorderType] = new DefaultReportBottomBorderTypeFormat {}
  implicit lazy val ReportRightBorderTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.RightBorderType] = new DefaultReportRightBorderTypeFormat {}
  implicit lazy val ReportBoxFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Box] = new DefaultReportBoxFormat {}
  implicit lazy val ReportLineStyleTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LineStyleType] = new DefaultReportLineStyleTypeFormat {}
  implicit lazy val ReportTopPenFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TopPen] = new DefaultReportTopPenFormat {}
  implicit lazy val ReportLineStyleType2Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LineStyleType2] = new DefaultReportLineStyleType2Format {}
  implicit lazy val ReportLeftPenFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LeftPen] = new DefaultReportLeftPenFormat {}
  implicit lazy val ReportLineStyleType3Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LineStyleType3] = new DefaultReportLineStyleType3Format {}
  implicit lazy val ReportBottomPenFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.BottomPen] = new DefaultReportBottomPenFormat {}
  implicit lazy val ReportLineStyleType4Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LineStyleType4] = new DefaultReportLineStyleType4Format {}
  implicit lazy val ReportRightPenFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.RightPen] = new DefaultReportRightPenFormat {}
  implicit lazy val ReportAnchorNameExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.AnchorNameExpression] = new DefaultReportAnchorNameExpressionFormat {}
  implicit lazy val ReportHyperlinkReferenceExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.HyperlinkReferenceExpression] = new DefaultReportHyperlinkReferenceExpressionFormat {}
  implicit lazy val ReportHyperlinkWhenExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.HyperlinkWhenExpression] = new DefaultReportHyperlinkWhenExpressionFormat {}
  implicit lazy val ReportHyperlinkAnchorExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.HyperlinkAnchorExpression] = new DefaultReportHyperlinkAnchorExpressionFormat {}
  implicit lazy val ReportHyperlinkPageExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.HyperlinkPageExpression] = new DefaultReportHyperlinkPageExpressionFormat {}
  implicit lazy val ReportHyperlinkTooltipExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.HyperlinkTooltipExpression] = new DefaultReportHyperlinkTooltipExpressionFormat {}
  implicit lazy val ReportHyperlinkParameterFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.HyperlinkParameter] = new DefaultReportHyperlinkParameterFormat {}
  implicit lazy val ReportHyperlinkParameterExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.HyperlinkParameterExpression] = new DefaultReportHyperlinkParameterExpressionFormat {}
  implicit lazy val ReportStaticTextFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.StaticText] = new DefaultReportStaticTextFormat {}
  implicit lazy val ReportTextFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Text] = new DefaultReportTextFormat {}
  implicit lazy val ReportTextAlignmentFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TextAlignment] = new DefaultReportTextAlignmentFormat {}
  implicit lazy val ReportVerticalAlignmentFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.VerticalAlignment] = new DefaultReportVerticalAlignmentFormat {}
  implicit lazy val ReportRotationTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.RotationType] = new DefaultReportRotationTypeFormat {}
  implicit lazy val ReportLineSpacingType2Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LineSpacingType2] = new DefaultReportLineSpacingType2Format {}
  implicit lazy val ReportIsStyledTextTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsStyledTextType] = new DefaultReportIsStyledTextTypeFormat {}
  implicit lazy val ReportTextElementFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TextElement] = new DefaultReportTextElementFormat {}
  implicit lazy val ReportIsBoldType2Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsBoldType2] = new DefaultReportIsBoldType2Format {}
  implicit lazy val ReportIsItalicType2Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsItalicType2] = new DefaultReportIsItalicType2Format {}
  implicit lazy val ReportIsUnderlineType2Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsUnderlineType2] = new DefaultReportIsUnderlineType2Format {}
  implicit lazy val ReportIsStrikeThroughType2Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsStrikeThroughType2] = new DefaultReportIsStrikeThroughType2Format {}
  implicit lazy val ReportIsPdfEmbeddedType2Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsPdfEmbeddedType2] = new DefaultReportIsPdfEmbeddedType2Format {}
  implicit lazy val ReportFontFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Font] = new DefaultReportFontFormat {}
  implicit lazy val ReportIsStretchWithOverflowFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsStretchWithOverflow] = new DefaultReportIsStretchWithOverflowFormat {}
  implicit lazy val ReportIsBlankWhenNullTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsBlankWhenNullType] = new DefaultReportIsBlankWhenNullTypeFormat {}
  implicit lazy val ReportTextFieldFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TextField] = new DefaultReportTextFieldFormat {}
  implicit lazy val ReportTextFieldExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TextFieldExpression] = new DefaultReportTextFieldExpressionFormat {}
  implicit lazy val ReportIsUsingCacheTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsUsingCacheType] = new DefaultReportIsUsingCacheTypeFormat {}
  implicit lazy val ReportRunToBottomFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.RunToBottom] = new DefaultReportRunToBottomFormat {}
  implicit lazy val ReportOverflowTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.OverflowType] = new DefaultReportOverflowTypeFormat {}
  implicit lazy val ReportSubreportFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Subreport] = new DefaultReportSubreportFormat {}
  implicit lazy val ReportParametersMapExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ParametersMapExpression] = new DefaultReportParametersMapExpressionFormat {}
  implicit lazy val ReportSubreportParameterFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.SubreportParameter] = new DefaultReportSubreportParameterFormat {}
  implicit lazy val ReportSubreportParameterExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.SubreportParameterExpression] = new DefaultReportSubreportParameterExpressionFormat {}
  implicit lazy val ReportCalculationTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.CalculationType] = new DefaultReportCalculationTypeFormat {}
  implicit lazy val ReportReturnValueFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ReturnValue] = new DefaultReportReturnValueFormat {}
  implicit lazy val ReportConnectionExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ConnectionExpression] = new DefaultReportConnectionExpressionFormat {}
  implicit lazy val ReportDataSourceExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.DataSourceExpression] = new DefaultReportDataSourceExpressionFormat {}
  implicit lazy val ReportSubreportExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.SubreportExpression] = new DefaultReportSubreportExpressionFormat {}
  implicit lazy val ReportElementGroupFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ElementGroup] = new DefaultReportElementGroupFormat {}
  implicit lazy val ReportIsShowLegendFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowLegend] = new DefaultReportIsShowLegendFormat {}
  implicit lazy val ReportChartFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Chart] = new DefaultReportChartFormat {}
  implicit lazy val ReportPositionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Position] = new DefaultReportPositionFormat {}
  implicit lazy val ReportChartTitleFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ChartTitle] = new DefaultReportChartTitleFormat {}
  implicit lazy val ReportTitleExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TitleExpression] = new DefaultReportTitleExpressionFormat {}
  implicit lazy val ReportChartSubtitleFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ChartSubtitle] = new DefaultReportChartSubtitleFormat {}
  implicit lazy val ReportSubtitleExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.SubtitleExpression] = new DefaultReportSubtitleExpressionFormat {}
  implicit lazy val ReportPositionType2Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.PositionType2] = new DefaultReportPositionType2Format {}
  implicit lazy val ReportChartLegendFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ChartLegend] = new DefaultReportChartLegendFormat {}
  implicit lazy val ReportItemLabelFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ItemLabel] = new DefaultReportItemLabelFormat {}
  implicit lazy val ReportPieChartFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.PieChart] = new DefaultReportPieChartFormat {}
  implicit lazy val ReportPieDatasetFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.PieDataset] = new DefaultReportPieDatasetFormat {}
  implicit lazy val ReportPieSeriesFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.PieSeries] = new DefaultReportPieSeriesFormat {}
  implicit lazy val ReportKeyExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.KeyExpression] = new DefaultReportKeyExpressionFormat {}
  implicit lazy val ReportValueExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ValueExpression] = new DefaultReportValueExpressionFormat {}
  implicit lazy val ReportLabelExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LabelExpression] = new DefaultReportLabelExpressionFormat {}
  implicit lazy val ReportOtherKeyExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.OtherKeyExpression] = new DefaultReportOtherKeyExpressionFormat {}
  implicit lazy val ReportOtherLabelExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.OtherLabelExpression] = new DefaultReportOtherLabelExpressionFormat {}
  implicit lazy val ReportSectionHyperlinkFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.SectionHyperlink] = new DefaultReportSectionHyperlinkFormat {}
  implicit lazy val ReportOtherSectionHyperlinkFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.OtherSectionHyperlink] = new DefaultReportOtherSectionHyperlinkFormat {}
  implicit lazy val ReportIsShowLabelsFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowLabels] = new DefaultReportIsShowLabelsFormat {}
  implicit lazy val ReportIsCircularFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsCircular] = new DefaultReportIsCircularFormat {}
  implicit lazy val ReportPiePlotFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.PiePlot] = new DefaultReportPiePlotFormat {}
  implicit lazy val ReportResetTypeTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ResetTypeType] = new DefaultReportResetTypeTypeFormat {}
  implicit lazy val ReportIncrementTypeTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IncrementTypeType] = new DefaultReportIncrementTypeTypeFormat {}
  implicit lazy val ReportDatasetFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Dataset] = new DefaultReportDatasetFormat {}
  implicit lazy val ReportIncrementWhenExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IncrementWhenExpression] = new DefaultReportIncrementWhenExpressionFormat {}
  implicit lazy val ReportDatasetRunFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.DatasetRun] = new DefaultReportDatasetRunFormat {}
  implicit lazy val ReportCalculationType2Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.CalculationType2] = new DefaultReportCalculationType2Format {}
  implicit lazy val ReportDatasetReturnValueFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.DatasetReturnValue] = new DefaultReportDatasetReturnValueFormat {}
  implicit lazy val ReportDatasetParameterFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.DatasetParameter] = new DefaultReportDatasetParameterFormat {}
  implicit lazy val ReportDatasetParameterExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.DatasetParameterExpression] = new DefaultReportDatasetParameterExpressionFormat {}
  implicit lazy val ReportOrientationTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.OrientationType] = new DefaultReportOrientationTypeFormat {}
  implicit lazy val ReportPlotFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Plot] = new DefaultReportPlotFormat {}
  implicit lazy val ReportSeriesColorFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.SeriesColor] = new DefaultReportSeriesColorFormat {}
  implicit lazy val ReportPie3DChartFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Pie3DChart] = new DefaultReportPie3DChartFormat {}
  implicit lazy val ReportIsShowLabelsTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowLabelsType] = new DefaultReportIsShowLabelsTypeFormat {}
  implicit lazy val ReportIsCircularTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsCircularType] = new DefaultReportIsCircularTypeFormat {}
  implicit lazy val ReportPie3DPlotFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Pie3DPlot] = new DefaultReportPie3DPlotFormat {}
  implicit lazy val ReportBarChartFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.BarChart] = new DefaultReportBarChartFormat {}
  implicit lazy val ReportCategoryDatasetFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.CategoryDataset] = new DefaultReportCategoryDatasetFormat {}
  implicit lazy val ReportCategorySeriesFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.CategorySeries] = new DefaultReportCategorySeriesFormat {}
  implicit lazy val ReportSeriesExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.SeriesExpression] = new DefaultReportSeriesExpressionFormat {}
  implicit lazy val ReportCategoryExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.CategoryExpression] = new DefaultReportCategoryExpressionFormat {}
  implicit lazy val ReportItemHyperlinkFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ItemHyperlink] = new DefaultReportItemHyperlinkFormat {}
  implicit lazy val ReportIsShowLabelsType2Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowLabelsType2] = new DefaultReportIsShowLabelsType2Format {}
  implicit lazy val ReportIsShowTickMarksFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowTickMarks] = new DefaultReportIsShowTickMarksFormat {}
  implicit lazy val ReportIsShowTickLabelsFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowTickLabels] = new DefaultReportIsShowTickLabelsFormat {}
  implicit lazy val ReportBarPlotFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.BarPlot] = new DefaultReportBarPlotFormat {}
  implicit lazy val ReportCategoryAxisLabelExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.CategoryAxisLabelExpression] = new DefaultReportCategoryAxisLabelExpressionFormat {}
  implicit lazy val ReportValueAxisLabelExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ValueAxisLabelExpression] = new DefaultReportValueAxisLabelExpressionFormat {}
  implicit lazy val ReportDomainAxisMinValueExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.DomainAxisMinValueExpression] = new DefaultReportDomainAxisMinValueExpressionFormat {}
  implicit lazy val ReportDomainAxisMaxValueExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.DomainAxisMaxValueExpression] = new DefaultReportDomainAxisMaxValueExpressionFormat {}
  implicit lazy val ReportRangeAxisMinValueExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.RangeAxisMinValueExpression] = new DefaultReportRangeAxisMinValueExpressionFormat {}
  implicit lazy val ReportRangeAxisMaxValueExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.RangeAxisMaxValueExpression] = new DefaultReportRangeAxisMaxValueExpressionFormat {}
  implicit lazy val ReportCategoryAxisFormatFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.CategoryAxisFormat] = new DefaultReportCategoryAxisFormatFormat {}
  implicit lazy val ReportValueAxisFormatFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ValueAxisFormat] = new DefaultReportValueAxisFormatFormat {}
  implicit lazy val ReportAxisFormatFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.AxisFormat] = new DefaultReportAxisFormatFormat {}
  implicit lazy val ReportLabelFontFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LabelFont] = new DefaultReportLabelFontFormat {}
  implicit lazy val ReportTickLabelFontFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TickLabelFont] = new DefaultReportTickLabelFontFormat {}
  implicit lazy val ReportBar3DChartFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Bar3DChart] = new DefaultReportBar3DChartFormat {}
  implicit lazy val ReportIsShowLabelsType3Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowLabelsType3] = new DefaultReportIsShowLabelsType3Format {}
  implicit lazy val ReportBar3DPlotFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Bar3DPlot] = new DefaultReportBar3DPlotFormat {}
  implicit lazy val ReportXyBarChartFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.XyBarChart] = new DefaultReportXyBarChartFormat {}
  implicit lazy val ReportTimePeriodDatasetFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TimePeriodDataset] = new DefaultReportTimePeriodDatasetFormat {}
  implicit lazy val ReportTimePeriodSeriesFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TimePeriodSeries] = new DefaultReportTimePeriodSeriesFormat {}
  implicit lazy val ReportStartDateExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.StartDateExpression] = new DefaultReportStartDateExpressionFormat {}
  implicit lazy val ReportEndDateExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.EndDateExpression] = new DefaultReportEndDateExpressionFormat {}
  implicit lazy val ReportStackedBarChartFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.StackedBarChart] = new DefaultReportStackedBarChartFormat {}
  implicit lazy val ReportStackedAreaChartFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.StackedAreaChart] = new DefaultReportStackedAreaChartFormat {}
  implicit lazy val ReportStackedBar3DChartFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.StackedBar3DChart] = new DefaultReportStackedBar3DChartFormat {}
  implicit lazy val ReportLineChartFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LineChart] = new DefaultReportLineChartFormat {}
  implicit lazy val ReportIsShowLinesFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowLines] = new DefaultReportIsShowLinesFormat {}
  implicit lazy val ReportIsShowShapesFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowShapes] = new DefaultReportIsShowShapesFormat {}
  implicit lazy val ReportLinePlotFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LinePlot] = new DefaultReportLinePlotFormat {}
  implicit lazy val ReportXyLineChartFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.XyLineChart] = new DefaultReportXyLineChartFormat {}
  implicit lazy val ReportXyDatasetFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.XyDataset] = new DefaultReportXyDatasetFormat {}
  implicit lazy val ReportAutoSortFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.AutoSort] = new DefaultReportAutoSortFormat {}
  implicit lazy val ReportXySeriesFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.XySeries] = new DefaultReportXySeriesFormat {}
  implicit lazy val ReportXValueExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.XValueExpression] = new DefaultReportXValueExpressionFormat {}
  implicit lazy val ReportYValueExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.YValueExpression] = new DefaultReportYValueExpressionFormat {}
  implicit lazy val ReportAreaChartFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.AreaChart] = new DefaultReportAreaChartFormat {}
  implicit lazy val ReportAreaPlotFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.AreaPlot] = new DefaultReportAreaPlotFormat {}
  implicit lazy val ReportXyAreaChartFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.XyAreaChart] = new DefaultReportXyAreaChartFormat {}
  implicit lazy val ReportScatterChartFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ScatterChart] = new DefaultReportScatterChartFormat {}
  implicit lazy val ReportIsShowLinesTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowLinesType] = new DefaultReportIsShowLinesTypeFormat {}
  implicit lazy val ReportIsShowShapesTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowShapesType] = new DefaultReportIsShowShapesTypeFormat {}
  implicit lazy val ReportScatterPlotFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ScatterPlot] = new DefaultReportScatterPlotFormat {}
  implicit lazy val ReportXAxisLabelExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.XAxisLabelExpression] = new DefaultReportXAxisLabelExpressionFormat {}
  implicit lazy val ReportYAxisLabelExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.YAxisLabelExpression] = new DefaultReportYAxisLabelExpressionFormat {}
  implicit lazy val ReportXAxisFormatFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.XAxisFormat] = new DefaultReportXAxisFormatFormat {}
  implicit lazy val ReportYAxisFormatFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.YAxisFormat] = new DefaultReportYAxisFormatFormat {}
  implicit lazy val ReportBubbleChartFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.BubbleChart] = new DefaultReportBubbleChartFormat {}
  implicit lazy val ReportXyzDatasetFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.XyzDataset] = new DefaultReportXyzDatasetFormat {}
  implicit lazy val ReportXyzSeriesFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.XyzSeries] = new DefaultReportXyzSeriesFormat {}
  implicit lazy val ReportScaleTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ScaleType] = new DefaultReportScaleTypeFormat {}
  implicit lazy val ReportBubblePlotFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.BubblePlot] = new DefaultReportBubblePlotFormat {}
  implicit lazy val ReportZValueExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ZValueExpression] = new DefaultReportZValueExpressionFormat {}
  implicit lazy val ReportTimePeriodFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TimePeriod] = new DefaultReportTimePeriodFormat {}
  implicit lazy val ReportTimeSeriesDatasetFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TimeSeriesDataset] = new DefaultReportTimeSeriesDatasetFormat {}
  implicit lazy val ReportTimeSeriesFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TimeSeries] = new DefaultReportTimeSeriesFormat {}
  implicit lazy val ReportTimePeriodExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TimePeriodExpression] = new DefaultReportTimePeriodExpressionFormat {}
  implicit lazy val ReportTimeSeriesChartFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TimeSeriesChart] = new DefaultReportTimeSeriesChartFormat {}
  implicit lazy val ReportIsShowLinesType2Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowLinesType2] = new DefaultReportIsShowLinesType2Format {}
  implicit lazy val ReportIsShowShapesType2Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowShapesType2] = new DefaultReportIsShowShapesType2Format {}
  implicit lazy val ReportTimeSeriesPlotFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TimeSeriesPlot] = new DefaultReportTimeSeriesPlotFormat {}
  implicit lazy val ReportTimeAxisLabelExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TimeAxisLabelExpression] = new DefaultReportTimeAxisLabelExpressionFormat {}
  implicit lazy val ReportTimeAxisFormatFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TimeAxisFormat] = new DefaultReportTimeAxisFormatFormat {}
  implicit lazy val ReportHighLowChartFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.HighLowChart] = new DefaultReportHighLowChartFormat {}
  implicit lazy val ReportHighLowDatasetFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.HighLowDataset] = new DefaultReportHighLowDatasetFormat {}
  implicit lazy val ReportIsShowCloseTicksFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowCloseTicks] = new DefaultReportIsShowCloseTicksFormat {}
  implicit lazy val ReportIsShowOpenTicksFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowOpenTicks] = new DefaultReportIsShowOpenTicksFormat {}
  implicit lazy val ReportHighLowPlotFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.HighLowPlot] = new DefaultReportHighLowPlotFormat {}
  implicit lazy val ReportDateExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.DateExpression] = new DefaultReportDateExpressionFormat {}
  implicit lazy val ReportHighExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.HighExpression] = new DefaultReportHighExpressionFormat {}
  implicit lazy val ReportLowExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LowExpression] = new DefaultReportLowExpressionFormat {}
  implicit lazy val ReportOpenExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.OpenExpression] = new DefaultReportOpenExpressionFormat {}
  implicit lazy val ReportCloseExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.CloseExpression] = new DefaultReportCloseExpressionFormat {}
  implicit lazy val ReportVolumeExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.VolumeExpression] = new DefaultReportVolumeExpressionFormat {}
  implicit lazy val ReportCandlestickChartFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.CandlestickChart] = new DefaultReportCandlestickChartFormat {}
  implicit lazy val ReportIsShowVolumeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowVolume] = new DefaultReportIsShowVolumeFormat {}
  implicit lazy val ReportCandlestickPlotFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.CandlestickPlot] = new DefaultReportCandlestickPlotFormat {}
  implicit lazy val ReportMeterChartFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.MeterChart] = new DefaultReportMeterChartFormat {}
  implicit lazy val ReportValueDatasetFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ValueDataset] = new DefaultReportValueDatasetFormat {}
  implicit lazy val ReportShapeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Shape] = new DefaultReportShapeFormat {}
  implicit lazy val ReportMeterPlotFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.MeterPlot] = new DefaultReportMeterPlotFormat {}
  implicit lazy val ReportValueDisplayFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ValueDisplay] = new DefaultReportValueDisplayFormat {}
  implicit lazy val ReportDataRangeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.DataRange] = new DefaultReportDataRangeFormat {}
  implicit lazy val ReportMeterIntervalFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.MeterInterval] = new DefaultReportMeterIntervalFormat {}
  implicit lazy val ReportThermometerChartFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ThermometerChart] = new DefaultReportThermometerChartFormat {}
  implicit lazy val ReportValueLocationFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ValueLocation] = new DefaultReportValueLocationFormat {}
  implicit lazy val ReportIsShowValueLinesFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowValueLines] = new DefaultReportIsShowValueLinesFormat {}
  implicit lazy val ReportThermometerPlotFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ThermometerPlot] = new DefaultReportThermometerPlotFormat {}
  implicit lazy val ReportLowRangeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LowRange] = new DefaultReportLowRangeFormat {}
  implicit lazy val ReportMediumRangeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.MediumRange] = new DefaultReportMediumRangeFormat {}
  implicit lazy val ReportHighRangeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.HighRange] = new DefaultReportHighRangeFormat {}
  implicit lazy val ReportMultiAxisChartFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.MultiAxisChart] = new DefaultReportMultiAxisChartFormat {}
  implicit lazy val ReportMultiAxisPlotFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.MultiAxisPlot] = new DefaultReportMultiAxisPlotFormat {}
  implicit lazy val ReportPositionType3Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.PositionType3] = new DefaultReportPositionType3Format {}
  implicit lazy val ReportAxisFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Axis] = new DefaultReportAxisFormat {}
  implicit lazy val ReportIsRepeatColumnHeadersFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsRepeatColumnHeaders] = new DefaultReportIsRepeatColumnHeadersFormat {}
  implicit lazy val ReportIsRepeatRowHeadersFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsRepeatRowHeaders] = new DefaultReportIsRepeatRowHeadersFormat {}
  implicit lazy val ReportRunDirectionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.RunDirection] = new DefaultReportRunDirectionFormat {}
  implicit lazy val ReportHorizontalPositionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.HorizontalPosition] = new DefaultReportHorizontalPositionFormat {}
  implicit lazy val ReportCrosstabFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Crosstab] = new DefaultReportCrosstabFormat {}
  implicit lazy val ReportCrosstabParameterFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.CrosstabParameter] = new DefaultReportCrosstabParameterFormat {}
  implicit lazy val ReportParameterValueExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ParameterValueExpression] = new DefaultReportParameterValueExpressionFormat {}
  implicit lazy val ReportIsDataPreSortedFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsDataPreSorted] = new DefaultReportIsDataPreSortedFormat {}
  implicit lazy val ReportCrosstabDatasetFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.CrosstabDataset] = new DefaultReportCrosstabDatasetFormat {}
  implicit lazy val ReportCrosstabHeaderCellFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.CrosstabHeaderCell] = new DefaultReportCrosstabHeaderCellFormat {}
  implicit lazy val ReportTotalPositionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TotalPosition] = new DefaultReportTotalPositionFormat {}
  implicit lazy val ReportHeaderPositionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.HeaderPosition] = new DefaultReportHeaderPositionFormat {}
  implicit lazy val ReportRowGroupFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.RowGroup] = new DefaultReportRowGroupFormat {}
  implicit lazy val ReportCrosstabRowHeaderFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.CrosstabRowHeader] = new DefaultReportCrosstabRowHeaderFormat {}
  implicit lazy val ReportCrosstabTotalRowHeaderFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.CrosstabTotalRowHeader] = new DefaultReportCrosstabTotalRowHeaderFormat {}
  implicit lazy val ReportTotalPositionTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TotalPositionType] = new DefaultReportTotalPositionTypeFormat {}
  implicit lazy val ReportHeaderPositionTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.HeaderPositionType] = new DefaultReportHeaderPositionTypeFormat {}
  implicit lazy val ReportColumnGroupFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ColumnGroup] = new DefaultReportColumnGroupFormat {}
  implicit lazy val ReportCrosstabColumnHeaderFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.CrosstabColumnHeader] = new DefaultReportCrosstabColumnHeaderFormat {}
  implicit lazy val ReportCrosstabTotalColumnHeaderFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.CrosstabTotalColumnHeader] = new DefaultReportCrosstabTotalColumnHeaderFormat {}
  implicit lazy val ReportCrosstabHeaderFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.CrosstabHeader] = new DefaultReportCrosstabHeaderFormat {}
  implicit lazy val ReportOrderTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.OrderType] = new DefaultReportOrderTypeFormat {}
  implicit lazy val ReportBucketFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Bucket] = new DefaultReportBucketFormat {}
  implicit lazy val ReportBucketExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.BucketExpression] = new DefaultReportBucketExpressionFormat {}
  implicit lazy val ReportOrderByExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.OrderByExpression] = new DefaultReportOrderByExpressionFormat {}
  implicit lazy val ReportComparatorExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ComparatorExpression] = new DefaultReportComparatorExpressionFormat {}
  implicit lazy val ReportPercentageOfFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.PercentageOf] = new DefaultReportPercentageOfFormat {}
  implicit lazy val ReportMeasureFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Measure] = new DefaultReportMeasureFormat {}
  implicit lazy val ReportAggregationCalculationTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.AggregationCalculationType] = new DefaultReportAggregationCalculationTypeFormat {}
  implicit lazy val ReportMeasureExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.MeasureExpression] = new DefaultReportMeasureExpressionFormat {}
  implicit lazy val ReportCrosstabCellFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.CrosstabCell] = new DefaultReportCrosstabCellFormat {}
  implicit lazy val ReportModeType2Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ModeType2] = new DefaultReportModeType2Format {}
  implicit lazy val ReportCellContentsFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.CellContents] = new DefaultReportCellContentsFormat {}
  implicit lazy val ReportWhenNoDataCellFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.WhenNoDataCell] = new DefaultReportWhenNoDataCellFormat {}
  implicit lazy val ReportBorderSplitTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.BorderSplitType] = new DefaultReportBorderSplitTypeFormat {}
  implicit lazy val ReportFrameFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Frame] = new DefaultReportFrameFormat {}
  implicit lazy val ReportGanttChartFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.GanttChart] = new DefaultReportGanttChartFormat {}
  implicit lazy val ReportGanttDatasetFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.GanttDataset] = new DefaultReportGanttDatasetFormat {}
  implicit lazy val ReportGanttSeriesFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.GanttSeries] = new DefaultReportGanttSeriesFormat {}
  implicit lazy val ReportTaskExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TaskExpression] = new DefaultReportTaskExpressionFormat {}
  implicit lazy val ReportSubtaskExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.SubtaskExpression] = new DefaultReportSubtaskExpressionFormat {}
  implicit lazy val ReportPercentExpressionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.PercentExpression] = new DefaultReportPercentExpressionFormat {}
  implicit lazy val ReportComponentElementFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ComponentElement] = new DefaultReportComponentElementFormat {}
  implicit lazy val ReportComponentTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ComponentType] = new DefaultReportComponentTypeFormat {}
  implicit lazy val ReportBasicEvaluationTimeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime] = new DefaultReportBasicEvaluationTimeFormat {}
  implicit lazy val ReportComplexEvaluationTimeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ComplexEvaluationTime] = new DefaultReportComplexEvaluationTimeFormat {}
  implicit lazy val ReportGenericElementFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.GenericElement] = new DefaultReportGenericElementFormat {}
  implicit lazy val ReportGenericElementTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.GenericElementType] = new DefaultReportGenericElementTypeFormat {}
  implicit lazy val ReportValueExpression2Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ValueExpression2] = new DefaultReportValueExpression2Format {}
  implicit lazy val ReportGenericElementParameterFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.GenericElementParameter] = new DefaultReportGenericElementParameterFormat {}
  implicit lazy val ReportMultiAxisDataFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.MultiAxisData] = new DefaultReportMultiAxisDataFormat {}
  implicit lazy val ReportMultiAxisDatasetFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.MultiAxisDataset] = new DefaultReportMultiAxisDatasetFormat {}
  implicit lazy val ReportAxisTypeFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.AxisType] = new DefaultReportAxisTypeFormat {}
  implicit lazy val ReportDataAxisFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.DataAxis] = new DefaultReportDataAxisFormat {}
  implicit lazy val ReportLabelExpression2Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LabelExpression2] = new DefaultReportLabelExpression2Format {}
  implicit lazy val ReportAxisLevelFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.AxisLevel] = new DefaultReportAxisLevelFormat {}
  implicit lazy val ReportOrderType2Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.OrderType2] = new DefaultReportOrderType2Format {}
  implicit lazy val ReportAxisLevelBucketFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.AxisLevelBucket] = new DefaultReportAxisLevelBucketFormat {}
  implicit lazy val ReportBucketPropertyFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.BucketProperty] = new DefaultReportBucketPropertyFormat {}
  implicit lazy val ReportLabelExpression3Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LabelExpression3] = new DefaultReportLabelExpression3Format {}
  implicit lazy val ReportValueExpression3Format: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ValueExpression3] = new DefaultReportValueExpression3Format {}
  implicit lazy val ReportMultiAxisMeasureFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.MultiAxisMeasure] = new DefaultReportMultiAxisMeasureFormat {}
  implicit lazy val ReportContentsPositionFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ContentsPosition] = new DefaultReportContentsPositionFormat {}
  implicit lazy val ReportCrosstabColumnCellFormat: scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.CrosstabColumnCell] = new DefaultReportCrosstabColumnCellFormat {}

  trait DefaultDomainSchemaTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.SchemaType] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.domain.SchemaType] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.domain.SchemaType] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.domain.SchemaType((node \ "itemGroups").headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.ItemGroupsType](_, scalaxb.ElemName(node) :: stack) },
        (node \ "items").headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.ItemsType](_, scalaxb.ElemName(node) :: stack) },
        (node \ "resources").headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.ResourcesType](_, scalaxb.ElemName(node) :: stack) },
        (node \ "dataSources").headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.DataSourcesType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.domain.SchemaType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.attr_version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.SchemaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.itemGroups map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.domain.ItemGroupsType](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("itemGroups"), __scope, false) } getOrElse {Nil},
        __obj.items map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.domain.ItemsType](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("items"), __scope, false) } getOrElse {Nil},
        __obj.resources map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.domain.ResourcesType](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("resources"), __scope, false) } getOrElse {Nil},
        __obj.dataSources map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.domain.DataSourcesType](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("dataSources"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultDomainObjectsTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.ObjectsType] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.domain.ObjectsType] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.domain.ObjectsType] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.domain.ObjectsType((node \ "Items").headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.ItemsType](_, scalaxb.ElemName(node) :: stack) },
        (node \ "ItemGroups").headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.ItemGroupsType](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.ObjectsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Items map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.domain.ItemsType](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("Items"), __scope, false) } getOrElse {Nil},
        __obj.ItemGroups map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.domain.ItemGroupsType](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("ItemGroups"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultDomainItemsTypeFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.domain.ItemsType] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    
    override def typeName: Option[String] = Some("ItemsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.domain.ItemsType] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), "item")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.ItemTypable](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.domain.ItemsType(p1) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.ItemsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.itemstypeoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.domain.ItemTypable]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultDomainItemTypableFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.ItemTypable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.domain.ItemTypable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("ItemGroupType")) => Right(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.ItemGroupType](node, stack))
          case _ => Right(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.ItemType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.domain.ItemTypable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: com.iofficecorp.jasperserver.pumped.domain.ItemGroupType => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.domain.ItemGroupType](x, __namespace, __elementLabel, __scope, true)
      case x: com.iofficecorp.jasperserver.pumped.domain.ItemType => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.domain.ItemType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultDomainItemTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.ItemType] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.domain.ItemType] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.domain.ItemType] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.domain.ItemType(scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@resourceId").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@resourceId" -> _ },
        (node \ "@label").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@label" -> _ },
        (node \ "@description").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@description" -> _ },
        (node \ "@labelId").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@labelId" -> _ },
        (node \ "@descriptionId").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@descriptionId" -> _ },
        (node \ "@dimensionOrMeasure").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@dimensionOrMeasure" -> _ },
        (node \ "@defaultMask").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@defaultMask" -> _ },
        (node \ "@defaultAgg").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@defaultAgg" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.domain.ItemType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.attr_id.toString, attr)
        case ("@resourceId", _) => attr = scala.xml.Attribute(null, "resourceId", __obj.attr_resourceId.toString, attr)
        case ("@label", _) => __obj.attr_label foreach { x => attr = scala.xml.Attribute(null, "label", x.toString, attr) }
        case ("@description", _) => __obj.attr_description foreach { x => attr = scala.xml.Attribute(null, "description", x.toString, attr) }
        case ("@labelId", _) => __obj.attr_labelId foreach { x => attr = scala.xml.Attribute(null, "labelId", x.toString, attr) }
        case ("@descriptionId", _) => __obj.attr_descriptionId foreach { x => attr = scala.xml.Attribute(null, "descriptionId", x.toString, attr) }
        case ("@dimensionOrMeasure", _) => __obj.attr_dimensionOrMeasure foreach { x => attr = scala.xml.Attribute(null, "dimensionOrMeasure", x.toString, attr) }
        case ("@defaultMask", _) => __obj.attr_defaultMask foreach { x => attr = scala.xml.Attribute(null, "defaultMask", x.toString, attr) }
        case ("@defaultAgg", _) => __obj.attr_defaultAgg foreach { x => attr = scala.xml.Attribute(null, "defaultAgg", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.ItemType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultDomainItemGroupsTypeFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.domain.ItemGroupsType] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    
    override def typeName: Option[String] = Some("ItemGroupsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.domain.ItemGroupsType] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), "itemGroup")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.ItemGroupType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.domain.ItemGroupsType(p1) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.ItemGroupsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.itemgroupstypeoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.domain.ItemGroupType]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultDomainItemGroupTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.ItemGroupType] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.domain.ItemGroupType] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.domain.ItemGroupType] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.domain.ItemGroupType((node \ "itemGroups").headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.ItemGroupsType](_, scalaxb.ElemName(node) :: stack) },
        (node \ "items").headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.ItemsType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@resourceId").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@resourceId" -> _ },
        (node \ "@label").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@label" -> _ },
        (node \ "@description").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@description" -> _ },
        (node \ "@labelId").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@labelId" -> _ },
        (node \ "@descriptionId").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@descriptionId" -> _ },
        (node \ "@dimensionOrMeasure").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@dimensionOrMeasure" -> _ },
        (node \ "@defaultMask").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@defaultMask" -> _ },
        (node \ "@defaultAgg").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@defaultAgg" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.domain.ItemGroupType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.attr_id.toString, attr)
        case ("@resourceId", _) => attr = scala.xml.Attribute(null, "resourceId", __obj.attr_resourceId.toString, attr)
        case ("@label", _) => __obj.attr_label foreach { x => attr = scala.xml.Attribute(null, "label", x.toString, attr) }
        case ("@description", _) => __obj.attr_description foreach { x => attr = scala.xml.Attribute(null, "description", x.toString, attr) }
        case ("@labelId", _) => __obj.attr_labelId foreach { x => attr = scala.xml.Attribute(null, "labelId", x.toString, attr) }
        case ("@descriptionId", _) => __obj.attr_descriptionId foreach { x => attr = scala.xml.Attribute(null, "descriptionId", x.toString, attr) }
        case ("@dimensionOrMeasure", _) => __obj.attr_dimensionOrMeasure foreach { x => attr = scala.xml.Attribute(null, "dimensionOrMeasure", x.toString, attr) }
        case ("@defaultMask", _) => __obj.attr_defaultMask foreach { x => attr = scala.xml.Attribute(null, "defaultMask", x.toString, attr) }
        case ("@defaultAgg", _) => __obj.attr_defaultAgg foreach { x => attr = scala.xml.Attribute(null, "defaultAgg", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.ItemGroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.itemGroups map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.domain.ItemGroupsType](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("itemGroups"), __scope, false) } getOrElse {Nil},
        __obj.items map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.domain.ItemsType](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("items"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultDomainDataSourcesTypeFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.domain.DataSourcesType] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    
    override def typeName: Option[String] = Some("DataSourcesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.domain.DataSourcesType] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), "jdbcDataSource")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.DataSourceType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.domain.DataSourcesType(p1) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.DataSourcesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.datasourcestypeoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.domain.DataSourceType]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultDomainDataSourceTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.DataSourceType] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.domain.DataSourceType] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.domain.DataSourceType] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.domain.DataSourceType((node \ "schemaMap").headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.SchemaMapType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.domain.DataSourceType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.attr_id.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.DataSourceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.schemaMap map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.domain.SchemaMapType](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("schemaMap"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultDomainSchemaMapTypeFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.domain.SchemaMapType] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    
    override def typeName: Option[String] = Some("SchemaMapType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.domain.SchemaMapType] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), "entry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.SchemaEntryType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.domain.SchemaMapType(p1) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.SchemaMapType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.schemamaptypeoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.domain.SchemaEntryType]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultDomainSchemaEntryTypeFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.domain.SchemaEntryType] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    
    override def typeName: Option[String] = Some("SchemaEntryType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.domain.SchemaEntryType] =
      phrase((((scalaxb.ElemName(Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), "string")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.domain.SchemaEntryType(p1,
        scala.collection.immutable.ListMap(List(
        (node \ "@key").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@key" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.domain.SchemaEntryType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@key", _) => attr = scala.xml.Attribute(null, "key", __obj.attr_key.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.SchemaEntryType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.schemaentrytypeoption) map {x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false)}).get)

  }

  trait DefaultDomainResourcesTypeFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.domain.ResourcesType] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    
    override def typeName: Option[String] = Some("ResourcesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.domain.ResourcesType] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), "jdbcTable")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.AnyDatasetType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), "jdbcQuery")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.AnyDatasetType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), "memory")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.AnyDatasetType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), "null")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.AnyDatasetType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), "dataSetRef")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.DataSetRefType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), "jrQueryDataSet")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.JrQueryDataSetType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.domain.ResourcesType(p1) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.ResourcesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.resourcestypeoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.domain.ResourcesTypeOption]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultDomainFieldListFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.domain.FieldList] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.domain.FieldList] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), "field")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.FieldType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.domain.FieldList(p1) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.FieldList, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.fieldlistoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.domain.FieldType]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultDomainGroupListFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.domain.GroupList] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.domain.GroupList] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), "group")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.GroupType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.domain.GroupList(p1) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.GroupList, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.grouplistoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.domain.GroupType]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultDomainAnyDatasetTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.AnyDatasetType] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.domain.AnyDatasetType] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.domain.AnyDatasetType] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.domain.AnyDatasetType((node \ "fieldList").headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.FieldList](_, scalaxb.ElemName(node) :: stack) },
        (node \ "groupList").headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.GroupList](_, scalaxb.ElemName(node) :: stack) },
        (node \ "joinOptions").headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.JoinOptionsType](_, scalaxb.ElemName(node) :: stack) },
        (node \ "joinInfo").headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.JoinInfoType](_, scalaxb.ElemName(node) :: stack) },
        (node \ "joinList").headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.JoinListType](_, scalaxb.ElemName(node) :: stack) },
        (node \ "joinedDataSetList").headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.JoinedDataSetListType](_, scalaxb.ElemName(node) :: stack) },
        (node \ "tableRefList").headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.TableRefListType](_, scalaxb.ElemName(node) :: stack) },
        (node \ "filterString").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "query").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "source").headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.ResourcesType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@datasourceId").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@datasourceId" -> _ },
        (node \ "@tableName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@tableName" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.domain.AnyDatasetType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.attr_id.toString, attr)
        case ("@datasourceId", _) => __obj.attr_datasourceId foreach { x => attr = scala.xml.Attribute(null, "datasourceId", x.toString, attr) }
        case ("@tableName", _) => __obj.attr_tableName foreach { x => attr = scala.xml.Attribute(null, "tableName", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.AnyDatasetType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.fieldList map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.domain.FieldList](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("fieldList"), __scope, false) } getOrElse {Nil},
        __obj.groupList map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.domain.GroupList](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("groupList"), __scope, false) } getOrElse {Nil},
        __obj.joinOptions map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.domain.JoinOptionsType](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("joinOptions"), __scope, false) } getOrElse {Nil},
        __obj.joinInfo map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.domain.JoinInfoType](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("joinInfo"), __scope, false) } getOrElse {Nil},
        __obj.joinList map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.domain.JoinListType](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("joinList"), __scope, false) } getOrElse {Nil},
        __obj.joinedDataSetList map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.domain.JoinedDataSetListType](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("joinedDataSetList"), __scope, false) } getOrElse {Nil},
        __obj.tableRefList map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.domain.TableRefListType](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("tableRefList"), __scope, false) } getOrElse {Nil},
        __obj.filterString map { scalaxb.toXML[String](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("filterString"), __scope, false) } getOrElse {Nil},
        __obj.query map { scalaxb.toXML[String](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("query"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.domain.ResourcesType](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("source"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultDomainPropertyMapFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.domain.PropertyMap] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.domain.PropertyMap] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), "entry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.EntryType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.domain.PropertyMap(p1) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.PropertyMap, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.propertymapoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.domain.EntryType]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultDomainFieldTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.FieldType] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.domain.FieldType] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.domain.FieldType] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.domain.FieldType((node \ "propertyMap").headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.PropertyMap](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ },
        (node \ "@dataSetExpression").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@dataSetExpression" -> _ },
        (node \ "@fieldDBName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@fieldDBName" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.domain.FieldType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.attr_id.toString, attr)
        case ("@type", _) => attr = scala.xml.Attribute(null, "type", __obj.attr_type.toString, attr)
        case ("@dataSetExpression", _) => __obj.attr_dataSetExpression foreach { x => attr = scala.xml.Attribute(null, "dataSetExpression", x.toString, attr) }
        case ("@fieldDBName", _) => __obj.attr_fieldDBName foreach { x => attr = scala.xml.Attribute(null, "fieldDBName", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.FieldType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.propertyMap map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.domain.PropertyMap](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("propertyMap"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultDomainEntryTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.EntryType] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.domain.EntryType] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.domain.EntryType] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.domain.EntryType((node \ "string").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@key").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@key" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.domain.EntryType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@key", _) => attr = scala.xml.Attribute(null, "key", __obj.attr_key.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.EntryType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.string map { scalaxb.toXML[String](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("string"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultDomainGroupTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.GroupType] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.domain.GroupType] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.domain.GroupType] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.domain.GroupType(scala.collection.immutable.ListMap(List(
        (node \ "@columnName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@columnName" -> _ },
        (node \ "@ascending").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ascending" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.domain.GroupType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@columnName", _) => attr = scala.xml.Attribute(null, "columnName", __obj.attr_columnName.toString, attr)
        case ("@ascending", _) => __obj.attr_ascending foreach { x => attr = scala.xml.Attribute(null, "ascending", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultDomainFieldList2Format extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.domain.FieldList2] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.domain.FieldList2] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), "fieldRef")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.FieldRefType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.domain.FieldList2(p1) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.FieldList2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.fieldlist2option flatMap { x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.domain.FieldRefType]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultDomainDataSetRefTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.DataSetRefType] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.domain.DataSetRefType] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.domain.DataSetRefType] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.domain.DataSetRefType((node \ "fieldList").headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.FieldList2](_, scalaxb.ElemName(node) :: stack) },
        (node \ "joinInfo").headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.JoinInfoType](_, scalaxb.ElemName(node) :: stack) },
        (node \ "joinList").headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.JoinListType](_, scalaxb.ElemName(node) :: stack) },
        (node \ "joinedDataSetList").headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.JoinedDataSetListType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@referenceId").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@referenceId" -> _ },
        (node \ "@dataSetType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@dataSetType" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.domain.DataSetRefType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.attr_id.toString, attr)
        case ("@referenceId", _) => attr = scala.xml.Attribute(null, "referenceId", __obj.attr_referenceId.toString, attr)
        case ("@dataSetType", _) => __obj.attr_dataSetType foreach { x => attr = scala.xml.Attribute(null, "dataSetType", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.DataSetRefType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.fieldList map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.domain.FieldList2](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("fieldList"), __scope, false) } getOrElse {Nil},
        __obj.joinInfo map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.domain.JoinInfoType](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("joinInfo"), __scope, false) } getOrElse {Nil},
        __obj.joinList map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.domain.JoinListType](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("joinList"), __scope, false) } getOrElse {Nil},
        __obj.joinedDataSetList map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.domain.JoinedDataSetListType](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("joinedDataSetList"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultDomainJoinInfoTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.JoinInfoType] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.domain.JoinInfoType] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.domain.JoinInfoType] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.domain.JoinInfoType(scala.collection.immutable.ListMap(List(
        (node \ "@alias").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@alias" -> _ },
        (node \ "@referenceId").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@referenceId" -> _ },
        (node \ "@joinType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("inner"), scalaxb.ElemName(node) :: stack))) map { "@joinType" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.domain.JoinInfoType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@alias", _) => attr = scala.xml.Attribute(null, "alias", __obj.attr_alias.toString, attr)
        case ("@referenceId", _) => attr = scala.xml.Attribute(null, "referenceId", __obj.attr_referenceId.toString, attr)
        case ("@joinType", _) => if (__obj.attr_joinType.toString != "inner") attr = scala.xml.Attribute(null, "joinType", __obj.attr_joinType.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.JoinInfoType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultDomainJoinOptionsTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.JoinOptionsType] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.domain.JoinOptionsType] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.domain.JoinOptionsType] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.domain.JoinOptionsType(scala.collection.immutable.ListMap(List(
        (node \ "@includeAllDataIslandJoins").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Boolean](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@includeAllDataIslandJoins" -> _ },
        (node \ "@suppressCircularJoins").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Boolean](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@suppressCircularJoins" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.domain.JoinOptionsType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@includeAllDataIslandJoins", _) => if (__obj.attr_includeAllDataIslandJoins.toString != "false") attr = scala.xml.Attribute(null, "includeAllDataIslandJoins", __obj.attr_includeAllDataIslandJoins.toString, attr)
        case ("@suppressCircularJoins", _) => if (__obj.attr_suppressCircularJoins.toString != "false") attr = scala.xml.Attribute(null, "suppressCircularJoins", __obj.attr_suppressCircularJoins.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.JoinOptionsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultDomainFieldRefTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.FieldRefType] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.domain.FieldRefType] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.domain.FieldRefType] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.domain.FieldRefType(scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@referenceId").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@referenceId" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.domain.FieldRefType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.attr_id.toString, attr)
        case ("@referenceId", _) => attr = scala.xml.Attribute(null, "referenceId", __obj.attr_referenceId.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.FieldRefType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultDomainJoinListTypeFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.domain.JoinListType] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    
    override def typeName: Option[String] = Some("JoinListType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.domain.JoinListType] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), "join")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.JoinType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.domain.JoinListType(p1) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.JoinListType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.joinlisttypeoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.domain.JoinType]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultDomainJoinTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.JoinType] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.domain.JoinType] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.domain.JoinType] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.domain.JoinType(scala.collection.immutable.ListMap(List(
        (node \ "@left").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@left" -> _ },
        (node \ "@right").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@right" -> _ },
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("inner"), scalaxb.ElemName(node) :: stack))) map { "@type" -> _ },
        (node \ "@expr").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@expr" -> _ },
        (node \ "@weight").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Int](scala.xml.Text("1"), scalaxb.ElemName(node) :: stack))) map { "@weight" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.domain.JoinType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@left", _) => attr = scala.xml.Attribute(null, "left", __obj.attr_left.toString, attr)
        case ("@right", _) => attr = scala.xml.Attribute(null, "right", __obj.attr_right.toString, attr)
        case ("@type", _) => if (__obj.attr_type.toString != "inner") attr = scala.xml.Attribute(null, "type", __obj.attr_type.toString, attr)
        case ("@expr", _) => attr = scala.xml.Attribute(null, "expr", __obj.attr_expr.toString, attr)
        case ("@weight", _) => if (__obj.attr_weight.toString != "1") attr = scala.xml.Attribute(null, "weight", __obj.attr_weight.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.JoinType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultDomainTableRefListTypeFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.domain.TableRefListType] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    
    override def typeName: Option[String] = Some("TableRefListType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.domain.TableRefListType] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), "tableRef")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.TableRefType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.domain.TableRefListType(p1) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.TableRefListType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.tablereflisttypeoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.domain.TableRefType]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultDomainTableRefTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.TableRefType] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.domain.TableRefType] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.domain.TableRefType] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.domain.TableRefType(scala.collection.immutable.ListMap(List(
        (node \ "@tableId").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@tableId" -> _ },
        (node \ "@tableAlias").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@tableAlias" -> _ },
        (node \ "@alwaysIncludeTable").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Boolean](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@alwaysIncludeTable" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.domain.TableRefType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@tableId", _) => attr = scala.xml.Attribute(null, "tableId", __obj.attr_tableId.toString, attr)
        case ("@tableAlias", _) => __obj.attr_tableAlias foreach { x => attr = scala.xml.Attribute(null, "tableAlias", x.toString, attr) }
        case ("@alwaysIncludeTable", _) => if (__obj.attr_alwaysIncludeTable.toString != "false") attr = scala.xml.Attribute(null, "alwaysIncludeTable", __obj.attr_alwaysIncludeTable.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.TableRefType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultDomainJoinedDataSetListTypeFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.domain.JoinedDataSetListType] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    
    override def typeName: Option[String] = Some("JoinedDataSetListType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.domain.JoinedDataSetListType] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), "joinedDataSetRef")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.JoinedDataSetRefType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.domain.JoinedDataSetListType(p1) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.JoinedDataSetListType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.joineddatasetlisttypeoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.domain.JoinedDataSetRefType]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultDomainJoinedDataSetRefTypeFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.domain.JoinedDataSetRefType] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    
    override def typeName: Option[String] = Some("JoinedDataSetRefType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.domain.JoinedDataSetRefType] =
      phrase((((scalaxb.ElemName(Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), "joinString")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.domain.JoinedDataSetRefType(p1) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.JoinedDataSetRefType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.joineddatasetreftypeoption) map {x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false)}).get)

  }

  trait DefaultDomainFieldList3Format extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.domain.FieldList3] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.domain.FieldList3] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), "field")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.FieldType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.domain.FieldList3(p1) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.FieldList3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.fieldlist3option flatMap { x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.domain.FieldType]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultDomainJrQueryDataSetTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.domain.JrQueryDataSetType] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.domain.JrQueryDataSetType] {
    val targetNamespace: Option[String] = Some("http://www.jaspersoft.com/2007/SL/XMLSchema")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.domain.JrQueryDataSetType] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.domain.JrQueryDataSetType((node \ "fieldList").headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.domain.FieldList3](_, scalaxb.ElemName(node) :: stack) },
        (node \ "query").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "dsReferenceURI").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@datasourceId").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@datasourceId" -> _ },
        (node \ "@queryLanguage").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@queryLanguage" -> _ },
        (node \ "@maxRows").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@maxRows" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.domain.JrQueryDataSetType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.attr_id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@datasourceId", _) => attr = scala.xml.Attribute(null, "datasourceId", __obj.attr_datasourceId.toString, attr)
        case ("@queryLanguage", _) => __obj.attr_queryLanguage foreach { x => attr = scala.xml.Attribute(null, "queryLanguage", x.toString, attr) }
        case ("@maxRows", _) => __obj.attr_maxRows foreach { x => attr = scala.xml.Attribute(null, "maxRows", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.domain.JrQueryDataSetType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.fieldList map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.domain.FieldList3](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("fieldList"), __scope, false) } getOrElse {Nil},
        __obj.query map { scalaxb.toXML[String](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("query"), __scope, false) } getOrElse {Nil},
        __obj.dsReferenceURI map { scalaxb.toXML[String](_, Some("http://www.jaspersoft.com/2007/SL/XMLSchema"), Some("dsReferenceURI"), __scope, false) } getOrElse {Nil})


  }

  def buildComponentsPrintOrderFormat = new DefaultComponentsPrintOrderFormat {}
  trait DefaultComponentsPrintOrderFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.PrintOrder] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.PrintOrder] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.components.PrintOrder.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.components.PrintOrder.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.PrintOrder, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComponentsListTypeFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.ListType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.ListType] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "datasetRun")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "listContents")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.components.ListType(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DatasetRun](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.ListContents](p2, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@printOrder").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.PrintOrder](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.PrintOrder](scala.xml.Text("Vertical"), scalaxb.ElemName(node) :: stack))) map { "@printOrder" -> _ },
        (node \ "@ignoreWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@ignoreWidth" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.ListType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@printOrder", _) => if (__obj.attr_printOrder.toString != "Vertical") attr = scala.xml.Attribute(null, "printOrder", __obj.attr_printOrder.toString, attr)
        case ("@ignoreWidth", _) => __obj.attr_ignoreWidth foreach { x => attr = scala.xml.Attribute(null, "ignoreWidth", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.ListType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DatasetRun](__obj.datasetRun, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("datasetRun"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.ListContents](__obj.listContents, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("listContents"), __scope, false))

  }

  trait DefaultComponentsListContentsFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.ListContents] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.ListContents] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "break")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Break](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "line")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Line](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "rectangle")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Rectangle](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "ellipse")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Ellipse](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "image")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Image](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "staticText")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StaticText](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "textField")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TextField](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "subreport")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Subreport](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "pieChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PieChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "pie3DChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Pie3DChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "barChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BarChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "bar3DChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Bar3DChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xyBarChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XyBarChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "stackedBarChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StackedBarChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "stackedBar3DChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StackedBar3DChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "lineChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LineChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xyLineChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XyLineChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "areaChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.AreaChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xyAreaChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XyAreaChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "scatterChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ScatterChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "bubbleChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BubbleChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "timeSeriesChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TimeSeriesChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "highLowChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HighLowChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "candlestickChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CandlestickChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "meterChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.MeterChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "thermometerChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ThermometerChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "multiAxisChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.MultiAxisChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "stackedAreaChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StackedAreaChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "ganttChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.GanttChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "elementGroup")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ElementGroup](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "crosstab")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Crosstab](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "frame")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Frame](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "componentElement")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ComponentElement](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "genericElement")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.GenericElement](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.components.ListContents(p1,
        scala.collection.immutable.ListMap(List(
        (node \ "@height").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Long](x, scalaxb.ElemName(node) :: stack)) } map { "@height" -> _ },
        (node \ "@width").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Long](x, scalaxb.ElemName(node) :: stack)) } map { "@width" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.ListContents, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@height", _) => attr = scala.xml.Attribute(null, "height", __obj.attr_height.toString, attr)
        case ("@width", _) => __obj.attr_width foreach { x => attr = scala.xml.Attribute(null, "width", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.ListContents, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.listcontentsoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultComponentsCodeExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.components.CodeExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.CodeExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultComponentsApplicationIdentifierExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.ApplicationIdentifierExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.ApplicationIdentifierExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.components.ApplicationIdentifierExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.ApplicationIdentifierExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  def buildComponentsTypeFormat = new DefaultComponentsTypeFormat {}
  trait DefaultComponentsTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Type] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.Type] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.components.Type.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.components.Type.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.Type, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildComponentsRotationFormat = new DefaultComponentsRotationFormat {}
  trait DefaultComponentsRotationFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Rotation] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.Rotation] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.components.Rotation.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.components.Rotation.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.Rotation, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComponentsBarbecueFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.Barbecue] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.Barbecue] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "codeExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "applicationIdentifierExpression")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.components.Barbecue(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.ApplicationIdentifierExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Type](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ },
        (node \ "@drawText").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Boolean](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@drawText" -> _ },
        (node \ "@checksumRequired").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Boolean](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@checksumRequired" -> _ },
        (node \ "@barWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Long](x, scalaxb.ElemName(node) :: stack)) } map { "@barWidth" -> _ },
        (node \ "@barHeight").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Long](x, scalaxb.ElemName(node) :: stack)) } map { "@barHeight" -> _ },
        (node \ "@evaluationTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime](scala.xml.Text("Now"), scalaxb.ElemName(node) :: stack))) map { "@evaluationTime" -> _ },
        (node \ "@evaluationGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationGroup" -> _ },
        (node \ "@rotation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Rotation](x, scalaxb.ElemName(node) :: stack)) } map { "@rotation" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.Barbecue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(null, "type", __obj.attr_type.toString, attr)
        case ("@drawText", _) => if (__obj.attr_drawText.toString != "false") attr = scala.xml.Attribute(null, "drawText", __obj.attr_drawText.toString, attr)
        case ("@checksumRequired", _) => if (__obj.attr_checksumRequired.toString != "false") attr = scala.xml.Attribute(null, "checksumRequired", __obj.attr_checksumRequired.toString, attr)
        case ("@barWidth", _) => __obj.attr_barWidth foreach { x => attr = scala.xml.Attribute(null, "barWidth", x.toString, attr) }
        case ("@barHeight", _) => __obj.attr_barHeight foreach { x => attr = scala.xml.Attribute(null, "barHeight", x.toString, attr) }
        case ("@evaluationTime", _) => if (__obj.attr_evaluationTime.toString != "Now") attr = scala.xml.Attribute(null, "evaluationTime", __obj.attr_evaluationTime.toString, attr)
        case ("@evaluationGroup", _) => __obj.attr_evaluationGroup foreach { x => attr = scala.xml.Attribute(null, "evaluationGroup", x.toString, attr) }
        case ("@rotation", _) => __obj.attr_rotation foreach { x => attr = scala.xml.Attribute(null, "rotation", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.Barbecue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression](__obj.codeExpression, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("codeExpression"), __scope, false),
        __obj.applicationIdentifierExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.ApplicationIdentifierExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("applicationIdentifierExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComponentsCodeExpression2Format extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultComponentsBarcodableFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Barcodable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.Barcodable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("Barcode4j")) => Right(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Barcode4jable](node, stack))
          case (Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("Barcode4JFourState")) => Right(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Barcode4JFourState](node, stack))
          case (Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("Barcode4JCode128")) => Right(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Barcode4JCode128able](node, stack))
          case _ => Right(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Barcode](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.Barcodable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: com.iofficecorp.jasperserver.pumped.report.components.Barcode4jable => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.Barcode4jable](x, __namespace, __elementLabel, __scope, true)
      case x: com.iofficecorp.jasperserver.pumped.report.components.QRCode => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.QRCode](x, __namespace, __elementLabel, __scope, true)
      case x: com.iofficecorp.jasperserver.pumped.report.components.Barcode => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.Barcode](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultComponentsBarcodeFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.Barcode] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    override def typeName: Option[String] = Some("Barcode")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.Barcode] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "codeExpression")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.components.Barcode(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@evaluationTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationTime" -> _ },
        (node \ "@evaluationGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationGroup" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.Barcode, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evaluationTime", _) => __obj.attr_evaluationTime foreach { x => attr = scala.xml.Attribute(null, "evaluationTime", x.toString, attr) }
        case ("@evaluationGroup", _) => __obj.attr_evaluationGroup foreach { x => attr = scala.xml.Attribute(null, "evaluationGroup", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.Barcode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](__obj.codeExpression, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("codeExpression"), __scope, false))

  }

  trait DefaultComponentsPatternExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.components.PatternExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.PatternExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  def buildComponentsOrientationFormat = new DefaultComponentsOrientationFormat {}
  trait DefaultComponentsOrientationFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Orientation] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.Orientation] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.components.Orientation.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.components.Orientation.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.Orientation, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildComponentsTextPositionFormat = new DefaultComponentsTextPositionFormat {}
  trait DefaultComponentsTextPositionFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.TextPosition] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.TextPosition] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.components.TextPosition.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.components.TextPosition.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.TextPosition, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComponentsBarcode4jableFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Barcode4jable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.Barcode4jable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("Barcode4JFourState")) => Right(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Barcode4JFourState](node, stack))
          case (Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("Barcode4JCode128")) => Right(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Barcode4JCode128able](node, stack))
          case _ => Right(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Barcode4j](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.Barcode4jable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: com.iofficecorp.jasperserver.pumped.report.components.Barcode4JFourState => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.Barcode4JFourState](x, __namespace, __elementLabel, __scope, true)
      case x: com.iofficecorp.jasperserver.pumped.report.components.Barcode4JCode128able => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.Barcode4JCode128able](x, __namespace, __elementLabel, __scope, true)
      case x: com.iofficecorp.jasperserver.pumped.report.components.PDF417 => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.PDF417](x, __namespace, __elementLabel, __scope, true)
      case x: com.iofficecorp.jasperserver.pumped.report.components.POSTNET => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.POSTNET](x, __namespace, __elementLabel, __scope, true)
      case x: com.iofficecorp.jasperserver.pumped.report.components.EAN8 => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.EAN8](x, __namespace, __elementLabel, __scope, true)
      case x: com.iofficecorp.jasperserver.pumped.report.components.EAN13 => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.EAN13](x, __namespace, __elementLabel, __scope, true)
      case x: com.iofficecorp.jasperserver.pumped.report.components.UPCE => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.UPCE](x, __namespace, __elementLabel, __scope, true)
      case x: com.iofficecorp.jasperserver.pumped.report.components.UPCA => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.UPCA](x, __namespace, __elementLabel, __scope, true)
      case x: com.iofficecorp.jasperserver.pumped.report.components.Interleaved2Of5 => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.Interleaved2Of5](x, __namespace, __elementLabel, __scope, true)
      case x: com.iofficecorp.jasperserver.pumped.report.components.Code39 => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.Code39](x, __namespace, __elementLabel, __scope, true)
      case x: com.iofficecorp.jasperserver.pumped.report.components.DataMatrix => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.DataMatrix](x, __namespace, __elementLabel, __scope, true)
      case x: com.iofficecorp.jasperserver.pumped.report.components.Codabar => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.Codabar](x, __namespace, __elementLabel, __scope, true)
      case x: com.iofficecorp.jasperserver.pumped.report.components.Barcode4j => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.Barcode4j](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultComponentsBarcode4jFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.Barcode4j] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    override def typeName: Option[String] = Some("Barcode4j")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.Barcode4j] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "codeExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "patternExpression")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.components.Barcode4j(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@evaluationTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationTime" -> _ },
        (node \ "@evaluationGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationGroup" -> _ },
        (node \ "@orientation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Orientation](x, scalaxb.ElemName(node) :: stack)) } map { "@orientation" -> _ },
        (node \ "@moduleWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@moduleWidth" -> _ },
        (node \ "@textPosition").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TextPosition](x, scalaxb.ElemName(node) :: stack)) } map { "@textPosition" -> _ },
        (node \ "@quietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@quietZone" -> _ },
        (node \ "@verticalQuietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@verticalQuietZone" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.Barcode4j, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evaluationTime", _) => __obj.attr_evaluationTime foreach { x => attr = scala.xml.Attribute(null, "evaluationTime", x.toString, attr) }
        case ("@evaluationGroup", _) => __obj.attr_evaluationGroup foreach { x => attr = scala.xml.Attribute(null, "evaluationGroup", x.toString, attr) }
        case ("@orientation", _) => __obj.attr_orientation foreach { x => attr = scala.xml.Attribute(null, "orientation", x.toString, attr) }
        case ("@moduleWidth", _) => __obj.attr_moduleWidth foreach { x => attr = scala.xml.Attribute(null, "moduleWidth", x.toString, attr) }
        case ("@textPosition", _) => __obj.attr_textPosition foreach { x => attr = scala.xml.Attribute(null, "textPosition", x.toString, attr) }
        case ("@quietZone", _) => __obj.attr_quietZone foreach { x => attr = scala.xml.Attribute(null, "quietZone", x.toString, attr) }
        case ("@verticalQuietZone", _) => __obj.attr_verticalQuietZone foreach { x => attr = scala.xml.Attribute(null, "verticalQuietZone", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.Barcode4j, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](__obj.codeExpression, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("codeExpression"), __scope, false),
        __obj.patternExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("patternExpression"), __scope, false) } getOrElse {Nil})

  }

  def buildComponentsChecksumMode4jFormat = new DefaultComponentsChecksumMode4jFormat {}
  trait DefaultComponentsChecksumMode4jFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.ChecksumMode4j] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.ChecksumMode4j] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.components.ChecksumMode4j.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.components.ChecksumMode4j.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.ChecksumMode4j, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComponentsCodabarFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.Codabar] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.Codabar] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "codeExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "patternExpression")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.components.Codabar(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@evaluationTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationTime" -> _ },
        (node \ "@evaluationGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationGroup" -> _ },
        (node \ "@orientation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Orientation](x, scalaxb.ElemName(node) :: stack)) } map { "@orientation" -> _ },
        (node \ "@moduleWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@moduleWidth" -> _ },
        (node \ "@textPosition").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TextPosition](x, scalaxb.ElemName(node) :: stack)) } map { "@textPosition" -> _ },
        (node \ "@quietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@quietZone" -> _ },
        (node \ "@verticalQuietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@verticalQuietZone" -> _ },
        (node \ "@wideFactor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@wideFactor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.Codabar, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evaluationTime", _) => __obj.attr_evaluationTime foreach { x => attr = scala.xml.Attribute(null, "evaluationTime", x.toString, attr) }
        case ("@evaluationGroup", _) => __obj.attr_evaluationGroup foreach { x => attr = scala.xml.Attribute(null, "evaluationGroup", x.toString, attr) }
        case ("@orientation", _) => __obj.attr_orientation foreach { x => attr = scala.xml.Attribute(null, "orientation", x.toString, attr) }
        case ("@moduleWidth", _) => __obj.attr_moduleWidth foreach { x => attr = scala.xml.Attribute(null, "moduleWidth", x.toString, attr) }
        case ("@textPosition", _) => __obj.attr_textPosition foreach { x => attr = scala.xml.Attribute(null, "textPosition", x.toString, attr) }
        case ("@quietZone", _) => __obj.attr_quietZone foreach { x => attr = scala.xml.Attribute(null, "quietZone", x.toString, attr) }
        case ("@verticalQuietZone", _) => __obj.attr_verticalQuietZone foreach { x => attr = scala.xml.Attribute(null, "verticalQuietZone", x.toString, attr) }
        case ("@wideFactor", _) => __obj.attr_wideFactor foreach { x => attr = scala.xml.Attribute(null, "wideFactor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.Codabar, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](__obj.codeExpression, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("codeExpression"), __scope, false),
        __obj.patternExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("patternExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComponentsBarcode4JCode128ableFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Barcode4JCode128able] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.Barcode4JCode128able] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          
          case _ => Right(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Barcode4JCode128](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.Barcode4JCode128able, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: com.iofficecorp.jasperserver.pumped.report.components.EAN128 => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.EAN128](x, __namespace, __elementLabel, __scope, true)
      case x: com.iofficecorp.jasperserver.pumped.report.components.Barcode4JCode128 => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.Barcode4JCode128](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultComponentsBarcode4JCode128Format extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.Barcode4JCode128] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    override def typeName: Option[String] = Some("Barcode4JCode128")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.Barcode4JCode128] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "codeExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "patternExpression")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.components.Barcode4JCode128(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@evaluationTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationTime" -> _ },
        (node \ "@evaluationGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationGroup" -> _ },
        (node \ "@orientation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Orientation](x, scalaxb.ElemName(node) :: stack)) } map { "@orientation" -> _ },
        (node \ "@moduleWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@moduleWidth" -> _ },
        (node \ "@textPosition").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TextPosition](x, scalaxb.ElemName(node) :: stack)) } map { "@textPosition" -> _ },
        (node \ "@quietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@quietZone" -> _ },
        (node \ "@verticalQuietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@verticalQuietZone" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.Barcode4JCode128, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evaluationTime", _) => __obj.attr_evaluationTime foreach { x => attr = scala.xml.Attribute(null, "evaluationTime", x.toString, attr) }
        case ("@evaluationGroup", _) => __obj.attr_evaluationGroup foreach { x => attr = scala.xml.Attribute(null, "evaluationGroup", x.toString, attr) }
        case ("@orientation", _) => __obj.attr_orientation foreach { x => attr = scala.xml.Attribute(null, "orientation", x.toString, attr) }
        case ("@moduleWidth", _) => __obj.attr_moduleWidth foreach { x => attr = scala.xml.Attribute(null, "moduleWidth", x.toString, attr) }
        case ("@textPosition", _) => __obj.attr_textPosition foreach { x => attr = scala.xml.Attribute(null, "textPosition", x.toString, attr) }
        case ("@quietZone", _) => __obj.attr_quietZone foreach { x => attr = scala.xml.Attribute(null, "quietZone", x.toString, attr) }
        case ("@verticalQuietZone", _) => __obj.attr_verticalQuietZone foreach { x => attr = scala.xml.Attribute(null, "verticalQuietZone", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.Barcode4JCode128, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](__obj.codeExpression, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("codeExpression"), __scope, false),
        __obj.patternExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("patternExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComponentsTemplateExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.TemplateExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.TemplateExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.components.TemplateExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.TemplateExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultComponentsEAN128Format extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.EAN128] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.EAN128] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "codeExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "patternExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "templateExpression")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.components.EAN128(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TemplateExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@evaluationTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationTime" -> _ },
        (node \ "@evaluationGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationGroup" -> _ },
        (node \ "@orientation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Orientation](x, scalaxb.ElemName(node) :: stack)) } map { "@orientation" -> _ },
        (node \ "@moduleWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@moduleWidth" -> _ },
        (node \ "@textPosition").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TextPosition](x, scalaxb.ElemName(node) :: stack)) } map { "@textPosition" -> _ },
        (node \ "@quietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@quietZone" -> _ },
        (node \ "@verticalQuietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@verticalQuietZone" -> _ },
        (node \ "@checksumMode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.ChecksumMode4j](x, scalaxb.ElemName(node) :: stack)) } map { "@checksumMode" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.EAN128, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evaluationTime", _) => __obj.attr_evaluationTime foreach { x => attr = scala.xml.Attribute(null, "evaluationTime", x.toString, attr) }
        case ("@evaluationGroup", _) => __obj.attr_evaluationGroup foreach { x => attr = scala.xml.Attribute(null, "evaluationGroup", x.toString, attr) }
        case ("@orientation", _) => __obj.attr_orientation foreach { x => attr = scala.xml.Attribute(null, "orientation", x.toString, attr) }
        case ("@moduleWidth", _) => __obj.attr_moduleWidth foreach { x => attr = scala.xml.Attribute(null, "moduleWidth", x.toString, attr) }
        case ("@textPosition", _) => __obj.attr_textPosition foreach { x => attr = scala.xml.Attribute(null, "textPosition", x.toString, attr) }
        case ("@quietZone", _) => __obj.attr_quietZone foreach { x => attr = scala.xml.Attribute(null, "quietZone", x.toString, attr) }
        case ("@verticalQuietZone", _) => __obj.attr_verticalQuietZone foreach { x => attr = scala.xml.Attribute(null, "verticalQuietZone", x.toString, attr) }
        case ("@checksumMode", _) => __obj.attr_checksumMode foreach { x => attr = scala.xml.Attribute(null, "checksumMode", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.EAN128, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](__obj.codeExpression, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("codeExpression"), __scope, false),
        __obj.patternExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("patternExpression"), __scope, false) } getOrElse {Nil},
        __obj.templateExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.TemplateExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("templateExpression"), __scope, false) } getOrElse {Nil})

  }

  def buildComponentsShapeFormat = new DefaultComponentsShapeFormat {}
  trait DefaultComponentsShapeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.Shape] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.Shape] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.components.Shape.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.components.Shape.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.Shape, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComponentsDataMatrixFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.DataMatrix] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.DataMatrix] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "codeExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "patternExpression")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.components.DataMatrix(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@evaluationTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationTime" -> _ },
        (node \ "@evaluationGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationGroup" -> _ },
        (node \ "@orientation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Orientation](x, scalaxb.ElemName(node) :: stack)) } map { "@orientation" -> _ },
        (node \ "@moduleWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@moduleWidth" -> _ },
        (node \ "@textPosition").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TextPosition](x, scalaxb.ElemName(node) :: stack)) } map { "@textPosition" -> _ },
        (node \ "@quietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@quietZone" -> _ },
        (node \ "@verticalQuietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@verticalQuietZone" -> _ },
        (node \ "@shape").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Shape](x, scalaxb.ElemName(node) :: stack)) } map { "@shape" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.DataMatrix, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evaluationTime", _) => __obj.attr_evaluationTime foreach { x => attr = scala.xml.Attribute(null, "evaluationTime", x.toString, attr) }
        case ("@evaluationGroup", _) => __obj.attr_evaluationGroup foreach { x => attr = scala.xml.Attribute(null, "evaluationGroup", x.toString, attr) }
        case ("@orientation", _) => __obj.attr_orientation foreach { x => attr = scala.xml.Attribute(null, "orientation", x.toString, attr) }
        case ("@moduleWidth", _) => __obj.attr_moduleWidth foreach { x => attr = scala.xml.Attribute(null, "moduleWidth", x.toString, attr) }
        case ("@textPosition", _) => __obj.attr_textPosition foreach { x => attr = scala.xml.Attribute(null, "textPosition", x.toString, attr) }
        case ("@quietZone", _) => __obj.attr_quietZone foreach { x => attr = scala.xml.Attribute(null, "quietZone", x.toString, attr) }
        case ("@verticalQuietZone", _) => __obj.attr_verticalQuietZone foreach { x => attr = scala.xml.Attribute(null, "verticalQuietZone", x.toString, attr) }
        case ("@shape", _) => __obj.attr_shape foreach { x => attr = scala.xml.Attribute(null, "shape", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.DataMatrix, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](__obj.codeExpression, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("codeExpression"), __scope, false),
        __obj.patternExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("patternExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComponentsCode39Format extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.Code39] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.Code39] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "codeExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "patternExpression")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.components.Code39(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@evaluationTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationTime" -> _ },
        (node \ "@evaluationGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationGroup" -> _ },
        (node \ "@orientation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Orientation](x, scalaxb.ElemName(node) :: stack)) } map { "@orientation" -> _ },
        (node \ "@moduleWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@moduleWidth" -> _ },
        (node \ "@textPosition").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TextPosition](x, scalaxb.ElemName(node) :: stack)) } map { "@textPosition" -> _ },
        (node \ "@quietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@quietZone" -> _ },
        (node \ "@verticalQuietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@verticalQuietZone" -> _ },
        (node \ "@checksumMode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.ChecksumMode4j](x, scalaxb.ElemName(node) :: stack)) } map { "@checksumMode" -> _ },
        (node \ "@displayChecksum").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@displayChecksum" -> _ },
        (node \ "@displayStartStop").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@displayStartStop" -> _ },
        (node \ "@extendedCharSetEnabled").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@extendedCharSetEnabled" -> _ },
        (node \ "@intercharGapWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@intercharGapWidth" -> _ },
        (node \ "@wideFactor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@wideFactor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.Code39, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evaluationTime", _) => __obj.attr_evaluationTime foreach { x => attr = scala.xml.Attribute(null, "evaluationTime", x.toString, attr) }
        case ("@evaluationGroup", _) => __obj.attr_evaluationGroup foreach { x => attr = scala.xml.Attribute(null, "evaluationGroup", x.toString, attr) }
        case ("@orientation", _) => __obj.attr_orientation foreach { x => attr = scala.xml.Attribute(null, "orientation", x.toString, attr) }
        case ("@moduleWidth", _) => __obj.attr_moduleWidth foreach { x => attr = scala.xml.Attribute(null, "moduleWidth", x.toString, attr) }
        case ("@textPosition", _) => __obj.attr_textPosition foreach { x => attr = scala.xml.Attribute(null, "textPosition", x.toString, attr) }
        case ("@quietZone", _) => __obj.attr_quietZone foreach { x => attr = scala.xml.Attribute(null, "quietZone", x.toString, attr) }
        case ("@verticalQuietZone", _) => __obj.attr_verticalQuietZone foreach { x => attr = scala.xml.Attribute(null, "verticalQuietZone", x.toString, attr) }
        case ("@checksumMode", _) => __obj.attr_checksumMode foreach { x => attr = scala.xml.Attribute(null, "checksumMode", x.toString, attr) }
        case ("@displayChecksum", _) => __obj.attr_displayChecksum foreach { x => attr = scala.xml.Attribute(null, "displayChecksum", x.toString, attr) }
        case ("@displayStartStop", _) => __obj.attr_displayStartStop foreach { x => attr = scala.xml.Attribute(null, "displayStartStop", x.toString, attr) }
        case ("@extendedCharSetEnabled", _) => __obj.attr_extendedCharSetEnabled foreach { x => attr = scala.xml.Attribute(null, "extendedCharSetEnabled", x.toString, attr) }
        case ("@intercharGapWidth", _) => __obj.attr_intercharGapWidth foreach { x => attr = scala.xml.Attribute(null, "intercharGapWidth", x.toString, attr) }
        case ("@wideFactor", _) => __obj.attr_wideFactor foreach { x => attr = scala.xml.Attribute(null, "wideFactor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.Code39, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](__obj.codeExpression, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("codeExpression"), __scope, false),
        __obj.patternExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("patternExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComponentsInterleaved2Of5Format extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.Interleaved2Of5] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.Interleaved2Of5] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "codeExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "patternExpression")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.components.Interleaved2Of5(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@evaluationTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationTime" -> _ },
        (node \ "@evaluationGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationGroup" -> _ },
        (node \ "@orientation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Orientation](x, scalaxb.ElemName(node) :: stack)) } map { "@orientation" -> _ },
        (node \ "@moduleWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@moduleWidth" -> _ },
        (node \ "@textPosition").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TextPosition](x, scalaxb.ElemName(node) :: stack)) } map { "@textPosition" -> _ },
        (node \ "@quietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@quietZone" -> _ },
        (node \ "@verticalQuietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@verticalQuietZone" -> _ },
        (node \ "@checksumMode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.ChecksumMode4j](x, scalaxb.ElemName(node) :: stack)) } map { "@checksumMode" -> _ },
        (node \ "@displayChecksum").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@displayChecksum" -> _ },
        (node \ "@wideFactor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@wideFactor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.Interleaved2Of5, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evaluationTime", _) => __obj.attr_evaluationTime foreach { x => attr = scala.xml.Attribute(null, "evaluationTime", x.toString, attr) }
        case ("@evaluationGroup", _) => __obj.attr_evaluationGroup foreach { x => attr = scala.xml.Attribute(null, "evaluationGroup", x.toString, attr) }
        case ("@orientation", _) => __obj.attr_orientation foreach { x => attr = scala.xml.Attribute(null, "orientation", x.toString, attr) }
        case ("@moduleWidth", _) => __obj.attr_moduleWidth foreach { x => attr = scala.xml.Attribute(null, "moduleWidth", x.toString, attr) }
        case ("@textPosition", _) => __obj.attr_textPosition foreach { x => attr = scala.xml.Attribute(null, "textPosition", x.toString, attr) }
        case ("@quietZone", _) => __obj.attr_quietZone foreach { x => attr = scala.xml.Attribute(null, "quietZone", x.toString, attr) }
        case ("@verticalQuietZone", _) => __obj.attr_verticalQuietZone foreach { x => attr = scala.xml.Attribute(null, "verticalQuietZone", x.toString, attr) }
        case ("@checksumMode", _) => __obj.attr_checksumMode foreach { x => attr = scala.xml.Attribute(null, "checksumMode", x.toString, attr) }
        case ("@displayChecksum", _) => __obj.attr_displayChecksum foreach { x => attr = scala.xml.Attribute(null, "displayChecksum", x.toString, attr) }
        case ("@wideFactor", _) => __obj.attr_wideFactor foreach { x => attr = scala.xml.Attribute(null, "wideFactor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.Interleaved2Of5, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](__obj.codeExpression, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("codeExpression"), __scope, false),
        __obj.patternExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("patternExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComponentsUPCAFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.UPCA] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.UPCA] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "codeExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "patternExpression")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.components.UPCA(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@evaluationTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationTime" -> _ },
        (node \ "@evaluationGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationGroup" -> _ },
        (node \ "@orientation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Orientation](x, scalaxb.ElemName(node) :: stack)) } map { "@orientation" -> _ },
        (node \ "@moduleWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@moduleWidth" -> _ },
        (node \ "@textPosition").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TextPosition](x, scalaxb.ElemName(node) :: stack)) } map { "@textPosition" -> _ },
        (node \ "@quietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@quietZone" -> _ },
        (node \ "@verticalQuietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@verticalQuietZone" -> _ },
        (node \ "@checksumMode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.ChecksumMode4j](x, scalaxb.ElemName(node) :: stack)) } map { "@checksumMode" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.UPCA, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evaluationTime", _) => __obj.attr_evaluationTime foreach { x => attr = scala.xml.Attribute(null, "evaluationTime", x.toString, attr) }
        case ("@evaluationGroup", _) => __obj.attr_evaluationGroup foreach { x => attr = scala.xml.Attribute(null, "evaluationGroup", x.toString, attr) }
        case ("@orientation", _) => __obj.attr_orientation foreach { x => attr = scala.xml.Attribute(null, "orientation", x.toString, attr) }
        case ("@moduleWidth", _) => __obj.attr_moduleWidth foreach { x => attr = scala.xml.Attribute(null, "moduleWidth", x.toString, attr) }
        case ("@textPosition", _) => __obj.attr_textPosition foreach { x => attr = scala.xml.Attribute(null, "textPosition", x.toString, attr) }
        case ("@quietZone", _) => __obj.attr_quietZone foreach { x => attr = scala.xml.Attribute(null, "quietZone", x.toString, attr) }
        case ("@verticalQuietZone", _) => __obj.attr_verticalQuietZone foreach { x => attr = scala.xml.Attribute(null, "verticalQuietZone", x.toString, attr) }
        case ("@checksumMode", _) => __obj.attr_checksumMode foreach { x => attr = scala.xml.Attribute(null, "checksumMode", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.UPCA, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](__obj.codeExpression, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("codeExpression"), __scope, false),
        __obj.patternExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("patternExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComponentsUPCEFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.UPCE] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.UPCE] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "codeExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "patternExpression")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.components.UPCE(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@evaluationTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationTime" -> _ },
        (node \ "@evaluationGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationGroup" -> _ },
        (node \ "@orientation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Orientation](x, scalaxb.ElemName(node) :: stack)) } map { "@orientation" -> _ },
        (node \ "@moduleWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@moduleWidth" -> _ },
        (node \ "@textPosition").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TextPosition](x, scalaxb.ElemName(node) :: stack)) } map { "@textPosition" -> _ },
        (node \ "@quietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@quietZone" -> _ },
        (node \ "@verticalQuietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@verticalQuietZone" -> _ },
        (node \ "@checksumMode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.ChecksumMode4j](x, scalaxb.ElemName(node) :: stack)) } map { "@checksumMode" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.UPCE, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evaluationTime", _) => __obj.attr_evaluationTime foreach { x => attr = scala.xml.Attribute(null, "evaluationTime", x.toString, attr) }
        case ("@evaluationGroup", _) => __obj.attr_evaluationGroup foreach { x => attr = scala.xml.Attribute(null, "evaluationGroup", x.toString, attr) }
        case ("@orientation", _) => __obj.attr_orientation foreach { x => attr = scala.xml.Attribute(null, "orientation", x.toString, attr) }
        case ("@moduleWidth", _) => __obj.attr_moduleWidth foreach { x => attr = scala.xml.Attribute(null, "moduleWidth", x.toString, attr) }
        case ("@textPosition", _) => __obj.attr_textPosition foreach { x => attr = scala.xml.Attribute(null, "textPosition", x.toString, attr) }
        case ("@quietZone", _) => __obj.attr_quietZone foreach { x => attr = scala.xml.Attribute(null, "quietZone", x.toString, attr) }
        case ("@verticalQuietZone", _) => __obj.attr_verticalQuietZone foreach { x => attr = scala.xml.Attribute(null, "verticalQuietZone", x.toString, attr) }
        case ("@checksumMode", _) => __obj.attr_checksumMode foreach { x => attr = scala.xml.Attribute(null, "checksumMode", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.UPCE, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](__obj.codeExpression, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("codeExpression"), __scope, false),
        __obj.patternExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("patternExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComponentsEAN13Format extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.EAN13] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.EAN13] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "codeExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "patternExpression")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.components.EAN13(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@evaluationTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationTime" -> _ },
        (node \ "@evaluationGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationGroup" -> _ },
        (node \ "@orientation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Orientation](x, scalaxb.ElemName(node) :: stack)) } map { "@orientation" -> _ },
        (node \ "@moduleWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@moduleWidth" -> _ },
        (node \ "@textPosition").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TextPosition](x, scalaxb.ElemName(node) :: stack)) } map { "@textPosition" -> _ },
        (node \ "@quietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@quietZone" -> _ },
        (node \ "@verticalQuietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@verticalQuietZone" -> _ },
        (node \ "@checksumMode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.ChecksumMode4j](x, scalaxb.ElemName(node) :: stack)) } map { "@checksumMode" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.EAN13, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evaluationTime", _) => __obj.attr_evaluationTime foreach { x => attr = scala.xml.Attribute(null, "evaluationTime", x.toString, attr) }
        case ("@evaluationGroup", _) => __obj.attr_evaluationGroup foreach { x => attr = scala.xml.Attribute(null, "evaluationGroup", x.toString, attr) }
        case ("@orientation", _) => __obj.attr_orientation foreach { x => attr = scala.xml.Attribute(null, "orientation", x.toString, attr) }
        case ("@moduleWidth", _) => __obj.attr_moduleWidth foreach { x => attr = scala.xml.Attribute(null, "moduleWidth", x.toString, attr) }
        case ("@textPosition", _) => __obj.attr_textPosition foreach { x => attr = scala.xml.Attribute(null, "textPosition", x.toString, attr) }
        case ("@quietZone", _) => __obj.attr_quietZone foreach { x => attr = scala.xml.Attribute(null, "quietZone", x.toString, attr) }
        case ("@verticalQuietZone", _) => __obj.attr_verticalQuietZone foreach { x => attr = scala.xml.Attribute(null, "verticalQuietZone", x.toString, attr) }
        case ("@checksumMode", _) => __obj.attr_checksumMode foreach { x => attr = scala.xml.Attribute(null, "checksumMode", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.EAN13, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](__obj.codeExpression, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("codeExpression"), __scope, false),
        __obj.patternExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("patternExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComponentsEAN8Format extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.EAN8] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.EAN8] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "codeExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "patternExpression")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.components.EAN8(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@evaluationTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationTime" -> _ },
        (node \ "@evaluationGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationGroup" -> _ },
        (node \ "@orientation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Orientation](x, scalaxb.ElemName(node) :: stack)) } map { "@orientation" -> _ },
        (node \ "@moduleWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@moduleWidth" -> _ },
        (node \ "@textPosition").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TextPosition](x, scalaxb.ElemName(node) :: stack)) } map { "@textPosition" -> _ },
        (node \ "@quietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@quietZone" -> _ },
        (node \ "@verticalQuietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@verticalQuietZone" -> _ },
        (node \ "@checksumMode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.ChecksumMode4j](x, scalaxb.ElemName(node) :: stack)) } map { "@checksumMode" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.EAN8, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evaluationTime", _) => __obj.attr_evaluationTime foreach { x => attr = scala.xml.Attribute(null, "evaluationTime", x.toString, attr) }
        case ("@evaluationGroup", _) => __obj.attr_evaluationGroup foreach { x => attr = scala.xml.Attribute(null, "evaluationGroup", x.toString, attr) }
        case ("@orientation", _) => __obj.attr_orientation foreach { x => attr = scala.xml.Attribute(null, "orientation", x.toString, attr) }
        case ("@moduleWidth", _) => __obj.attr_moduleWidth foreach { x => attr = scala.xml.Attribute(null, "moduleWidth", x.toString, attr) }
        case ("@textPosition", _) => __obj.attr_textPosition foreach { x => attr = scala.xml.Attribute(null, "textPosition", x.toString, attr) }
        case ("@quietZone", _) => __obj.attr_quietZone foreach { x => attr = scala.xml.Attribute(null, "quietZone", x.toString, attr) }
        case ("@verticalQuietZone", _) => __obj.attr_verticalQuietZone foreach { x => attr = scala.xml.Attribute(null, "verticalQuietZone", x.toString, attr) }
        case ("@checksumMode", _) => __obj.attr_checksumMode foreach { x => attr = scala.xml.Attribute(null, "checksumMode", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.EAN8, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](__obj.codeExpression, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("codeExpression"), __scope, false),
        __obj.patternExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("patternExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComponentsBarcode4JFourStateFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.Barcode4JFourState] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    override def typeName: Option[String] = Some("Barcode4JFourState")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.Barcode4JFourState] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "codeExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "patternExpression")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.components.Barcode4JFourState(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@evaluationTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationTime" -> _ },
        (node \ "@evaluationGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationGroup" -> _ },
        (node \ "@orientation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Orientation](x, scalaxb.ElemName(node) :: stack)) } map { "@orientation" -> _ },
        (node \ "@moduleWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@moduleWidth" -> _ },
        (node \ "@textPosition").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TextPosition](x, scalaxb.ElemName(node) :: stack)) } map { "@textPosition" -> _ },
        (node \ "@quietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@quietZone" -> _ },
        (node \ "@verticalQuietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@verticalQuietZone" -> _ },
        (node \ "@ascenderHeight").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@ascenderHeight" -> _ },
        (node \ "@checksumMode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.ChecksumMode4j](x, scalaxb.ElemName(node) :: stack)) } map { "@checksumMode" -> _ },
        (node \ "@intercharGapWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@intercharGapWidth" -> _ },
        (node \ "@trackHeight").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@trackHeight" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.Barcode4JFourState, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evaluationTime", _) => __obj.attr_evaluationTime foreach { x => attr = scala.xml.Attribute(null, "evaluationTime", x.toString, attr) }
        case ("@evaluationGroup", _) => __obj.attr_evaluationGroup foreach { x => attr = scala.xml.Attribute(null, "evaluationGroup", x.toString, attr) }
        case ("@orientation", _) => __obj.attr_orientation foreach { x => attr = scala.xml.Attribute(null, "orientation", x.toString, attr) }
        case ("@moduleWidth", _) => __obj.attr_moduleWidth foreach { x => attr = scala.xml.Attribute(null, "moduleWidth", x.toString, attr) }
        case ("@textPosition", _) => __obj.attr_textPosition foreach { x => attr = scala.xml.Attribute(null, "textPosition", x.toString, attr) }
        case ("@quietZone", _) => __obj.attr_quietZone foreach { x => attr = scala.xml.Attribute(null, "quietZone", x.toString, attr) }
        case ("@verticalQuietZone", _) => __obj.attr_verticalQuietZone foreach { x => attr = scala.xml.Attribute(null, "verticalQuietZone", x.toString, attr) }
        case ("@ascenderHeight", _) => __obj.attr_ascenderHeight foreach { x => attr = scala.xml.Attribute(null, "ascenderHeight", x.toString, attr) }
        case ("@checksumMode", _) => __obj.attr_checksumMode foreach { x => attr = scala.xml.Attribute(null, "checksumMode", x.toString, attr) }
        case ("@intercharGapWidth", _) => __obj.attr_intercharGapWidth foreach { x => attr = scala.xml.Attribute(null, "intercharGapWidth", x.toString, attr) }
        case ("@trackHeight", _) => __obj.attr_trackHeight foreach { x => attr = scala.xml.Attribute(null, "trackHeight", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.Barcode4JFourState, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](__obj.codeExpression, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("codeExpression"), __scope, false),
        __obj.patternExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("patternExpression"), __scope, false) } getOrElse {Nil})

  }

  def buildComponentsBaselinePositionFormat = new DefaultComponentsBaselinePositionFormat {}
  trait DefaultComponentsBaselinePositionFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.BaselinePosition] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.BaselinePosition] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.components.BaselinePosition.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.components.BaselinePosition.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.BaselinePosition, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComponentsPOSTNETFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.POSTNET] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.POSTNET] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "codeExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "patternExpression")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.components.POSTNET(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@evaluationTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationTime" -> _ },
        (node \ "@evaluationGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationGroup" -> _ },
        (node \ "@orientation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Orientation](x, scalaxb.ElemName(node) :: stack)) } map { "@orientation" -> _ },
        (node \ "@moduleWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@moduleWidth" -> _ },
        (node \ "@textPosition").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TextPosition](x, scalaxb.ElemName(node) :: stack)) } map { "@textPosition" -> _ },
        (node \ "@quietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@quietZone" -> _ },
        (node \ "@verticalQuietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@verticalQuietZone" -> _ },
        (node \ "@shortBarHeight").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@shortBarHeight" -> _ },
        (node \ "@baselinePosition").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.BaselinePosition](x, scalaxb.ElemName(node) :: stack)) } map { "@baselinePosition" -> _ },
        (node \ "@checksumMode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.ChecksumMode4j](x, scalaxb.ElemName(node) :: stack)) } map { "@checksumMode" -> _ },
        (node \ "@displayChecksum").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@displayChecksum" -> _ },
        (node \ "@intercharGapWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@intercharGapWidth" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.POSTNET, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evaluationTime", _) => __obj.attr_evaluationTime foreach { x => attr = scala.xml.Attribute(null, "evaluationTime", x.toString, attr) }
        case ("@evaluationGroup", _) => __obj.attr_evaluationGroup foreach { x => attr = scala.xml.Attribute(null, "evaluationGroup", x.toString, attr) }
        case ("@orientation", _) => __obj.attr_orientation foreach { x => attr = scala.xml.Attribute(null, "orientation", x.toString, attr) }
        case ("@moduleWidth", _) => __obj.attr_moduleWidth foreach { x => attr = scala.xml.Attribute(null, "moduleWidth", x.toString, attr) }
        case ("@textPosition", _) => __obj.attr_textPosition foreach { x => attr = scala.xml.Attribute(null, "textPosition", x.toString, attr) }
        case ("@quietZone", _) => __obj.attr_quietZone foreach { x => attr = scala.xml.Attribute(null, "quietZone", x.toString, attr) }
        case ("@verticalQuietZone", _) => __obj.attr_verticalQuietZone foreach { x => attr = scala.xml.Attribute(null, "verticalQuietZone", x.toString, attr) }
        case ("@shortBarHeight", _) => __obj.attr_shortBarHeight foreach { x => attr = scala.xml.Attribute(null, "shortBarHeight", x.toString, attr) }
        case ("@baselinePosition", _) => __obj.attr_baselinePosition foreach { x => attr = scala.xml.Attribute(null, "baselinePosition", x.toString, attr) }
        case ("@checksumMode", _) => __obj.attr_checksumMode foreach { x => attr = scala.xml.Attribute(null, "checksumMode", x.toString, attr) }
        case ("@displayChecksum", _) => __obj.attr_displayChecksum foreach { x => attr = scala.xml.Attribute(null, "displayChecksum", x.toString, attr) }
        case ("@intercharGapWidth", _) => __obj.attr_intercharGapWidth foreach { x => attr = scala.xml.Attribute(null, "intercharGapWidth", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.POSTNET, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](__obj.codeExpression, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("codeExpression"), __scope, false),
        __obj.patternExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("patternExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComponentsPDF417Format extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.PDF417] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.PDF417] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "codeExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "patternExpression")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.components.PDF417(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@evaluationTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationTime" -> _ },
        (node \ "@evaluationGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationGroup" -> _ },
        (node \ "@orientation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Orientation](x, scalaxb.ElemName(node) :: stack)) } map { "@orientation" -> _ },
        (node \ "@moduleWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@moduleWidth" -> _ },
        (node \ "@textPosition").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TextPosition](x, scalaxb.ElemName(node) :: stack)) } map { "@textPosition" -> _ },
        (node \ "@quietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@quietZone" -> _ },
        (node \ "@verticalQuietZone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@verticalQuietZone" -> _ },
        (node \ "@minColumns").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Long](x, scalaxb.ElemName(node) :: stack)) } map { "@minColumns" -> _ },
        (node \ "@maxColumns").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Long](x, scalaxb.ElemName(node) :: stack)) } map { "@maxColumns" -> _ },
        (node \ "@minRows").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Long](x, scalaxb.ElemName(node) :: stack)) } map { "@minRows" -> _ },
        (node \ "@maxRows").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Long](x, scalaxb.ElemName(node) :: stack)) } map { "@maxRows" -> _ },
        (node \ "@widthToHeightRatio").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@widthToHeightRatio" -> _ },
        (node \ "@errorCorrectionLevel").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Long](x, scalaxb.ElemName(node) :: stack)) } map { "@errorCorrectionLevel" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.PDF417, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evaluationTime", _) => __obj.attr_evaluationTime foreach { x => attr = scala.xml.Attribute(null, "evaluationTime", x.toString, attr) }
        case ("@evaluationGroup", _) => __obj.attr_evaluationGroup foreach { x => attr = scala.xml.Attribute(null, "evaluationGroup", x.toString, attr) }
        case ("@orientation", _) => __obj.attr_orientation foreach { x => attr = scala.xml.Attribute(null, "orientation", x.toString, attr) }
        case ("@moduleWidth", _) => __obj.attr_moduleWidth foreach { x => attr = scala.xml.Attribute(null, "moduleWidth", x.toString, attr) }
        case ("@textPosition", _) => __obj.attr_textPosition foreach { x => attr = scala.xml.Attribute(null, "textPosition", x.toString, attr) }
        case ("@quietZone", _) => __obj.attr_quietZone foreach { x => attr = scala.xml.Attribute(null, "quietZone", x.toString, attr) }
        case ("@verticalQuietZone", _) => __obj.attr_verticalQuietZone foreach { x => attr = scala.xml.Attribute(null, "verticalQuietZone", x.toString, attr) }
        case ("@minColumns", _) => __obj.attr_minColumns foreach { x => attr = scala.xml.Attribute(null, "minColumns", x.toString, attr) }
        case ("@maxColumns", _) => __obj.attr_maxColumns foreach { x => attr = scala.xml.Attribute(null, "maxColumns", x.toString, attr) }
        case ("@minRows", _) => __obj.attr_minRows foreach { x => attr = scala.xml.Attribute(null, "minRows", x.toString, attr) }
        case ("@maxRows", _) => __obj.attr_maxRows foreach { x => attr = scala.xml.Attribute(null, "maxRows", x.toString, attr) }
        case ("@widthToHeightRatio", _) => __obj.attr_widthToHeightRatio foreach { x => attr = scala.xml.Attribute(null, "widthToHeightRatio", x.toString, attr) }
        case ("@errorCorrectionLevel", _) => __obj.attr_errorCorrectionLevel foreach { x => attr = scala.xml.Attribute(null, "errorCorrectionLevel", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.PDF417, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](__obj.codeExpression, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("codeExpression"), __scope, false),
        __obj.patternExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.PatternExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("patternExpression"), __scope, false) } getOrElse {Nil})

  }

  def buildComponentsErrorCorrectionLevelFormat = new DefaultComponentsErrorCorrectionLevelFormat {}
  trait DefaultComponentsErrorCorrectionLevelFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.ErrorCorrectionLevel] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.ErrorCorrectionLevel] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.components.ErrorCorrectionLevel.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.components.ErrorCorrectionLevel.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.ErrorCorrectionLevel, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComponentsQRCodeFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.QRCode] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.QRCode] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "codeExpression")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.components.QRCode(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@evaluationTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationTime" -> _ },
        (node \ "@evaluationGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationGroup" -> _ },
        (node \ "@margin").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Long](x, scalaxb.ElemName(node) :: stack)) } map { "@margin" -> _ },
        (node \ "@errorCorrectionLevel").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.ErrorCorrectionLevel](x, scalaxb.ElemName(node) :: stack)) } map { "@errorCorrectionLevel" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.QRCode, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evaluationTime", _) => __obj.attr_evaluationTime foreach { x => attr = scala.xml.Attribute(null, "evaluationTime", x.toString, attr) }
        case ("@evaluationGroup", _) => __obj.attr_evaluationGroup foreach { x => attr = scala.xml.Attribute(null, "evaluationGroup", x.toString, attr) }
        case ("@margin", _) => __obj.attr_margin foreach { x => attr = scala.xml.Attribute(null, "margin", x.toString, attr) }
        case ("@errorCorrectionLevel", _) => __obj.attr_errorCorrectionLevel foreach { x => attr = scala.xml.Attribute(null, "errorCorrectionLevel", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.QRCode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.CodeExpression2](__obj.codeExpression, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("codeExpression"), __scope, false))

  }

  trait DefaultComponentsLatitudeExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.LatitudeExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.LatitudeExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.components.LatitudeExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.LatitudeExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultComponentsLongitudeExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.LongitudeExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.LongitudeExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.components.LongitudeExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.LongitudeExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultComponentsAddressExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.AddressExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.AddressExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.components.AddressExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.AddressExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultComponentsZoomExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.ZoomExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.ZoomExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.components.ZoomExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.ZoomExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultComponentsLanguageExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.LanguageExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.LanguageExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.components.LanguageExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.LanguageExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  def buildComponentsMapTypeTypeFormat = new DefaultComponentsMapTypeTypeFormat {}
  trait DefaultComponentsMapTypeTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.MapTypeType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.MapTypeType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.components.MapTypeType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.components.MapTypeType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.MapTypeType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildComponentsMapScaleFormat = new DefaultComponentsMapScaleFormat {}
  trait DefaultComponentsMapScaleFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.MapScale] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.MapScale] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.components.MapScale.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.components.MapScale.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.MapScale, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildComponentsImageTypeFormat = new DefaultComponentsImageTypeFormat {}
  trait DefaultComponentsImageTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.ImageType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.ImageType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.components.ImageType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.components.ImageType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.ImageType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildComponentsOnErrorTypeFormat = new DefaultComponentsOnErrorTypeFormat {}
  trait DefaultComponentsOnErrorTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.OnErrorType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.OnErrorType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.components.OnErrorType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.components.OnErrorType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.OnErrorType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComponentsMapTypeFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.MapType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.MapType] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "latitudeExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "longitudeExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "addressExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "zoomExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "languageExpression")) ~ 
      opt(((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "markerDataset")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.MarkerDataset](x, scalaxb.ElemName(node) :: stack)))) ||| 
      ((safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "markerData"))) ^^ 
        { case p1 => scalaxb.DataRecord(com.iofficecorp.jasperserver.pumped.report.components.MapTypeSequence1(p1 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.ItemData](_, scalaxb.ElemName(node) :: stack) }: _*)) })) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "pathStyle")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "pathData")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      com.iofficecorp.jasperserver.pumped.report.components.MapType(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.LatitudeExpression](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.LongitudeExpression](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.AddressExpression](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.ZoomExpression](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.LanguageExpression](_, scalaxb.ElemName(node) :: stack) },
        p6,
        p7 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.ItemData](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.ItemData](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@evaluationTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime](scala.xml.Text("Now"), scalaxb.ElemName(node) :: stack))) map { "@evaluationTime" -> _ },
        (node \ "@evaluationGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationGroup" -> _ },
        (node \ "@mapType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.MapTypeType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.MapTypeType](scala.xml.Text("roadmap"), scalaxb.ElemName(node) :: stack))) map { "@mapType" -> _ },
        (node \ "@mapScale").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.MapScale](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.MapScale](scala.xml.Text("1"), scalaxb.ElemName(node) :: stack))) map { "@mapScale" -> _ },
        (node \ "@imageType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.ImageType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.ImageType](scala.xml.Text("png"), scalaxb.ElemName(node) :: stack))) map { "@imageType" -> _ },
        (node \ "@onErrorType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.OnErrorType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.OnErrorType](scala.xml.Text("Error"), scalaxb.ElemName(node) :: stack))) map { "@onErrorType" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.MapType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evaluationTime", _) => if (__obj.attr_evaluationTime.toString != "Now") attr = scala.xml.Attribute(null, "evaluationTime", __obj.attr_evaluationTime.toString, attr)
        case ("@evaluationGroup", _) => __obj.attr_evaluationGroup foreach { x => attr = scala.xml.Attribute(null, "evaluationGroup", x.toString, attr) }
        case ("@mapType", _) => if (__obj.attr_mapType.toString != "roadmap") attr = scala.xml.Attribute(null, "mapType", __obj.attr_mapType.toString, attr)
        case ("@mapScale", _) => if (__obj.attr_mapScale.toString != "1") attr = scala.xml.Attribute(null, "mapScale", __obj.attr_mapScale.toString, attr)
        case ("@imageType", _) => if (__obj.attr_imageType.toString != "png") attr = scala.xml.Attribute(null, "imageType", __obj.attr_imageType.toString, attr)
        case ("@onErrorType", _) => if (__obj.attr_onErrorType.toString != "Error") attr = scala.xml.Attribute(null, "onErrorType", __obj.attr_onErrorType.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.MapType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.latitudeExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.LatitudeExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("latitudeExpression"), __scope, false) } getOrElse {Nil},
        __obj.longitudeExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.LongitudeExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("longitudeExpression"), __scope, false) } getOrElse {Nil},
        __obj.addressExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.AddressExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("addressExpression"), __scope, false) } getOrElse {Nil},
        __obj.zoomExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.ZoomExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("zoomExpression"), __scope, false) } getOrElse {Nil},
        __obj.languageExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.LanguageExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("languageExpression"), __scope, false) } getOrElse {Nil},
        __obj.maptypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.report.components.MapTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.pathStyle flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.ItemData](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("pathStyle"), __scope, false) },
        __obj.pathData flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.ItemData](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("pathData"), __scope, false) })

  }

  trait DefaultComponentsMapTypeSequence1Format extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.MapTypeSequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.MapTypeSequence1] = Left("don't call me.")
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.MapTypeSequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      __obj.markerData flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.ItemData](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("markerData"), __scope, false) }


  }

  trait DefaultComponentsItemDataFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.ItemData] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    override def typeName: Option[String] = Some("ItemData")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.ItemData] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "dataset")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "item")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.components.ItemData(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Dataset](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Item](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.ItemData, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataset map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Dataset](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("dataset"), __scope, false) } getOrElse {Nil},
        __obj.item flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.Item](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("item"), __scope, false) })

  }

  trait DefaultComponentsItemPropertyFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.ItemProperty] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    override def typeName: Option[String] = Some("ItemProperty")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.ItemProperty] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueExpression")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.components.ItemProperty(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.ItemProperty, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.attr_name.toString, attr)
        case ("@value", _) => __obj.attr_value foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.ItemProperty, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.valueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComponentsItemFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.Item] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.Item] =
      phrase(safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "itemProperty")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.components.Item(p1 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.ItemProperty](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.Item, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.itemProperty flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.ItemProperty](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("itemProperty"), __scope, false) })

  }

  trait DefaultComponentsMarkerDatasetFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.MarkerDataset] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.MarkerDataset] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "datasetRun")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "marker")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.components.MarkerDataset(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DatasetRun](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Marker](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.MarkerDataset, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.datasetRun map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DatasetRun](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("datasetRun"), __scope, false) } getOrElse {Nil},
        __obj.marker flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.Marker](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("marker"), __scope, false) })

  }

  trait DefaultComponentsMarkerFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.Marker] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.Marker] =
      phrase(safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "markerProperty")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.components.Marker(p1 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.ItemProperty](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.Marker, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.markerProperty flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.ItemProperty](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("markerProperty"), __scope, false) })

  }

  trait DefaultComponentsSortFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.Sort] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.Sort] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "symbol")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.components.Sort(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Symbol](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@evaluationTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime](scala.xml.Text("Now"), scalaxb.ElemName(node) :: stack))) map { "@evaluationTime" -> _ },
        (node \ "@evaluationGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationGroup" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.Sort, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evaluationTime", _) => if (__obj.attr_evaluationTime.toString != "Now") attr = scala.xml.Attribute(null, "evaluationTime", __obj.attr_evaluationTime.toString, attr)
        case ("@evaluationGroup", _) => __obj.attr_evaluationGroup foreach { x => attr = scala.xml.Attribute(null, "evaluationGroup", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.Sort, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.symbol map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.Symbol](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("symbol"), __scope, false) } getOrElse {Nil})

  }

  def buildComponentsSortFieldTypeFormat = new DefaultComponentsSortFieldTypeFormat {}
  trait DefaultComponentsSortFieldTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.SortFieldType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.SortFieldType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.components.SortFieldType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.components.SortFieldType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.SortFieldType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildComponentsHandlerVerticalAlignFormat = new DefaultComponentsHandlerVerticalAlignFormat {}
  trait DefaultComponentsHandlerVerticalAlignFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.HandlerVerticalAlign] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.HandlerVerticalAlign] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.components.HandlerVerticalAlign.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.components.HandlerVerticalAlign.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.HandlerVerticalAlign, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildComponentsHandlerHorizontalAlignFormat = new DefaultComponentsHandlerHorizontalAlignFormat {}
  trait DefaultComponentsHandlerHorizontalAlignFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.HandlerHorizontalAlign] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.HandlerHorizontalAlign] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.components.HandlerHorizontalAlign.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.components.HandlerHorizontalAlign.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.HandlerHorizontalAlign, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComponentsSymbolFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.Symbol] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.Symbol] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "font")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.components.Symbol(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Font](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@sortFieldName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@sortFieldName" -> _ },
        (node \ "@handlerColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@handlerColor" -> _ },
        (node \ "@sortFieldType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.SortFieldType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.SortFieldType](scala.xml.Text("Field"), scalaxb.ElemName(node) :: stack))) map { "@sortFieldType" -> _ },
        (node \ "@handlerVerticalAlign").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.HandlerVerticalAlign](x, scalaxb.ElemName(node) :: stack)) } map { "@handlerVerticalAlign" -> _ },
        (node \ "@handlerHorizontalAlign").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.HandlerHorizontalAlign](x, scalaxb.ElemName(node) :: stack)) } map { "@handlerHorizontalAlign" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.Symbol, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@sortFieldName", _) => __obj.attr_sortFieldName foreach { x => attr = scala.xml.Attribute(null, "sortFieldName", x.toString, attr) }
        case ("@handlerColor", _) => __obj.attr_handlerColor foreach { x => attr = scala.xml.Attribute(null, "handlerColor", x.toString, attr) }
        case ("@sortFieldType", _) => if (__obj.attr_sortFieldType.toString != "Field") attr = scala.xml.Attribute(null, "sortFieldType", __obj.attr_sortFieldType.toString, attr)
        case ("@handlerVerticalAlign", _) => __obj.attr_handlerVerticalAlign foreach { x => attr = scala.xml.Attribute(null, "handlerVerticalAlign", x.toString, attr) }
        case ("@handlerHorizontalAlign", _) => __obj.attr_handlerHorizontalAlign foreach { x => attr = scala.xml.Attribute(null, "handlerHorizontalAlign", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.Symbol, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.font map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Font](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("font"), __scope, false) } getOrElse {Nil})

  }

  def buildComponentsWhenNoDataTypeFormat = new DefaultComponentsWhenNoDataTypeFormat {}
  trait DefaultComponentsWhenNoDataTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.WhenNoDataType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.WhenNoDataType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.components.WhenNoDataType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.components.WhenNoDataType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.WhenNoDataType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComponentsTableFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.Table] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.Table] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "datasetRun")) ~ 
      safeRep(((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "columnGroup")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.ColumnGroup](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "column")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Column](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.components.Table(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DatasetRun](p1, scalaxb.ElemName(node) :: stack),
        p2,
        scala.collection.immutable.ListMap(List(
        (node \ "@whenNoDataType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.WhenNoDataType](x, scalaxb.ElemName(node) :: stack)) } map { "@whenNoDataType" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.Table, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@whenNoDataType", _) => __obj.attr_whenNoDataType foreach { x => attr = scala.xml.Attribute(null, "whenNoDataType", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.Table, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DatasetRun](__obj.datasetRun, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("datasetRun"), __scope, false),
        __obj.tableoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.report.components.TableOption]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultComponentsBaseColumnableFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.BaseColumnable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.BaseColumnable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          
          case _ => Right(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.BaseColumn](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.BaseColumnable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: com.iofficecorp.jasperserver.pumped.report.components.Column => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.Column](x, __namespace, __elementLabel, __scope, true)
      case x: com.iofficecorp.jasperserver.pumped.report.components.ColumnGroup => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.ColumnGroup](x, __namespace, __elementLabel, __scope, true)
      case x: com.iofficecorp.jasperserver.pumped.report.components.BaseColumn => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.BaseColumn](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultComponentsBaseColumnFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.BaseColumn] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    override def typeName: Option[String] = Some("BaseColumn")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.BaseColumn] =
      phrase(safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "property")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "propertyExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "printWhenExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "tableHeader")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "tableFooter")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "groupHeader")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "groupFooter")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "columnHeader")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "columnFooter")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      com.iofficecorp.jasperserver.pumped.report.components.BaseColumn(p1 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Property](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PropertyExpression](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PrintWhenExpression](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TableGroupCell](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TableGroupCell](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@uuid").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@uuid" -> _ },
        (node \ "@width").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Long](x, scalaxb.ElemName(node) :: stack)) } map { "@width" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.BaseColumn, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@uuid", _) => __obj.attr_uuid foreach { x => attr = scala.xml.Attribute(null, "uuid", x.toString, attr) }
        case ("@width", _) => attr = scala.xml.Attribute(null, "width", __obj.attr_width.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.BaseColumn, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.property flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Property](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("property"), __scope, false) },
        __obj.propertyExpression flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.PropertyExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("propertyExpression"), __scope, false) },
        __obj.printWhenExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.PrintWhenExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("printWhenExpression"), __scope, false) } getOrElse {Nil},
        __obj.tableHeader map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("tableHeader"), __scope, false) } getOrElse {Nil},
        __obj.tableFooter map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("tableFooter"), __scope, false) } getOrElse {Nil},
        __obj.groupHeader flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.TableGroupCell](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("groupHeader"), __scope, false) },
        __obj.groupFooter flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.TableGroupCell](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("groupFooter"), __scope, false) },
        __obj.columnHeader map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("columnHeader"), __scope, false) } getOrElse {Nil},
        __obj.columnFooter map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("columnFooter"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComponentsColumnGroupFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.ColumnGroup] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.ColumnGroup] =
      phrase(safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "property")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "propertyExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "printWhenExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "tableHeader")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "tableFooter")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "groupHeader")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "groupFooter")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "columnHeader")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "columnFooter")) ~ 
      safeRep(((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "columnGroup")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.ColumnGroup](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "column")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Column](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      com.iofficecorp.jasperserver.pumped.report.components.ColumnGroup(p1 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Property](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PropertyExpression](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PrintWhenExpression](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TableGroupCell](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TableGroupCell](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](_, scalaxb.ElemName(node) :: stack) },
        p10,
        scala.collection.immutable.ListMap(List(
        (node \ "@uuid").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@uuid" -> _ },
        (node \ "@width").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Long](x, scalaxb.ElemName(node) :: stack)) } map { "@width" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.ColumnGroup, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@uuid", _) => __obj.attr_uuid foreach { x => attr = scala.xml.Attribute(null, "uuid", x.toString, attr) }
        case ("@width", _) => attr = scala.xml.Attribute(null, "width", __obj.attr_width.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.ColumnGroup, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.property flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Property](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("property"), __scope, false) },
        __obj.propertyExpression flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.PropertyExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("propertyExpression"), __scope, false) },
        __obj.printWhenExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.PrintWhenExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("printWhenExpression"), __scope, false) } getOrElse {Nil},
        __obj.tableHeader map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("tableHeader"), __scope, false) } getOrElse {Nil},
        __obj.tableFooter map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("tableFooter"), __scope, false) } getOrElse {Nil},
        __obj.groupHeader flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.TableGroupCell](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("groupHeader"), __scope, false) },
        __obj.groupFooter flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.TableGroupCell](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("groupFooter"), __scope, false) },
        __obj.columnHeader map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("columnHeader"), __scope, false) } getOrElse {Nil},
        __obj.columnFooter map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("columnFooter"), __scope, false) } getOrElse {Nil},
        __obj.columngroupoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.report.components.ColumnGroupOption]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultComponentsColumnFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.Column] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.Column] =
      phrase(safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "property")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "propertyExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "printWhenExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "tableHeader")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "tableFooter")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "groupHeader")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "groupFooter")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "columnHeader")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "columnFooter")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "detailCell")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      com.iofficecorp.jasperserver.pumped.report.components.Column(p1 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Property](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PropertyExpression](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PrintWhenExpression](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TableGroupCell](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TableGroupCell](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](p10, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@uuid").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@uuid" -> _ },
        (node \ "@width").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Long](x, scalaxb.ElemName(node) :: stack)) } map { "@width" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.Column, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@uuid", _) => __obj.attr_uuid foreach { x => attr = scala.xml.Attribute(null, "uuid", x.toString, attr) }
        case ("@width", _) => attr = scala.xml.Attribute(null, "width", __obj.attr_width.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.Column, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.property flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Property](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("property"), __scope, false) },
        __obj.propertyExpression flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.PropertyExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("propertyExpression"), __scope, false) },
        __obj.printWhenExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.PrintWhenExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("printWhenExpression"), __scope, false) } getOrElse {Nil},
        __obj.tableHeader map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("tableHeader"), __scope, false) } getOrElse {Nil},
        __obj.tableFooter map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("tableFooter"), __scope, false) } getOrElse {Nil},
        __obj.groupHeader flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.TableGroupCell](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("groupHeader"), __scope, false) },
        __obj.groupFooter flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.TableGroupCell](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("groupFooter"), __scope, false) },
        __obj.columnHeader map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("columnHeader"), __scope, false) } getOrElse {Nil},
        __obj.columnFooter map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("columnFooter"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](__obj.detailCell, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("detailCell"), __scope, false))

  }

  trait DefaultComponentsTableGroupCellFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.TableGroupCell] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    override def typeName: Option[String] = Some("TableGroupCell")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.TableGroupCell] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "cell")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.components.TableGroupCell(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@groupName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@groupName" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.TableGroupCell, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@groupName", _) => attr = scala.xml.Attribute(null, "groupName", __obj.attr_groupName.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.TableGroupCell, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.TableCell](__obj.cell, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("cell"), __scope, false))

  }

  trait DefaultComponentsTableCellFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.TableCell] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    override def typeName: Option[String] = Some("TableCell")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.TableCell] =
      phrase(safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "property")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "box")) ~ 
      safeRep(((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "break")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Break](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "line")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Line](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "rectangle")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Rectangle](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "ellipse")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Ellipse](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "image")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Image](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "staticText")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StaticText](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "textField")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TextField](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "subreport")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Subreport](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "pieChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PieChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "pie3DChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Pie3DChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "barChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BarChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "bar3DChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Bar3DChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xyBarChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XyBarChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "stackedBarChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StackedBarChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "stackedBar3DChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StackedBar3DChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "lineChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LineChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xyLineChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XyLineChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "areaChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.AreaChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xyAreaChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XyAreaChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "scatterChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ScatterChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "bubbleChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BubbleChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "timeSeriesChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TimeSeriesChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "highLowChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HighLowChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "candlestickChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CandlestickChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "meterChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.MeterChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "thermometerChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ThermometerChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "multiAxisChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.MultiAxisChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "stackedAreaChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StackedAreaChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "ganttChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.GanttChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "elementGroup")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ElementGroup](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "crosstab")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Crosstab](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "frame")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Frame](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "componentElement")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ComponentElement](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "genericElement")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.GenericElement](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.components.TableCell(p1 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Property](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Box](_, scalaxb.ElemName(node) :: stack) },
        p3,
        scala.collection.immutable.ListMap(List(
        (node \ "@style").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@style" -> _ },
        (node \ "@height").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Long](x, scalaxb.ElemName(node) :: stack)) } map { "@height" -> _ },
        (node \ "@rowSpan").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Long](x, scalaxb.ElemName(node) :: stack)) } map { "@rowSpan" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.TableCell, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@style", _) => __obj.attr_style foreach { x => attr = scala.xml.Attribute(null, "style", x.toString, attr) }
        case ("@height", _) => attr = scala.xml.Attribute(null, "height", __obj.attr_height.toString, attr)
        case ("@rowSpan", _) => __obj.attr_rowSpan foreach { x => attr = scala.xml.Attribute(null, "rowSpan", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.TableCell, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.property flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Property](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("property"), __scope, false) },
        __obj.box map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Box](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("box"), __scope, false) } getOrElse {Nil},
        __obj.tablecelloption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultComponentsSpiderChartFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.SpiderChart] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.SpiderChart] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "chartSettings")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "spiderDataset")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "spiderPlot")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.components.SpiderChart(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.ChartSettings](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.SpiderDataset](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.SpiderPlot](p3, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@evaluationTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime](scala.xml.Text("Now"), scalaxb.ElemName(node) :: stack))) map { "@evaluationTime" -> _ },
        (node \ "@evaluationGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationGroup" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.SpiderChart, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evaluationTime", _) => if (__obj.attr_evaluationTime.toString != "Now") attr = scala.xml.Attribute(null, "evaluationTime", __obj.attr_evaluationTime.toString, attr)
        case ("@evaluationGroup", _) => __obj.attr_evaluationGroup foreach { x => attr = scala.xml.Attribute(null, "evaluationGroup", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.SpiderChart, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.ChartSettings](__obj.chartSettings, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("chartSettings"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.SpiderDataset](__obj.spiderDataset, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("spiderDataset"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.SpiderPlot](__obj.spiderPlot, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("spiderPlot"), __scope, false))

  }

  def buildComponentsIsShowLegendFormat = new DefaultComponentsIsShowLegendFormat {}
  trait DefaultComponentsIsShowLegendFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.IsShowLegend] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.IsShowLegend] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.components.IsShowLegend.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.components.IsShowLegend.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.IsShowLegend, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComponentsChartSettingsFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.ChartSettings] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.ChartSettings] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chartTitle")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chartSubtitle")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chartLegend")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "anchorNameExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkReferenceExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkWhenExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkAnchorExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkPageExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkTooltipExpression")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkParameter")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      com.iofficecorp.jasperserver.pumped.report.components.ChartSettings(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ChartTitle](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ChartSubtitle](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ChartLegend](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.AnchorNameExpression](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkReferenceExpression](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkWhenExpression](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkAnchorExpression](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkPageExpression](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkTooltipExpression](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkParameter](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@isShowLegend").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.IsShowLegend](x, scalaxb.ElemName(node) :: stack)) } map { "@isShowLegend" -> _ },
        (node \ "@backcolor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@backcolor" -> _ },
        (node \ "@hyperlinkType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@hyperlinkType" -> _ },
        (node \ "@hyperlinkTarget").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@hyperlinkTarget" -> _ },
        (node \ "@bookmarkLevel").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("0"), scalaxb.ElemName(node) :: stack))) map { "@bookmarkLevel" -> _ },
        (node \ "@customizerClass").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@customizerClass" -> _ },
        (node \ "@renderType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@renderType" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.ChartSettings, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@isShowLegend", _) => __obj.attr_isShowLegend foreach { x => attr = scala.xml.Attribute(null, "isShowLegend", x.toString, attr) }
        case ("@backcolor", _) => __obj.attr_backcolor foreach { x => attr = scala.xml.Attribute(null, "backcolor", x.toString, attr) }
        case ("@hyperlinkType", _) => __obj.attr_hyperlinkType foreach { x => attr = scala.xml.Attribute(null, "hyperlinkType", x.toString, attr) }
        case ("@hyperlinkTarget", _) => __obj.attr_hyperlinkTarget foreach { x => attr = scala.xml.Attribute(null, "hyperlinkTarget", x.toString, attr) }
        case ("@bookmarkLevel", _) => if (__obj.attr_bookmarkLevel.toString != "0") attr = scala.xml.Attribute(null, "bookmarkLevel", __obj.attr_bookmarkLevel.toString, attr)
        case ("@customizerClass", _) => __obj.attr_customizerClass foreach { x => attr = scala.xml.Attribute(null, "customizerClass", x.toString, attr) }
        case ("@renderType", _) => __obj.attr_renderType foreach { x => attr = scala.xml.Attribute(null, "renderType", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.ChartSettings, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.chartTitle map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ChartTitle](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chartTitle"), __scope, false) } getOrElse {Nil},
        __obj.chartSubtitle map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ChartSubtitle](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chartSubtitle"), __scope, false) } getOrElse {Nil},
        __obj.chartLegend map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ChartLegend](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chartLegend"), __scope, false) } getOrElse {Nil},
        __obj.anchorNameExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.AnchorNameExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("anchorNameExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkReferenceExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkReferenceExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkReferenceExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkWhenExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkWhenExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkWhenExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkAnchorExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkAnchorExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkAnchorExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkPageExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkPageExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkPageExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkTooltipExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkTooltipExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkTooltipExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkParameter flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkParameter](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkParameter"), __scope, false) })

  }

  def buildComponentsRotationTypeFormat = new DefaultComponentsRotationTypeFormat {}
  trait DefaultComponentsRotationTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.RotationType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.RotationType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.components.RotationType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.components.RotationType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.RotationType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildComponentsTableOrderFormat = new DefaultComponentsTableOrderFormat {}
  trait DefaultComponentsTableOrderFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.TableOrder] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.TableOrder] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.components.TableOrder.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.components.TableOrder.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.TableOrder, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildComponentsIsWebFilledFormat = new DefaultComponentsIsWebFilledFormat {}
  trait DefaultComponentsIsWebFilledFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.IsWebFilled] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.IsWebFilled] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.components.IsWebFilled.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.components.IsWebFilled.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.IsWebFilled, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComponentsMaxValueExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.MaxValueExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.MaxValueExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.components.MaxValueExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.MaxValueExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultComponentsSpiderPlotFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.SpiderPlot] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.SpiderPlot] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "labelFont")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "maxValueExpression")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.components.SpiderPlot(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LabelFont](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.MaxValueExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@rotation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.RotationType](x, scalaxb.ElemName(node) :: stack)) } map { "@rotation" -> _ },
        (node \ "@tableOrder").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.TableOrder](x, scalaxb.ElemName(node) :: stack)) } map { "@tableOrder" -> _ },
        (node \ "@isWebFilled").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.IsWebFilled](x, scalaxb.ElemName(node) :: stack)) } map { "@isWebFilled" -> _ },
        (node \ "@startAngle").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@startAngle" -> _ },
        (node \ "@headPercent").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@headPercent" -> _ },
        (node \ "@interiorGap").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@interiorGap" -> _ },
        (node \ "@axisLineColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@axisLineColor" -> _ },
        (node \ "@axisLineWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@axisLineWidth" -> _ },
        (node \ "@labelGap").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@labelGap" -> _ },
        (node \ "@labelColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@labelColor" -> _ },
        (node \ "@backcolor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@backcolor" -> _ },
        (node \ "@backgroundAlpha").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@backgroundAlpha" -> _ },
        (node \ "@foregroundAlpha").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@foregroundAlpha" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.SpiderPlot, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@rotation", _) => __obj.attr_rotation foreach { x => attr = scala.xml.Attribute(null, "rotation", x.toString, attr) }
        case ("@tableOrder", _) => __obj.attr_tableOrder foreach { x => attr = scala.xml.Attribute(null, "tableOrder", x.toString, attr) }
        case ("@isWebFilled", _) => __obj.attr_isWebFilled foreach { x => attr = scala.xml.Attribute(null, "isWebFilled", x.toString, attr) }
        case ("@startAngle", _) => __obj.attr_startAngle foreach { x => attr = scala.xml.Attribute(null, "startAngle", x.toString, attr) }
        case ("@headPercent", _) => __obj.attr_headPercent foreach { x => attr = scala.xml.Attribute(null, "headPercent", x.toString, attr) }
        case ("@interiorGap", _) => __obj.attr_interiorGap foreach { x => attr = scala.xml.Attribute(null, "interiorGap", x.toString, attr) }
        case ("@axisLineColor", _) => __obj.attr_axisLineColor foreach { x => attr = scala.xml.Attribute(null, "axisLineColor", x.toString, attr) }
        case ("@axisLineWidth", _) => __obj.attr_axisLineWidth foreach { x => attr = scala.xml.Attribute(null, "axisLineWidth", x.toString, attr) }
        case ("@labelGap", _) => __obj.attr_labelGap foreach { x => attr = scala.xml.Attribute(null, "labelGap", x.toString, attr) }
        case ("@labelColor", _) => __obj.attr_labelColor foreach { x => attr = scala.xml.Attribute(null, "labelColor", x.toString, attr) }
        case ("@backcolor", _) => __obj.attr_backcolor foreach { x => attr = scala.xml.Attribute(null, "backcolor", x.toString, attr) }
        case ("@backgroundAlpha", _) => __obj.attr_backgroundAlpha foreach { x => attr = scala.xml.Attribute(null, "backgroundAlpha", x.toString, attr) }
        case ("@foregroundAlpha", _) => __obj.attr_foregroundAlpha foreach { x => attr = scala.xml.Attribute(null, "foregroundAlpha", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.SpiderPlot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.labelFont map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.LabelFont](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("labelFont"), __scope, false) } getOrElse {Nil},
        __obj.maxValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.MaxValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("maxValueExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComponentsSpiderDatasetFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.SpiderDataset] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.SpiderDataset] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "dataset")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "categorySeries")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.components.SpiderDataset(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Dataset](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CategorySeries](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.SpiderDataset, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataset map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Dataset](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("dataset"), __scope, false) } getOrElse {Nil},
        __obj.categorySeries flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CategorySeries](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("categorySeries"), __scope, false) })

  }

  def buildComponentsIconPositionFormat = new DefaultComponentsIconPositionFormat {}
  trait DefaultComponentsIconPositionFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.IconPosition] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.IconPosition] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.components.IconPosition.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.components.IconPosition.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.IconPosition, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildComponentsLabelFillFormat = new DefaultComponentsLabelFillFormat {}
  trait DefaultComponentsLabelFillFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.LabelFill] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.LabelFill] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.components.LabelFill.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.components.LabelFill.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.LabelFill, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildComponentsHorizontalAlignmentFormat = new DefaultComponentsHorizontalAlignmentFormat {}
  trait DefaultComponentsHorizontalAlignmentFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.HorizontalAlignment] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.HorizontalAlignment] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.components.HorizontalAlignment.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.components.HorizontalAlignment.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.HorizontalAlignment, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildComponentsVerticalAlignmentFormat = new DefaultComponentsVerticalAlignmentFormat {}
  trait DefaultComponentsVerticalAlignmentFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.components.VerticalAlignment] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.components.VerticalAlignment] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.components.VerticalAlignment.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.components.VerticalAlignment.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.components.VerticalAlignment, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComponentsIconLabelFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.IconLabel] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.IconLabel] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "box")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "label")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "icon")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.components.IconLabel(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Box](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Label](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Icon](p3, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@iconPosition").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.IconPosition](x, scalaxb.ElemName(node) :: stack)) } map { "@iconPosition" -> _ },
        (node \ "@labelFill").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.LabelFill](x, scalaxb.ElemName(node) :: stack)) } map { "@labelFill" -> _ },
        (node \ "@horizontalAlignment").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.HorizontalAlignment](x, scalaxb.ElemName(node) :: stack)) } map { "@horizontalAlignment" -> _ },
        (node \ "@verticalAlignment").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.VerticalAlignment](x, scalaxb.ElemName(node) :: stack)) } map { "@verticalAlignment" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.components.IconLabel, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@iconPosition", _) => __obj.attr_iconPosition foreach { x => attr = scala.xml.Attribute(null, "iconPosition", x.toString, attr) }
        case ("@labelFill", _) => __obj.attr_labelFill foreach { x => attr = scala.xml.Attribute(null, "labelFill", x.toString, attr) }
        case ("@horizontalAlignment", _) => __obj.attr_horizontalAlignment foreach { x => attr = scala.xml.Attribute(null, "horizontalAlignment", x.toString, attr) }
        case ("@verticalAlignment", _) => __obj.attr_verticalAlignment foreach { x => attr = scala.xml.Attribute(null, "verticalAlignment", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.IconLabel, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.box map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Box](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("box"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.Label](__obj.label, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("label"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.Icon](__obj.icon, Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("icon"), __scope, false))

  }

  trait DefaultComponentsLabelFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.Label] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.Label] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "textField")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.components.Label(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TextField](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.Label, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.TextField](__obj.textField, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("textField"), __scope, false))

  }

  trait DefaultComponentsIconFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.components.Icon] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports/components")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.components.Icon] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "textField")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.components.Icon(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TextField](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.components.Icon, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.TextField](__obj.textField, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("textField"), __scope, false))

  }

  def buildReportPrintOrderFormat = new DefaultReportPrintOrderFormat {}
  trait DefaultReportPrintOrderFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.PrintOrder] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.PrintOrder] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.PrintOrder.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.PrintOrder.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.PrintOrder, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportColumnDirectionFormat = new DefaultReportColumnDirectionFormat {}
  trait DefaultReportColumnDirectionFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ColumnDirection] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.ColumnDirection] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.ColumnDirection.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.ColumnDirection.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.ColumnDirection, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportOrientationFormat = new DefaultReportOrientationFormat {}
  trait DefaultReportOrientationFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Orientation] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.Orientation] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.Orientation.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.Orientation.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.Orientation, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportWhenNoDataTypeFormat = new DefaultReportWhenNoDataTypeFormat {}
  trait DefaultReportWhenNoDataTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.WhenNoDataType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.WhenNoDataType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.WhenNoDataType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.WhenNoDataType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.WhenNoDataType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportSectionTypeFormat = new DefaultReportSectionTypeFormat {}
  trait DefaultReportSectionTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.SectionType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.SectionType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.SectionType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.SectionType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.SectionType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsTitleNewPageFormat = new DefaultReportIsTitleNewPageFormat {}
  trait DefaultReportIsTitleNewPageFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsTitleNewPage] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsTitleNewPage] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsTitleNewPage.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsTitleNewPage.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsTitleNewPage, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsSummaryNewPageFormat = new DefaultReportIsSummaryNewPageFormat {}
  trait DefaultReportIsSummaryNewPageFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsSummaryNewPage] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsSummaryNewPage] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsSummaryNewPage.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsSummaryNewPage.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsSummaryNewPage, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsSummaryWithPageHeaderAndFooterFormat = new DefaultReportIsSummaryWithPageHeaderAndFooterFormat {}
  trait DefaultReportIsSummaryWithPageHeaderAndFooterFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsSummaryWithPageHeaderAndFooter] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsSummaryWithPageHeaderAndFooter] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsSummaryWithPageHeaderAndFooter.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsSummaryWithPageHeaderAndFooter.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsSummaryWithPageHeaderAndFooter, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsFloatColumnFooterFormat = new DefaultReportIsFloatColumnFooterFormat {}
  trait DefaultReportIsFloatColumnFooterFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsFloatColumnFooter] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsFloatColumnFooter] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsFloatColumnFooter.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsFloatColumnFooter.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsFloatColumnFooter, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportWhenResourceMissingTypeFormat = new DefaultReportWhenResourceMissingTypeFormat {}
  trait DefaultReportWhenResourceMissingTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.WhenResourceMissingType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.WhenResourceMissingType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.WhenResourceMissingType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.WhenResourceMissingType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.WhenResourceMissingType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsIgnorePaginationFormat = new DefaultReportIsIgnorePaginationFormat {}
  trait DefaultReportIsIgnorePaginationFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsIgnorePagination] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsIgnorePagination] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsIgnorePagination.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsIgnorePagination.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsIgnorePagination, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportJasperReportFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.JasperReport] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.JasperReport] =
      phrase(safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "property")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "import")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "template")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "reportFont")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "style")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "subDataset")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "scriptlet")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "parameter")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "queryString")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "field")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "sortField")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "variable")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "filterExpression")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "group")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "background")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "title")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "pageHeader")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "columnHeader")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "detail")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "columnFooter")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "pageFooter")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "lastPageFooter")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "summary")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "noData")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 =>
      com.iofficecorp.jasperserver.pumped.report.JasperReport(p1 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Property](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Import](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Template](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ReportFont](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Style](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.SubDataset](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Scriptlet](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Parameter](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.QueryString](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Field](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.SortField](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Variable](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.FilterExpression](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Group](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Background](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Title](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PageHeader](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ColumnHeader](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Detail](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ColumnFooter](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PageFooter](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LastPageFooter](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Summary](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.NoData](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@language").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("java"), scalaxb.ElemName(node) :: stack))) map { "@language" -> _ },
        (node \ "@columnCount").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("1"), scalaxb.ElemName(node) :: stack))) map { "@columnCount" -> _ },
        (node \ "@printOrder").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PrintOrder](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PrintOrder](scala.xml.Text("Vertical"), scalaxb.ElemName(node) :: stack))) map { "@printOrder" -> _ },
        (node \ "@columnDirection").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ColumnDirection](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ColumnDirection](scala.xml.Text("LTR"), scalaxb.ElemName(node) :: stack))) map { "@columnDirection" -> _ },
        (node \ "@pageWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("595"), scalaxb.ElemName(node) :: stack))) map { "@pageWidth" -> _ },
        (node \ "@pageHeight").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("842"), scalaxb.ElemName(node) :: stack))) map { "@pageHeight" -> _ },
        (node \ "@orientation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Orientation](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Orientation](scala.xml.Text("Portrait"), scalaxb.ElemName(node) :: stack))) map { "@orientation" -> _ },
        (node \ "@whenNoDataType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.WhenNoDataType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.WhenNoDataType](scala.xml.Text("NoPages"), scalaxb.ElemName(node) :: stack))) map { "@whenNoDataType" -> _ },
        (node \ "@sectionType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.SectionType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.SectionType](scala.xml.Text("Band"), scalaxb.ElemName(node) :: stack))) map { "@sectionType" -> _ },
        (node \ "@columnWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("555"), scalaxb.ElemName(node) :: stack))) map { "@columnWidth" -> _ },
        (node \ "@columnSpacing").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("0"), scalaxb.ElemName(node) :: stack))) map { "@columnSpacing" -> _ },
        (node \ "@leftMargin").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("20"), scalaxb.ElemName(node) :: stack))) map { "@leftMargin" -> _ },
        (node \ "@rightMargin").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("20"), scalaxb.ElemName(node) :: stack))) map { "@rightMargin" -> _ },
        (node \ "@topMargin").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("30"), scalaxb.ElemName(node) :: stack))) map { "@topMargin" -> _ },
        (node \ "@bottomMargin").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("30"), scalaxb.ElemName(node) :: stack))) map { "@bottomMargin" -> _ },
        (node \ "@isTitleNewPage").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsTitleNewPage](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsTitleNewPage](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@isTitleNewPage" -> _ },
        (node \ "@isSummaryNewPage").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsSummaryNewPage](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsSummaryNewPage](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@isSummaryNewPage" -> _ },
        (node \ "@isSummaryWithPageHeaderAndFooter").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsSummaryWithPageHeaderAndFooter](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsSummaryWithPageHeaderAndFooter](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@isSummaryWithPageHeaderAndFooter" -> _ },
        (node \ "@isFloatColumnFooter").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsFloatColumnFooter](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsFloatColumnFooter](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@isFloatColumnFooter" -> _ },
        (node \ "@scriptletClass").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@scriptletClass" -> _ },
        (node \ "@resourceBundle").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@resourceBundle" -> _ },
        (node \ "@whenResourceMissingType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.WhenResourceMissingType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.WhenResourceMissingType](scala.xml.Text("Null"), scalaxb.ElemName(node) :: stack))) map { "@whenResourceMissingType" -> _ },
        (node \ "@isIgnorePagination").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsIgnorePagination](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsIgnorePagination](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@isIgnorePagination" -> _ },
        (node \ "@formatFactoryClass").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@formatFactoryClass" -> _ },
        (node \ "@uuid").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@uuid" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.JasperReport, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.attr_name.toString, attr)
        case ("@language", _) => if (__obj.attr_language.toString != "java") attr = scala.xml.Attribute(null, "language", __obj.attr_language.toString, attr)
        case ("@columnCount", _) => if (__obj.attr_columnCount.toString != "1") attr = scala.xml.Attribute(null, "columnCount", __obj.attr_columnCount.toString, attr)
        case ("@printOrder", _) => if (__obj.attr_printOrder.toString != "Vertical") attr = scala.xml.Attribute(null, "printOrder", __obj.attr_printOrder.toString, attr)
        case ("@columnDirection", _) => if (__obj.attr_columnDirection.toString != "LTR") attr = scala.xml.Attribute(null, "columnDirection", __obj.attr_columnDirection.toString, attr)
        case ("@pageWidth", _) => if (__obj.attr_pageWidth.toString != "595") attr = scala.xml.Attribute(null, "pageWidth", __obj.attr_pageWidth.toString, attr)
        case ("@pageHeight", _) => if (__obj.attr_pageHeight.toString != "842") attr = scala.xml.Attribute(null, "pageHeight", __obj.attr_pageHeight.toString, attr)
        case ("@orientation", _) => if (__obj.attr_orientation.toString != "Portrait") attr = scala.xml.Attribute(null, "orientation", __obj.attr_orientation.toString, attr)
        case ("@whenNoDataType", _) => if (__obj.attr_whenNoDataType.toString != "NoPages") attr = scala.xml.Attribute(null, "whenNoDataType", __obj.attr_whenNoDataType.toString, attr)
        case ("@sectionType", _) => if (__obj.attr_sectionType.toString != "Band") attr = scala.xml.Attribute(null, "sectionType", __obj.attr_sectionType.toString, attr)
        case ("@columnWidth", _) => if (__obj.attr_columnWidth.toString != "555") attr = scala.xml.Attribute(null, "columnWidth", __obj.attr_columnWidth.toString, attr)
        case ("@columnSpacing", _) => if (__obj.attr_columnSpacing.toString != "0") attr = scala.xml.Attribute(null, "columnSpacing", __obj.attr_columnSpacing.toString, attr)
        case ("@leftMargin", _) => if (__obj.attr_leftMargin.toString != "20") attr = scala.xml.Attribute(null, "leftMargin", __obj.attr_leftMargin.toString, attr)
        case ("@rightMargin", _) => if (__obj.attr_rightMargin.toString != "20") attr = scala.xml.Attribute(null, "rightMargin", __obj.attr_rightMargin.toString, attr)
        case ("@topMargin", _) => if (__obj.attr_topMargin.toString != "30") attr = scala.xml.Attribute(null, "topMargin", __obj.attr_topMargin.toString, attr)
        case ("@bottomMargin", _) => if (__obj.attr_bottomMargin.toString != "30") attr = scala.xml.Attribute(null, "bottomMargin", __obj.attr_bottomMargin.toString, attr)
        case ("@isTitleNewPage", _) => if (__obj.attr_isTitleNewPage.toString != "false") attr = scala.xml.Attribute(null, "isTitleNewPage", __obj.attr_isTitleNewPage.toString, attr)
        case ("@isSummaryNewPage", _) => if (__obj.attr_isSummaryNewPage.toString != "false") attr = scala.xml.Attribute(null, "isSummaryNewPage", __obj.attr_isSummaryNewPage.toString, attr)
        case ("@isSummaryWithPageHeaderAndFooter", _) => if (__obj.attr_isSummaryWithPageHeaderAndFooter.toString != "false") attr = scala.xml.Attribute(null, "isSummaryWithPageHeaderAndFooter", __obj.attr_isSummaryWithPageHeaderAndFooter.toString, attr)
        case ("@isFloatColumnFooter", _) => if (__obj.attr_isFloatColumnFooter.toString != "false") attr = scala.xml.Attribute(null, "isFloatColumnFooter", __obj.attr_isFloatColumnFooter.toString, attr)
        case ("@scriptletClass", _) => __obj.attr_scriptletClass foreach { x => attr = scala.xml.Attribute(null, "scriptletClass", x.toString, attr) }
        case ("@resourceBundle", _) => __obj.attr_resourceBundle foreach { x => attr = scala.xml.Attribute(null, "resourceBundle", x.toString, attr) }
        case ("@whenResourceMissingType", _) => if (__obj.attr_whenResourceMissingType.toString != "Null") attr = scala.xml.Attribute(null, "whenResourceMissingType", __obj.attr_whenResourceMissingType.toString, attr)
        case ("@isIgnorePagination", _) => if (__obj.attr_isIgnorePagination.toString != "false") attr = scala.xml.Attribute(null, "isIgnorePagination", __obj.attr_isIgnorePagination.toString, attr)
        case ("@formatFactoryClass", _) => __obj.attr_formatFactoryClass foreach { x => attr = scala.xml.Attribute(null, "formatFactoryClass", x.toString, attr) }
        case ("@uuid", _) => __obj.attr_uuid foreach { x => attr = scala.xml.Attribute(null, "uuid", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.JasperReport, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.property flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Property](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("property"), __scope, false) },
        __obj.importValue flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Import](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("import"), __scope, false) },
        __obj.template flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Template](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("template"), __scope, false) },
        __obj.reportFont flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ReportFont](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("reportFont"), __scope, false) },
        __obj.style flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Style](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("style"), __scope, false) },
        __obj.subDataset flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.SubDataset](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("subDataset"), __scope, false) },
        __obj.scriptlet flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Scriptlet](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("scriptlet"), __scope, false) },
        __obj.parameter flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Parameter](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("parameter"), __scope, false) },
        __obj.queryString map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.QueryString](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("queryString"), __scope, false) } getOrElse {Nil},
        __obj.field flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Field](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("field"), __scope, false) },
        __obj.sortField flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.SortField](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("sortField"), __scope, false) },
        __obj.variable flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Variable](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("variable"), __scope, false) },
        __obj.filterExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.FilterExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("filterExpression"), __scope, false) } getOrElse {Nil},
        __obj.group flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Group](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("group"), __scope, false) },
        __obj.background map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Background](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("background"), __scope, false) } getOrElse {Nil},
        __obj.title map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Title](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("title"), __scope, false) } getOrElse {Nil},
        __obj.pageHeader map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.PageHeader](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("pageHeader"), __scope, false) } getOrElse {Nil},
        __obj.columnHeader map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ColumnHeader](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("columnHeader"), __scope, false) } getOrElse {Nil},
        __obj.detail map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Detail](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("detail"), __scope, false) } getOrElse {Nil},
        __obj.columnFooter map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ColumnFooter](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("columnFooter"), __scope, false) } getOrElse {Nil},
        __obj.pageFooter map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.PageFooter](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("pageFooter"), __scope, false) } getOrElse {Nil},
        __obj.lastPageFooter map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.LastPageFooter](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("lastPageFooter"), __scope, false) } getOrElse {Nil},
        __obj.summary map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Summary](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("summary"), __scope, false) } getOrElse {Nil},
        __obj.noData map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.NoData](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("noData"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportPropertyFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Property] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.report.Property] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.Property] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.report.Property(scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Property, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.attr_name.toString, attr)
        case ("@value", _) => __obj.attr_value foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Property, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultReportPropertyExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.PropertyExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.PropertyExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.PropertyExpression(Seq.concat(p1.toList),
        scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.PropertyExpression, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.attr_name.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.PropertyExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportImportFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Import] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.report.Import] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.Import] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.report.Import(scala.collection.immutable.ListMap(List(
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Import, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@value", _) => attr = scala.xml.Attribute(null, "value", __obj.attr_value.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Import, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultReportTemplateFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Template] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Template] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.Template(Seq.concat(p1.toList),
        scala.collection.immutable.ListMap(List(
        (node \ "@class").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("java.lang.String"), scalaxb.ElemName(node) :: stack))) map { "@class" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Template, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@class", _) => if (__obj.attr_class.toString != "java.lang.String") attr = scala.xml.Attribute(null, "class", __obj.attr_class.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Template, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  def buildReportIsDefaultFormat = new DefaultReportIsDefaultFormat {}
  trait DefaultReportIsDefaultFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsDefault] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsDefault] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsDefault.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsDefault.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsDefault, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsBoldFormat = new DefaultReportIsBoldFormat {}
  trait DefaultReportIsBoldFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsBold] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsBold] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsBold.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsBold.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsBold, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsItalicFormat = new DefaultReportIsItalicFormat {}
  trait DefaultReportIsItalicFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsItalic] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsItalic] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsItalic.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsItalic.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsItalic, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsUnderlineFormat = new DefaultReportIsUnderlineFormat {}
  trait DefaultReportIsUnderlineFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsUnderline] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsUnderline] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsUnderline.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsUnderline.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsUnderline, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsStrikeThroughFormat = new DefaultReportIsStrikeThroughFormat {}
  trait DefaultReportIsStrikeThroughFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsStrikeThrough] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsStrikeThrough] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsStrikeThrough.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsStrikeThrough.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsStrikeThrough, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsPdfEmbeddedFormat = new DefaultReportIsPdfEmbeddedFormat {}
  trait DefaultReportIsPdfEmbeddedFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsPdfEmbedded] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsPdfEmbedded] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsPdfEmbedded.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsPdfEmbedded.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsPdfEmbedded, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportReportFontFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ReportFont] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.report.ReportFont] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.ReportFont] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.report.ReportFont(scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@isDefault").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsDefault](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsDefault](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@isDefault" -> _ },
        (node \ "@fontName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@fontName" -> _ },
        (node \ "@size").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@size" -> _ },
        (node \ "@isBold").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsBold](x, scalaxb.ElemName(node) :: stack)) } map { "@isBold" -> _ },
        (node \ "@isItalic").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsItalic](x, scalaxb.ElemName(node) :: stack)) } map { "@isItalic" -> _ },
        (node \ "@isUnderline").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsUnderline](x, scalaxb.ElemName(node) :: stack)) } map { "@isUnderline" -> _ },
        (node \ "@isStrikeThrough").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsStrikeThrough](x, scalaxb.ElemName(node) :: stack)) } map { "@isStrikeThrough" -> _ },
        (node \ "@pdfFontName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@pdfFontName" -> _ },
        (node \ "@pdfEncoding").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@pdfEncoding" -> _ },
        (node \ "@isPdfEmbedded").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsPdfEmbedded](x, scalaxb.ElemName(node) :: stack)) } map { "@isPdfEmbedded" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.ReportFont, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.attr_name.toString, attr)
        case ("@isDefault", _) => if (__obj.attr_isDefault.toString != "false") attr = scala.xml.Attribute(null, "isDefault", __obj.attr_isDefault.toString, attr)
        case ("@fontName", _) => __obj.attr_fontName foreach { x => attr = scala.xml.Attribute(null, "fontName", x.toString, attr) }
        case ("@size", _) => __obj.attr_size foreach { x => attr = scala.xml.Attribute(null, "size", x.toString, attr) }
        case ("@isBold", _) => __obj.attr_isBold foreach { x => attr = scala.xml.Attribute(null, "isBold", x.toString, attr) }
        case ("@isItalic", _) => __obj.attr_isItalic foreach { x => attr = scala.xml.Attribute(null, "isItalic", x.toString, attr) }
        case ("@isUnderline", _) => __obj.attr_isUnderline foreach { x => attr = scala.xml.Attribute(null, "isUnderline", x.toString, attr) }
        case ("@isStrikeThrough", _) => __obj.attr_isStrikeThrough foreach { x => attr = scala.xml.Attribute(null, "isStrikeThrough", x.toString, attr) }
        case ("@pdfFontName", _) => __obj.attr_pdfFontName foreach { x => attr = scala.xml.Attribute(null, "pdfFontName", x.toString, attr) }
        case ("@pdfEncoding", _) => __obj.attr_pdfEncoding foreach { x => attr = scala.xml.Attribute(null, "pdfEncoding", x.toString, attr) }
        case ("@isPdfEmbedded", _) => __obj.attr_isPdfEmbedded foreach { x => attr = scala.xml.Attribute(null, "isPdfEmbedded", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ReportFont, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  def buildReportIsDefaultTypeFormat = new DefaultReportIsDefaultTypeFormat {}
  trait DefaultReportIsDefaultTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsDefaultType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsDefaultType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsDefaultType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsDefaultType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsDefaultType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportModeFormat = new DefaultReportModeFormat {}
  trait DefaultReportModeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Mode] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.Mode] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.Mode.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.Mode.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.Mode, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportPenTypeFormat = new DefaultReportPenTypeFormat {}
  trait DefaultReportPenTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.PenType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.PenType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.PenType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.PenType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.PenType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportFillFormat = new DefaultReportFillFormat {}
  trait DefaultReportFillFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Fill] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.Fill] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.Fill.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.Fill.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.Fill, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportScaleImageFormat = new DefaultReportScaleImageFormat {}
  trait DefaultReportScaleImageFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ScaleImage] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.ScaleImage] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.ScaleImage.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.ScaleImage.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.ScaleImage, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportHAlignFormat = new DefaultReportHAlignFormat {}
  trait DefaultReportHAlignFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.HAlign] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.HAlign] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.HAlign.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.HAlign.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.HAlign, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportHTextAlignFormat = new DefaultReportHTextAlignFormat {}
  trait DefaultReportHTextAlignFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.HTextAlign] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.HTextAlign] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.HTextAlign.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.HTextAlign.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.HTextAlign, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportHImageAlignFormat = new DefaultReportHImageAlignFormat {}
  trait DefaultReportHImageAlignFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.HImageAlign] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.HImageAlign] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.HImageAlign.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.HImageAlign.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.HImageAlign, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportVAlignFormat = new DefaultReportVAlignFormat {}
  trait DefaultReportVAlignFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.VAlign] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.VAlign] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.VAlign.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.VAlign.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.VAlign, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportVTextAlignFormat = new DefaultReportVTextAlignFormat {}
  trait DefaultReportVTextAlignFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.VTextAlign] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.VTextAlign] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.VTextAlign.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.VTextAlign.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.VTextAlign, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportVImageAlignFormat = new DefaultReportVImageAlignFormat {}
  trait DefaultReportVImageAlignFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.VImageAlign] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.VImageAlign] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.VImageAlign.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.VImageAlign.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.VImageAlign, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportBorderFormat = new DefaultReportBorderFormat {}
  trait DefaultReportBorderFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Border] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.Border] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.Border.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.Border.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.Border, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportTopBorderFormat = new DefaultReportTopBorderFormat {}
  trait DefaultReportTopBorderFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TopBorder] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.TopBorder] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.TopBorder.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.TopBorder.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.TopBorder, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportLeftBorderFormat = new DefaultReportLeftBorderFormat {}
  trait DefaultReportLeftBorderFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LeftBorder] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.LeftBorder] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.LeftBorder.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.LeftBorder.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.LeftBorder, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportBottomBorderFormat = new DefaultReportBottomBorderFormat {}
  trait DefaultReportBottomBorderFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.BottomBorder] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.BottomBorder] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.BottomBorder.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.BottomBorder.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.BottomBorder, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportRightBorderFormat = new DefaultReportRightBorderFormat {}
  trait DefaultReportRightBorderFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.RightBorder] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.RightBorder] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.RightBorder.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.RightBorder.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.RightBorder, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportRotationFormat = new DefaultReportRotationFormat {}
  trait DefaultReportRotationFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Rotation] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.Rotation] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.Rotation.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.Rotation.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.Rotation, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportLineSpacingFormat = new DefaultReportLineSpacingFormat {}
  trait DefaultReportLineSpacingFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LineSpacing] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.LineSpacing] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.LineSpacing.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.LineSpacing.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.LineSpacing, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsStyledTextFormat = new DefaultReportIsStyledTextFormat {}
  trait DefaultReportIsStyledTextFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsStyledText] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsStyledText] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsStyledText.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsStyledText.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsStyledText, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsBoldTypeFormat = new DefaultReportIsBoldTypeFormat {}
  trait DefaultReportIsBoldTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsBoldType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsBoldType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsBoldType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsBoldType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsBoldType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsItalicTypeFormat = new DefaultReportIsItalicTypeFormat {}
  trait DefaultReportIsItalicTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsItalicType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsItalicType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsItalicType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsItalicType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsItalicType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsUnderlineTypeFormat = new DefaultReportIsUnderlineTypeFormat {}
  trait DefaultReportIsUnderlineTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsUnderlineType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsUnderlineType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsUnderlineType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsUnderlineType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsUnderlineType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsStrikeThroughTypeFormat = new DefaultReportIsStrikeThroughTypeFormat {}
  trait DefaultReportIsStrikeThroughTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsStrikeThroughType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsStrikeThroughType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsStrikeThroughType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsStrikeThroughType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsStrikeThroughType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsPdfEmbeddedTypeFormat = new DefaultReportIsPdfEmbeddedTypeFormat {}
  trait DefaultReportIsPdfEmbeddedTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsPdfEmbeddedType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsPdfEmbeddedType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsPdfEmbeddedType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsPdfEmbeddedType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsPdfEmbeddedType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsBlankWhenNullFormat = new DefaultReportIsBlankWhenNullFormat {}
  trait DefaultReportIsBlankWhenNullFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsBlankWhenNull] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsBlankWhenNull] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsBlankWhenNull.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsBlankWhenNull.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsBlankWhenNull, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportStyleFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Style] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Style] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "pen")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "box")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "paragraph")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "conditionalStyle")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.iofficecorp.jasperserver.pumped.report.Style(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Pen](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Box](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Paragraph](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ConditionalStyle](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@isDefault").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsDefaultType](x, scalaxb.ElemName(node) :: stack)) } map { "@isDefault" -> _ },
        (node \ "@style").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@style" -> _ },
        (node \ "@mode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Mode](x, scalaxb.ElemName(node) :: stack)) } map { "@mode" -> _ },
        (node \ "@forecolor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@forecolor" -> _ },
        (node \ "@backcolor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@backcolor" -> _ },
        (node \ "@pen").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PenType](x, scalaxb.ElemName(node) :: stack)) } map { "@pen" -> _ },
        (node \ "@fill").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Fill](x, scalaxb.ElemName(node) :: stack)) } map { "@fill" -> _ },
        (node \ "@radius").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@radius" -> _ },
        (node \ "@scaleImage").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ScaleImage](x, scalaxb.ElemName(node) :: stack)) } map { "@scaleImage" -> _ },
        (node \ "@hAlign").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HAlign](x, scalaxb.ElemName(node) :: stack)) } map { "@hAlign" -> _ },
        (node \ "@hTextAlign").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HTextAlign](x, scalaxb.ElemName(node) :: stack)) } map { "@hTextAlign" -> _ },
        (node \ "@hImageAlign").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HImageAlign](x, scalaxb.ElemName(node) :: stack)) } map { "@hImageAlign" -> _ },
        (node \ "@vAlign").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.VAlign](x, scalaxb.ElemName(node) :: stack)) } map { "@vAlign" -> _ },
        (node \ "@vTextAlign").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.VTextAlign](x, scalaxb.ElemName(node) :: stack)) } map { "@vTextAlign" -> _ },
        (node \ "@vImageAlign").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.VImageAlign](x, scalaxb.ElemName(node) :: stack)) } map { "@vImageAlign" -> _ },
        (node \ "@border").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Border](x, scalaxb.ElemName(node) :: stack)) } map { "@border" -> _ },
        (node \ "@borderColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@borderColor" -> _ },
        (node \ "@padding").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@padding" -> _ },
        (node \ "@topBorder").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TopBorder](x, scalaxb.ElemName(node) :: stack)) } map { "@topBorder" -> _ },
        (node \ "@topBorderColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@topBorderColor" -> _ },
        (node \ "@topPadding").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@topPadding" -> _ },
        (node \ "@leftBorder").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LeftBorder](x, scalaxb.ElemName(node) :: stack)) } map { "@leftBorder" -> _ },
        (node \ "@leftBorderColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@leftBorderColor" -> _ },
        (node \ "@leftPadding").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@leftPadding" -> _ },
        (node \ "@bottomBorder").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BottomBorder](x, scalaxb.ElemName(node) :: stack)) } map { "@bottomBorder" -> _ },
        (node \ "@bottomBorderColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@bottomBorderColor" -> _ },
        (node \ "@bottomPadding").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@bottomPadding" -> _ },
        (node \ "@rightBorder").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.RightBorder](x, scalaxb.ElemName(node) :: stack)) } map { "@rightBorder" -> _ },
        (node \ "@rightBorderColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@rightBorderColor" -> _ },
        (node \ "@rightPadding").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@rightPadding" -> _ },
        (node \ "@rotation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Rotation](x, scalaxb.ElemName(node) :: stack)) } map { "@rotation" -> _ },
        (node \ "@lineSpacing").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LineSpacing](x, scalaxb.ElemName(node) :: stack)) } map { "@lineSpacing" -> _ },
        (node \ "@isStyledText").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsStyledText](x, scalaxb.ElemName(node) :: stack)) } map { "@isStyledText" -> _ },
        (node \ "@markup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@markup" -> _ },
        (node \ "@fontName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@fontName" -> _ },
        (node \ "@fontSize").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@fontSize" -> _ },
        (node \ "@isBold").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsBoldType](x, scalaxb.ElemName(node) :: stack)) } map { "@isBold" -> _ },
        (node \ "@isItalic").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsItalicType](x, scalaxb.ElemName(node) :: stack)) } map { "@isItalic" -> _ },
        (node \ "@isUnderline").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsUnderlineType](x, scalaxb.ElemName(node) :: stack)) } map { "@isUnderline" -> _ },
        (node \ "@isStrikeThrough").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsStrikeThroughType](x, scalaxb.ElemName(node) :: stack)) } map { "@isStrikeThrough" -> _ },
        (node \ "@pdfFontName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@pdfFontName" -> _ },
        (node \ "@pdfEncoding").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@pdfEncoding" -> _ },
        (node \ "@isPdfEmbedded").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsPdfEmbeddedType](x, scalaxb.ElemName(node) :: stack)) } map { "@isPdfEmbedded" -> _ },
        (node \ "@pattern").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@pattern" -> _ },
        (node \ "@isBlankWhenNull").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsBlankWhenNull](x, scalaxb.ElemName(node) :: stack)) } map { "@isBlankWhenNull" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Style, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => __obj.attr_name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case ("@isDefault", _) => __obj.attr_isDefault foreach { x => attr = scala.xml.Attribute(null, "isDefault", x.toString, attr) }
        case ("@style", _) => __obj.attr_style foreach { x => attr = scala.xml.Attribute(null, "style", x.toString, attr) }
        case ("@mode", _) => __obj.attr_mode foreach { x => attr = scala.xml.Attribute(null, "mode", x.toString, attr) }
        case ("@forecolor", _) => __obj.attr_forecolor foreach { x => attr = scala.xml.Attribute(null, "forecolor", x.toString, attr) }
        case ("@backcolor", _) => __obj.attr_backcolor foreach { x => attr = scala.xml.Attribute(null, "backcolor", x.toString, attr) }
        case ("@pen", _) => __obj.attr_pen foreach { x => attr = scala.xml.Attribute(null, "pen", x.toString, attr) }
        case ("@fill", _) => __obj.attr_fill foreach { x => attr = scala.xml.Attribute(null, "fill", x.toString, attr) }
        case ("@radius", _) => __obj.attr_radius foreach { x => attr = scala.xml.Attribute(null, "radius", x.toString, attr) }
        case ("@scaleImage", _) => __obj.attr_scaleImage foreach { x => attr = scala.xml.Attribute(null, "scaleImage", x.toString, attr) }
        case ("@hAlign", _) => __obj.attr_hAlign foreach { x => attr = scala.xml.Attribute(null, "hAlign", x.toString, attr) }
        case ("@hTextAlign", _) => __obj.attr_hTextAlign foreach { x => attr = scala.xml.Attribute(null, "hTextAlign", x.toString, attr) }
        case ("@hImageAlign", _) => __obj.attr_hImageAlign foreach { x => attr = scala.xml.Attribute(null, "hImageAlign", x.toString, attr) }
        case ("@vAlign", _) => __obj.attr_vAlign foreach { x => attr = scala.xml.Attribute(null, "vAlign", x.toString, attr) }
        case ("@vTextAlign", _) => __obj.attr_vTextAlign foreach { x => attr = scala.xml.Attribute(null, "vTextAlign", x.toString, attr) }
        case ("@vImageAlign", _) => __obj.attr_vImageAlign foreach { x => attr = scala.xml.Attribute(null, "vImageAlign", x.toString, attr) }
        case ("@border", _) => __obj.attr_border foreach { x => attr = scala.xml.Attribute(null, "border", x.toString, attr) }
        case ("@borderColor", _) => __obj.attr_borderColor foreach { x => attr = scala.xml.Attribute(null, "borderColor", x.toString, attr) }
        case ("@padding", _) => __obj.attr_padding foreach { x => attr = scala.xml.Attribute(null, "padding", x.toString, attr) }
        case ("@topBorder", _) => __obj.attr_topBorder foreach { x => attr = scala.xml.Attribute(null, "topBorder", x.toString, attr) }
        case ("@topBorderColor", _) => __obj.attr_topBorderColor foreach { x => attr = scala.xml.Attribute(null, "topBorderColor", x.toString, attr) }
        case ("@topPadding", _) => __obj.attr_topPadding foreach { x => attr = scala.xml.Attribute(null, "topPadding", x.toString, attr) }
        case ("@leftBorder", _) => __obj.attr_leftBorder foreach { x => attr = scala.xml.Attribute(null, "leftBorder", x.toString, attr) }
        case ("@leftBorderColor", _) => __obj.attr_leftBorderColor foreach { x => attr = scala.xml.Attribute(null, "leftBorderColor", x.toString, attr) }
        case ("@leftPadding", _) => __obj.attr_leftPadding foreach { x => attr = scala.xml.Attribute(null, "leftPadding", x.toString, attr) }
        case ("@bottomBorder", _) => __obj.attr_bottomBorder foreach { x => attr = scala.xml.Attribute(null, "bottomBorder", x.toString, attr) }
        case ("@bottomBorderColor", _) => __obj.attr_bottomBorderColor foreach { x => attr = scala.xml.Attribute(null, "bottomBorderColor", x.toString, attr) }
        case ("@bottomPadding", _) => __obj.attr_bottomPadding foreach { x => attr = scala.xml.Attribute(null, "bottomPadding", x.toString, attr) }
        case ("@rightBorder", _) => __obj.attr_rightBorder foreach { x => attr = scala.xml.Attribute(null, "rightBorder", x.toString, attr) }
        case ("@rightBorderColor", _) => __obj.attr_rightBorderColor foreach { x => attr = scala.xml.Attribute(null, "rightBorderColor", x.toString, attr) }
        case ("@rightPadding", _) => __obj.attr_rightPadding foreach { x => attr = scala.xml.Attribute(null, "rightPadding", x.toString, attr) }
        case ("@rotation", _) => __obj.attr_rotation foreach { x => attr = scala.xml.Attribute(null, "rotation", x.toString, attr) }
        case ("@lineSpacing", _) => __obj.attr_lineSpacing foreach { x => attr = scala.xml.Attribute(null, "lineSpacing", x.toString, attr) }
        case ("@isStyledText", _) => __obj.attr_isStyledText foreach { x => attr = scala.xml.Attribute(null, "isStyledText", x.toString, attr) }
        case ("@markup", _) => __obj.attr_markup foreach { x => attr = scala.xml.Attribute(null, "markup", x.toString, attr) }
        case ("@fontName", _) => __obj.attr_fontName foreach { x => attr = scala.xml.Attribute(null, "fontName", x.toString, attr) }
        case ("@fontSize", _) => __obj.attr_fontSize foreach { x => attr = scala.xml.Attribute(null, "fontSize", x.toString, attr) }
        case ("@isBold", _) => __obj.attr_isBold foreach { x => attr = scala.xml.Attribute(null, "isBold", x.toString, attr) }
        case ("@isItalic", _) => __obj.attr_isItalic foreach { x => attr = scala.xml.Attribute(null, "isItalic", x.toString, attr) }
        case ("@isUnderline", _) => __obj.attr_isUnderline foreach { x => attr = scala.xml.Attribute(null, "isUnderline", x.toString, attr) }
        case ("@isStrikeThrough", _) => __obj.attr_isStrikeThrough foreach { x => attr = scala.xml.Attribute(null, "isStrikeThrough", x.toString, attr) }
        case ("@pdfFontName", _) => __obj.attr_pdfFontName foreach { x => attr = scala.xml.Attribute(null, "pdfFontName", x.toString, attr) }
        case ("@pdfEncoding", _) => __obj.attr_pdfEncoding foreach { x => attr = scala.xml.Attribute(null, "pdfEncoding", x.toString, attr) }
        case ("@isPdfEmbedded", _) => __obj.attr_isPdfEmbedded foreach { x => attr = scala.xml.Attribute(null, "isPdfEmbedded", x.toString, attr) }
        case ("@pattern", _) => __obj.attr_pattern foreach { x => attr = scala.xml.Attribute(null, "pattern", x.toString, attr) }
        case ("@isBlankWhenNull", _) => __obj.attr_isBlankWhenNull foreach { x => attr = scala.xml.Attribute(null, "isBlankWhenNull", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Style, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.pen map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Pen](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("pen"), __scope, false) } getOrElse {Nil},
        __obj.box map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Box](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("box"), __scope, false) } getOrElse {Nil},
        __obj.paragraph map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Paragraph](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("paragraph"), __scope, false) } getOrElse {Nil},
        __obj.conditionalStyle flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ConditionalStyle](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("conditionalStyle"), __scope, false) })

  }

  def buildReportLineStyleFormat = new DefaultReportLineStyleFormat {}
  trait DefaultReportLineStyleFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LineStyle] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.LineStyle] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.LineStyle.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.LineStyle.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.LineStyle, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportPenFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Pen] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.report.Pen] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.Pen] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.report.Pen(scala.collection.immutable.ListMap(List(
        (node \ "@lineWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lineWidth" -> _ },
        (node \ "@lineStyle").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LineStyle](x, scalaxb.ElemName(node) :: stack)) } map { "@lineStyle" -> _ },
        (node \ "@lineColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lineColor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Pen, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@lineWidth", _) => __obj.attr_lineWidth foreach { x => attr = scala.xml.Attribute(null, "lineWidth", x.toString, attr) }
        case ("@lineStyle", _) => __obj.attr_lineStyle foreach { x => attr = scala.xml.Attribute(null, "lineStyle", x.toString, attr) }
        case ("@lineColor", _) => __obj.attr_lineColor foreach { x => attr = scala.xml.Attribute(null, "lineColor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Pen, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  def buildReportLineSpacingTypeFormat = new DefaultReportLineSpacingTypeFormat {}
  trait DefaultReportLineSpacingTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LineSpacingType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.LineSpacingType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.LineSpacingType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.LineSpacingType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.LineSpacingType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportParagraphFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Paragraph] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Paragraph] =
      phrase(safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "tabStop")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.Paragraph(p1 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TabStop](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@lineSpacing").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LineSpacingType](x, scalaxb.ElemName(node) :: stack)) } map { "@lineSpacing" -> _ },
        (node \ "@lineSpacingSize").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lineSpacingSize" -> _ },
        (node \ "@firstLineIndent").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@firstLineIndent" -> _ },
        (node \ "@leftIndent").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@leftIndent" -> _ },
        (node \ "@rightIndent").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@rightIndent" -> _ },
        (node \ "@spacingBefore").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@spacingBefore" -> _ },
        (node \ "@spacingAfter").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@spacingAfter" -> _ },
        (node \ "@tabStopWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@tabStopWidth" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Paragraph, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@lineSpacing", _) => __obj.attr_lineSpacing foreach { x => attr = scala.xml.Attribute(null, "lineSpacing", x.toString, attr) }
        case ("@lineSpacingSize", _) => __obj.attr_lineSpacingSize foreach { x => attr = scala.xml.Attribute(null, "lineSpacingSize", x.toString, attr) }
        case ("@firstLineIndent", _) => __obj.attr_firstLineIndent foreach { x => attr = scala.xml.Attribute(null, "firstLineIndent", x.toString, attr) }
        case ("@leftIndent", _) => __obj.attr_leftIndent foreach { x => attr = scala.xml.Attribute(null, "leftIndent", x.toString, attr) }
        case ("@rightIndent", _) => __obj.attr_rightIndent foreach { x => attr = scala.xml.Attribute(null, "rightIndent", x.toString, attr) }
        case ("@spacingBefore", _) => __obj.attr_spacingBefore foreach { x => attr = scala.xml.Attribute(null, "spacingBefore", x.toString, attr) }
        case ("@spacingAfter", _) => __obj.attr_spacingAfter foreach { x => attr = scala.xml.Attribute(null, "spacingAfter", x.toString, attr) }
        case ("@tabStopWidth", _) => __obj.attr_tabStopWidth foreach { x => attr = scala.xml.Attribute(null, "tabStopWidth", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Paragraph, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.tabStop flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.TabStop](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("tabStop"), __scope, false) })

  }

  def buildReportAlignmentFormat = new DefaultReportAlignmentFormat {}
  trait DefaultReportAlignmentFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Alignment] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.Alignment] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.Alignment.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.Alignment.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.Alignment, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportTabStopFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TabStop] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.report.TabStop] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.TabStop] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.report.TabStop(scala.collection.immutable.ListMap(List(
        (node \ "@alignment").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Alignment](x, scalaxb.ElemName(node) :: stack)) } map { "@alignment" -> _ },
        (node \ "@position").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@position" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.TabStop, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@alignment", _) => __obj.attr_alignment foreach { x => attr = scala.xml.Attribute(null, "alignment", x.toString, attr) }
        case ("@position", _) => attr = scala.xml.Attribute(null, "position", __obj.attr_position.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.TabStop, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultReportConditionalStyleFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ConditionalStyle] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ConditionalStyle] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "conditionExpression")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "style")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.ConditionalStyle(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ConditionExpression](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Style](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ConditionalStyle, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.conditionExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ConditionExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("conditionExpression"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Style](__obj.style, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("style"), __scope, false))

  }

  trait DefaultReportConditionExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ConditionExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ConditionExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.ConditionExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ConditionExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  def buildReportWhenResourceMissingTypeTypeFormat = new DefaultReportWhenResourceMissingTypeTypeFormat {}
  trait DefaultReportWhenResourceMissingTypeTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.WhenResourceMissingTypeType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.WhenResourceMissingTypeType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.WhenResourceMissingTypeType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.WhenResourceMissingTypeType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.WhenResourceMissingTypeType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportSubDatasetFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.SubDataset] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.SubDataset] =
      phrase(safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "property")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "scriptlet")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "parameter")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "queryString")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "field")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "sortField")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "variable")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "filterExpression")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "group")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      com.iofficecorp.jasperserver.pumped.report.SubDataset(p1 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Property](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Scriptlet](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Parameter](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.QueryString](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Field](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.SortField](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Variable](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.FilterExpression](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Group](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@scriptletClass").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@scriptletClass" -> _ },
        (node \ "@resourceBundle").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@resourceBundle" -> _ },
        (node \ "@whenResourceMissingType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.WhenResourceMissingTypeType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.WhenResourceMissingTypeType](scala.xml.Text("Null"), scalaxb.ElemName(node) :: stack))) map { "@whenResourceMissingType" -> _ },
        (node \ "@uuid").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@uuid" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.SubDataset, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.attr_name.toString, attr)
        case ("@scriptletClass", _) => __obj.attr_scriptletClass foreach { x => attr = scala.xml.Attribute(null, "scriptletClass", x.toString, attr) }
        case ("@resourceBundle", _) => __obj.attr_resourceBundle foreach { x => attr = scala.xml.Attribute(null, "resourceBundle", x.toString, attr) }
        case ("@whenResourceMissingType", _) => if (__obj.attr_whenResourceMissingType.toString != "Null") attr = scala.xml.Attribute(null, "whenResourceMissingType", __obj.attr_whenResourceMissingType.toString, attr)
        case ("@uuid", _) => __obj.attr_uuid foreach { x => attr = scala.xml.Attribute(null, "uuid", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.SubDataset, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.property flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Property](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("property"), __scope, false) },
        __obj.scriptlet flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Scriptlet](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("scriptlet"), __scope, false) },
        __obj.parameter flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Parameter](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("parameter"), __scope, false) },
        __obj.queryString map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.QueryString](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("queryString"), __scope, false) } getOrElse {Nil},
        __obj.field flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Field](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("field"), __scope, false) },
        __obj.sortField flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.SortField](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("sortField"), __scope, false) },
        __obj.variable flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Variable](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("variable"), __scope, false) },
        __obj.filterExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.FilterExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("filterExpression"), __scope, false) } getOrElse {Nil},
        __obj.group flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Group](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("group"), __scope, false) })

  }

  trait DefaultReportScriptletFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Scriptlet] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Scriptlet] =
      phrase(safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "property")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "scriptletDescription")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.Scriptlet(p1 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Property](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ScriptletDescription](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@class").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@class" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Scriptlet, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.attr_name.toString, attr)
        case ("@class", _) => attr = scala.xml.Attribute(null, "class", __obj.attr_class.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Scriptlet, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.property flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Property](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("property"), __scope, false) },
        __obj.scriptletDescription map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ScriptletDescription](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("scriptletDescription"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportScriptletDescriptionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ScriptletDescription] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ScriptletDescription] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.ScriptletDescription(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ScriptletDescription, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  def buildReportIsForPromptingFormat = new DefaultReportIsForPromptingFormat {}
  trait DefaultReportIsForPromptingFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsForPrompting] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsForPrompting] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsForPrompting.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsForPrompting.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsForPrompting, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportParameterFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Parameter] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Parameter] =
      phrase(safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "property")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "parameterDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "defaultValueExpression")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.Parameter(p1 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Property](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ParameterDescription](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DefaultValueExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@class").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("java.lang.String"), scalaxb.ElemName(node) :: stack))) map { "@class" -> _ },
        (node \ "@nestedType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@nestedType" -> _ },
        (node \ "@isForPrompting").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsForPrompting](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsForPrompting](scala.xml.Text("true"), scalaxb.ElemName(node) :: stack))) map { "@isForPrompting" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Parameter, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.attr_name.toString, attr)
        case ("@class", _) => if (__obj.attr_class.toString != "java.lang.String") attr = scala.xml.Attribute(null, "class", __obj.attr_class.toString, attr)
        case ("@nestedType", _) => __obj.attr_nestedType foreach { x => attr = scala.xml.Attribute(null, "nestedType", x.toString, attr) }
        case ("@isForPrompting", _) => if (__obj.attr_isForPrompting.toString != "true") attr = scala.xml.Attribute(null, "isForPrompting", __obj.attr_isForPrompting.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Parameter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.property flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Property](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("property"), __scope, false) },
        __obj.parameterDescription map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ParameterDescription](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("parameterDescription"), __scope, false) } getOrElse {Nil},
        __obj.defaultValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DefaultValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("defaultValueExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportParameterDescriptionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ParameterDescription] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ParameterDescription] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.ParameterDescription(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ParameterDescription, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportDefaultValueExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.DefaultValueExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.DefaultValueExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.DefaultValueExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.DefaultValueExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportQueryStringFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.QueryString] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.QueryString] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.QueryString(Seq.concat(p1.toList),
        scala.collection.immutable.ListMap(List(
        (node \ "@language").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("sql"), scalaxb.ElemName(node) :: stack))) map { "@language" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.QueryString, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@language", _) => if (__obj.attr_language.toString != "sql") attr = scala.xml.Attribute(null, "language", __obj.attr_language.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.QueryString, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportFieldFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Field] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Field] =
      phrase(safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "property")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "fieldDescription")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.Field(p1 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Property](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.FieldDescription](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@class").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("java.lang.String"), scalaxb.ElemName(node) :: stack))) map { "@class" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Field, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.attr_name.toString, attr)
        case ("@class", _) => if (__obj.attr_class.toString != "java.lang.String") attr = scala.xml.Attribute(null, "class", __obj.attr_class.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Field, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.property flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Property](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("property"), __scope, false) },
        __obj.fieldDescription map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.FieldDescription](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("fieldDescription"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportFieldDescriptionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.FieldDescription] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.FieldDescription] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.FieldDescription(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.FieldDescription, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  def buildReportOrderFormat = new DefaultReportOrderFormat {}
  trait DefaultReportOrderFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Order] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.Order] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.Order.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.Order.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.Order, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportTypeFormat = new DefaultReportTypeFormat {}
  trait DefaultReportTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Type] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.Type] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.Type.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.Type.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.Type, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportSortFieldFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.SortField] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.report.SortField] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.SortField] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.report.SortField(scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@order").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Order](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Order](scala.xml.Text("Ascending"), scalaxb.ElemName(node) :: stack))) map { "@order" -> _ },
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Type](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Type](scala.xml.Text("Field"), scalaxb.ElemName(node) :: stack))) map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.SortField, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.attr_name.toString, attr)
        case ("@order", _) => if (__obj.attr_order.toString != "Ascending") attr = scala.xml.Attribute(null, "order", __obj.attr_order.toString, attr)
        case ("@type", _) => if (__obj.attr_type.toString != "Field") attr = scala.xml.Attribute(null, "type", __obj.attr_type.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.SortField, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  def buildReportResetTypeFormat = new DefaultReportResetTypeFormat {}
  trait DefaultReportResetTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ResetType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.ResetType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.ResetType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.ResetType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.ResetType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIncrementTypeFormat = new DefaultReportIncrementTypeFormat {}
  trait DefaultReportIncrementTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IncrementType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IncrementType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IncrementType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IncrementType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IncrementType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportCalculationFormat = new DefaultReportCalculationFormat {}
  trait DefaultReportCalculationFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Calculation] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.Calculation] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.Calculation.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.Calculation.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.Calculation, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportVariableFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Variable] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Variable] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "variableExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "initialValueExpression")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.Variable(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.VariableExpression](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.InitialValueExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@class").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("java.lang.String"), scalaxb.ElemName(node) :: stack))) map { "@class" -> _ },
        (node \ "@resetType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ResetType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ResetType](scala.xml.Text("Report"), scalaxb.ElemName(node) :: stack))) map { "@resetType" -> _ },
        (node \ "@resetGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@resetGroup" -> _ },
        (node \ "@incrementType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IncrementType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IncrementType](scala.xml.Text("None"), scalaxb.ElemName(node) :: stack))) map { "@incrementType" -> _ },
        (node \ "@incrementGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@incrementGroup" -> _ },
        (node \ "@calculation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Calculation](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Calculation](scala.xml.Text("Nothing"), scalaxb.ElemName(node) :: stack))) map { "@calculation" -> _ },
        (node \ "@incrementerFactoryClass").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@incrementerFactoryClass" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Variable, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.attr_name.toString, attr)
        case ("@class", _) => if (__obj.attr_class.toString != "java.lang.String") attr = scala.xml.Attribute(null, "class", __obj.attr_class.toString, attr)
        case ("@resetType", _) => if (__obj.attr_resetType.toString != "Report") attr = scala.xml.Attribute(null, "resetType", __obj.attr_resetType.toString, attr)
        case ("@resetGroup", _) => __obj.attr_resetGroup foreach { x => attr = scala.xml.Attribute(null, "resetGroup", x.toString, attr) }
        case ("@incrementType", _) => if (__obj.attr_incrementType.toString != "None") attr = scala.xml.Attribute(null, "incrementType", __obj.attr_incrementType.toString, attr)
        case ("@incrementGroup", _) => __obj.attr_incrementGroup foreach { x => attr = scala.xml.Attribute(null, "incrementGroup", x.toString, attr) }
        case ("@calculation", _) => if (__obj.attr_calculation.toString != "Nothing") attr = scala.xml.Attribute(null, "calculation", __obj.attr_calculation.toString, attr)
        case ("@incrementerFactoryClass", _) => __obj.attr_incrementerFactoryClass foreach { x => attr = scala.xml.Attribute(null, "incrementerFactoryClass", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Variable, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.variableExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.VariableExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("variableExpression"), __scope, false) } getOrElse {Nil},
        __obj.initialValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.InitialValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("initialValueExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportVariableExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.VariableExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.VariableExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.VariableExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.VariableExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportInitialValueExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.InitialValueExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.InitialValueExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.InitialValueExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.InitialValueExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportFilterExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.FilterExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.FilterExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.FilterExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.FilterExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  def buildReportIsStartNewColumnFormat = new DefaultReportIsStartNewColumnFormat {}
  trait DefaultReportIsStartNewColumnFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsStartNewColumn] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsStartNewColumn] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsStartNewColumn.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsStartNewColumn.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsStartNewColumn, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsStartNewPageFormat = new DefaultReportIsStartNewPageFormat {}
  trait DefaultReportIsStartNewPageFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsStartNewPage] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsStartNewPage] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsStartNewPage.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsStartNewPage.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsStartNewPage, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsResetPageNumberFormat = new DefaultReportIsResetPageNumberFormat {}
  trait DefaultReportIsResetPageNumberFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsResetPageNumber] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsResetPageNumber] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsResetPageNumber.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsResetPageNumber.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsResetPageNumber, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsReprintHeaderOnEachPageFormat = new DefaultReportIsReprintHeaderOnEachPageFormat {}
  trait DefaultReportIsReprintHeaderOnEachPageFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsReprintHeaderOnEachPage] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsReprintHeaderOnEachPage] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsReprintHeaderOnEachPage.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsReprintHeaderOnEachPage.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsReprintHeaderOnEachPage, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportFooterPositionFormat = new DefaultReportFooterPositionFormat {}
  trait DefaultReportFooterPositionFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.FooterPosition] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.FooterPosition] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.FooterPosition.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.FooterPosition.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.FooterPosition, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportKeepTogetherFormat = new DefaultReportKeepTogetherFormat {}
  trait DefaultReportKeepTogetherFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.KeepTogether] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.KeepTogether] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.KeepTogether.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.KeepTogether.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.KeepTogether, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportGroupFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Group] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Group] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "groupExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "groupHeader")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "groupFooter")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.Group(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.GroupExpression](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.GroupHeader](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.GroupFooter](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@isStartNewColumn").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsStartNewColumn](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsStartNewColumn](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@isStartNewColumn" -> _ },
        (node \ "@isStartNewPage").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsStartNewPage](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsStartNewPage](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@isStartNewPage" -> _ },
        (node \ "@isResetPageNumber").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsResetPageNumber](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsResetPageNumber](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@isResetPageNumber" -> _ },
        (node \ "@isReprintHeaderOnEachPage").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsReprintHeaderOnEachPage](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsReprintHeaderOnEachPage](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@isReprintHeaderOnEachPage" -> _ },
        (node \ "@minHeightToStartNewPage").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("0"), scalaxb.ElemName(node) :: stack))) map { "@minHeightToStartNewPage" -> _ },
        (node \ "@footerPosition").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.FooterPosition](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.FooterPosition](scala.xml.Text("Normal"), scalaxb.ElemName(node) :: stack))) map { "@footerPosition" -> _ },
        (node \ "@keepTogether").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.KeepTogether](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.KeepTogether](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@keepTogether" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Group, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.attr_name.toString, attr)
        case ("@isStartNewColumn", _) => if (__obj.attr_isStartNewColumn.toString != "false") attr = scala.xml.Attribute(null, "isStartNewColumn", __obj.attr_isStartNewColumn.toString, attr)
        case ("@isStartNewPage", _) => if (__obj.attr_isStartNewPage.toString != "false") attr = scala.xml.Attribute(null, "isStartNewPage", __obj.attr_isStartNewPage.toString, attr)
        case ("@isResetPageNumber", _) => if (__obj.attr_isResetPageNumber.toString != "false") attr = scala.xml.Attribute(null, "isResetPageNumber", __obj.attr_isResetPageNumber.toString, attr)
        case ("@isReprintHeaderOnEachPage", _) => if (__obj.attr_isReprintHeaderOnEachPage.toString != "false") attr = scala.xml.Attribute(null, "isReprintHeaderOnEachPage", __obj.attr_isReprintHeaderOnEachPage.toString, attr)
        case ("@minHeightToStartNewPage", _) => if (__obj.attr_minHeightToStartNewPage.toString != "0") attr = scala.xml.Attribute(null, "minHeightToStartNewPage", __obj.attr_minHeightToStartNewPage.toString, attr)
        case ("@footerPosition", _) => if (__obj.attr_footerPosition.toString != "Normal") attr = scala.xml.Attribute(null, "footerPosition", __obj.attr_footerPosition.toString, attr)
        case ("@keepTogether", _) => if (__obj.attr_keepTogether.toString != "false") attr = scala.xml.Attribute(null, "keepTogether", __obj.attr_keepTogether.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Group, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.groupExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.GroupExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("groupExpression"), __scope, false) } getOrElse {Nil},
        __obj.groupHeader map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.GroupHeader](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("groupHeader"), __scope, false) } getOrElse {Nil},
        __obj.groupFooter map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.GroupFooter](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("groupFooter"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportGroupExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.GroupExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.GroupExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.GroupExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.GroupExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportGroupHeaderFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.GroupHeader] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.GroupHeader] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "band")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Band](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "part")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Part](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.GroupHeader(p1) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.GroupHeader, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.groupheaderoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.report.GroupHeaderOption]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultReportGroupFooterFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.GroupFooter] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.GroupFooter] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "band")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Band](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "part")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Part](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.GroupFooter(p1) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.GroupFooter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.groupfooteroption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.report.GroupFooterOption]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultReportBackgroundFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Background] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Background] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "band")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.Background(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Band](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Background, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.band map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Band](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("band"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportTitleFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Title] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Title] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "band")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.Title(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Band](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Title, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.band map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Band](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("band"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportPageHeaderFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.PageHeader] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.PageHeader] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "band")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.PageHeader(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Band](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.PageHeader, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.band map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Band](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("band"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportColumnHeaderFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ColumnHeader] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ColumnHeader] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "band")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.ColumnHeader(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Band](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ColumnHeader, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.band map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Band](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("band"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportDetailFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Detail] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Detail] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "band")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Band](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "part")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Part](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.Detail(p1) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Detail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.detailoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.report.DetailOption]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultReportColumnFooterFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ColumnFooter] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ColumnFooter] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "band")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.ColumnFooter(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Band](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ColumnFooter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.band map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Band](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("band"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportPageFooterFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.PageFooter] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.PageFooter] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "band")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.PageFooter(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Band](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.PageFooter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.band map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Band](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("band"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportLastPageFooterFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.LastPageFooter] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.LastPageFooter] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "band")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.LastPageFooter(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Band](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.LastPageFooter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.band map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Band](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("band"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportSummaryFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Summary] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Summary] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "band")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.Summary(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Band](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Summary, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.band map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Band](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("band"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportNoDataFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.NoData] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.NoData] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "band")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.NoData(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Band](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.NoData, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.band map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Band](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("band"), __scope, false) } getOrElse {Nil})

  }

  def buildReportIsSplitAllowedFormat = new DefaultReportIsSplitAllowedFormat {}
  trait DefaultReportIsSplitAllowedFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsSplitAllowed] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsSplitAllowed] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsSplitAllowed.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsSplitAllowed.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsSplitAllowed, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportSplitTypeFormat = new DefaultReportSplitTypeFormat {}
  trait DefaultReportSplitTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.SplitType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.SplitType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.SplitType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.SplitType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.SplitType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportBandFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Band] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Band] =
      phrase(safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "property")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "printWhenExpression")) ~ 
      safeRep(((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "break")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Break](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "line")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Line](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "rectangle")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Rectangle](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "ellipse")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Ellipse](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "image")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Image](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "staticText")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StaticText](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "textField")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TextField](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "subreport")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Subreport](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "pieChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PieChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "pie3DChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Pie3DChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "barChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BarChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "bar3DChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Bar3DChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xyBarChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XyBarChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "stackedBarChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StackedBarChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "stackedBar3DChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StackedBar3DChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "lineChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LineChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xyLineChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XyLineChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "areaChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.AreaChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xyAreaChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XyAreaChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "scatterChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ScatterChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "bubbleChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BubbleChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "timeSeriesChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TimeSeriesChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "highLowChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HighLowChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "candlestickChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CandlestickChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "meterChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.MeterChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "thermometerChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ThermometerChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "multiAxisChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.MultiAxisChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "stackedAreaChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StackedAreaChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "ganttChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.GanttChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "elementGroup")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ElementGroup](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "crosstab")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Crosstab](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "frame")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Frame](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "componentElement")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ComponentElement](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "genericElement")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.GenericElement](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.Band(p1 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Property](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PrintWhenExpression](_, scalaxb.ElemName(node) :: stack) },
        p3,
        scala.collection.immutable.ListMap(List(
        (node \ "@height").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("0"), scalaxb.ElemName(node) :: stack))) map { "@height" -> _ },
        (node \ "@isSplitAllowed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsSplitAllowed](x, scalaxb.ElemName(node) :: stack)) } map { "@isSplitAllowed" -> _ },
        (node \ "@splitType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.SplitType](x, scalaxb.ElemName(node) :: stack)) } map { "@splitType" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Band, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@height", _) => if (__obj.attr_height.toString != "0") attr = scala.xml.Attribute(null, "height", __obj.attr_height.toString, attr)
        case ("@isSplitAllowed", _) => __obj.attr_isSplitAllowed foreach { x => attr = scala.xml.Attribute(null, "isSplitAllowed", x.toString, attr) }
        case ("@splitType", _) => __obj.attr_splitType foreach { x => attr = scala.xml.Attribute(null, "splitType", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Band, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.property flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Property](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("property"), __scope, false) },
        __obj.printWhenExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.PrintWhenExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("printWhenExpression"), __scope, false) } getOrElse {Nil},
        __obj.bandoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.report.BandOption]](x, x.namespace, x.key, __scope, false) })

  }

  def buildReportEvaluationTimeFormat = new DefaultReportEvaluationTimeFormat {}
  trait DefaultReportEvaluationTimeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.EvaluationTime] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.EvaluationTime] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.EvaluationTime.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.EvaluationTime.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.EvaluationTime, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportPartFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Part] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Part] =
      phrase(safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "property")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "printWhenExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "partNameExpression")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "partComponent")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.iofficecorp.jasperserver.pumped.report.Part(p1 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Property](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PrintWhenExpression](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PartNameExpression](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PartComponentType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@uuid").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@uuid" -> _ },
        (node \ "@evaluationTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.EvaluationTime](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationTime" -> _ },
        (node \ "@evaluationGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationGroup" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Part, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@uuid", _) => __obj.attr_uuid foreach { x => attr = scala.xml.Attribute(null, "uuid", x.toString, attr) }
        case ("@evaluationTime", _) => __obj.attr_evaluationTime foreach { x => attr = scala.xml.Attribute(null, "evaluationTime", x.toString, attr) }
        case ("@evaluationGroup", _) => __obj.attr_evaluationGroup foreach { x => attr = scala.xml.Attribute(null, "evaluationGroup", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Part, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.property flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Property](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("property"), __scope, false) },
        __obj.printWhenExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.PrintWhenExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("printWhenExpression"), __scope, false) } getOrElse {Nil},
        __obj.partNameExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.PartNameExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("partNameExpression"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.PartComponentType](__obj.partComponent, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("partComponent"), __scope, false))

  }

  trait DefaultReportPartNameExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.PartNameExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.PartNameExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.PartNameExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.PartNameExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportPartComponentTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.PartComponentType] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.report.PartComponentType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.PartComponentType] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.report.PartComponentType())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.PartComponentType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  def buildReportTypeTypeFormat = new DefaultReportTypeTypeFormat {}
  trait DefaultReportTypeTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TypeType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.TypeType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.TypeType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.TypeType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.TypeType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportBreakFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Break] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Break] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "reportElement")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.Break(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ReportElement](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TypeType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TypeType](scala.xml.Text("Page"), scalaxb.ElemName(node) :: stack))) map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Break, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => if (__obj.attr_type.toString != "Page") attr = scala.xml.Attribute(null, "type", __obj.attr_type.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Break, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ReportElement](__obj.reportElement, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("reportElement"), __scope, false))

  }

  def buildReportDirectionFormat = new DefaultReportDirectionFormat {}
  trait DefaultReportDirectionFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Direction] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.Direction] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.Direction.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.Direction.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.Direction, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportLineFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Line] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Line] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "reportElement")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "graphicElement")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.Line(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ReportElement](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.GraphicElement](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@direction").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Direction](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Direction](scala.xml.Text("TopDown"), scalaxb.ElemName(node) :: stack))) map { "@direction" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Line, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@direction", _) => if (__obj.attr_direction.toString != "TopDown") attr = scala.xml.Attribute(null, "direction", __obj.attr_direction.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Line, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ReportElement](__obj.reportElement, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("reportElement"), __scope, false),
        __obj.graphicElement map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.GraphicElement](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("graphicElement"), __scope, false) } getOrElse {Nil})

  }

  def buildReportPositionTypeFormat = new DefaultReportPositionTypeFormat {}
  trait DefaultReportPositionTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.PositionType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.PositionType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.PositionType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.PositionType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.PositionType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportStretchTypeFormat = new DefaultReportStretchTypeFormat {}
  trait DefaultReportStretchTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.StretchType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.StretchType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.StretchType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.StretchType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.StretchType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsPrintRepeatedValuesFormat = new DefaultReportIsPrintRepeatedValuesFormat {}
  trait DefaultReportIsPrintRepeatedValuesFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsPrintRepeatedValues] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsPrintRepeatedValues] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsPrintRepeatedValues.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsPrintRepeatedValues.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsPrintRepeatedValues, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportModeTypeFormat = new DefaultReportModeTypeFormat {}
  trait DefaultReportModeTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ModeType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.ModeType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.ModeType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.ModeType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.ModeType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsRemoveLineWhenBlankFormat = new DefaultReportIsRemoveLineWhenBlankFormat {}
  trait DefaultReportIsRemoveLineWhenBlankFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsRemoveLineWhenBlank] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsRemoveLineWhenBlank] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsRemoveLineWhenBlank.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsRemoveLineWhenBlank.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsRemoveLineWhenBlank, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsPrintInFirstWholeBandFormat = new DefaultReportIsPrintInFirstWholeBandFormat {}
  trait DefaultReportIsPrintInFirstWholeBandFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsPrintInFirstWholeBand] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsPrintInFirstWholeBand] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsPrintInFirstWholeBand.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsPrintInFirstWholeBand.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsPrintInFirstWholeBand, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsPrintWhenDetailOverflowsFormat = new DefaultReportIsPrintWhenDetailOverflowsFormat {}
  trait DefaultReportIsPrintWhenDetailOverflowsFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsPrintWhenDetailOverflows] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsPrintWhenDetailOverflows] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsPrintWhenDetailOverflows.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsPrintWhenDetailOverflows.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsPrintWhenDetailOverflows, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportReportElementFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ReportElement] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ReportElement] =
      phrase(safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "property")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "propertyExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "printWhenExpression")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.ReportElement(p1 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Property](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PropertyExpression](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PrintWhenExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@uuid").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@uuid" -> _ },
        (node \ "@key").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@key" -> _ },
        (node \ "@style").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@style" -> _ },
        (node \ "@positionType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PositionType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PositionType](scala.xml.Text("FixRelativeToTop"), scalaxb.ElemName(node) :: stack))) map { "@positionType" -> _ },
        (node \ "@stretchType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StretchType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StretchType](scala.xml.Text("NoStretch"), scalaxb.ElemName(node) :: stack))) map { "@stretchType" -> _ },
        (node \ "@isPrintRepeatedValues").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsPrintRepeatedValues](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsPrintRepeatedValues](scala.xml.Text("true"), scalaxb.ElemName(node) :: stack))) map { "@isPrintRepeatedValues" -> _ },
        (node \ "@mode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ModeType](x, scalaxb.ElemName(node) :: stack)) } map { "@mode" -> _ },
        (node \ "@x").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@x" -> _ },
        (node \ "@y").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@y" -> _ },
        (node \ "@width").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@width" -> _ },
        (node \ "@height").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@height" -> _ },
        (node \ "@isRemoveLineWhenBlank").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsRemoveLineWhenBlank](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsRemoveLineWhenBlank](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@isRemoveLineWhenBlank" -> _ },
        (node \ "@isPrintInFirstWholeBand").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsPrintInFirstWholeBand](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsPrintInFirstWholeBand](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@isPrintInFirstWholeBand" -> _ },
        (node \ "@isPrintWhenDetailOverflows").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsPrintWhenDetailOverflows](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsPrintWhenDetailOverflows](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@isPrintWhenDetailOverflows" -> _ },
        (node \ "@printWhenGroupChanges").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@printWhenGroupChanges" -> _ },
        (node \ "@forecolor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@forecolor" -> _ },
        (node \ "@backcolor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@backcolor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.ReportElement, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@uuid", _) => __obj.attr_uuid foreach { x => attr = scala.xml.Attribute(null, "uuid", x.toString, attr) }
        case ("@key", _) => __obj.attr_key foreach { x => attr = scala.xml.Attribute(null, "key", x.toString, attr) }
        case ("@style", _) => __obj.attr_style foreach { x => attr = scala.xml.Attribute(null, "style", x.toString, attr) }
        case ("@positionType", _) => if (__obj.attr_positionType.toString != "FixRelativeToTop") attr = scala.xml.Attribute(null, "positionType", __obj.attr_positionType.toString, attr)
        case ("@stretchType", _) => if (__obj.attr_stretchType.toString != "NoStretch") attr = scala.xml.Attribute(null, "stretchType", __obj.attr_stretchType.toString, attr)
        case ("@isPrintRepeatedValues", _) => if (__obj.attr_isPrintRepeatedValues.toString != "true") attr = scala.xml.Attribute(null, "isPrintRepeatedValues", __obj.attr_isPrintRepeatedValues.toString, attr)
        case ("@mode", _) => __obj.attr_mode foreach { x => attr = scala.xml.Attribute(null, "mode", x.toString, attr) }
        case ("@x", _) => attr = scala.xml.Attribute(null, "x", __obj.attr_x.toString, attr)
        case ("@y", _) => attr = scala.xml.Attribute(null, "y", __obj.attr_y.toString, attr)
        case ("@width", _) => attr = scala.xml.Attribute(null, "width", __obj.attr_width.toString, attr)
        case ("@height", _) => attr = scala.xml.Attribute(null, "height", __obj.attr_height.toString, attr)
        case ("@isRemoveLineWhenBlank", _) => if (__obj.attr_isRemoveLineWhenBlank.toString != "false") attr = scala.xml.Attribute(null, "isRemoveLineWhenBlank", __obj.attr_isRemoveLineWhenBlank.toString, attr)
        case ("@isPrintInFirstWholeBand", _) => if (__obj.attr_isPrintInFirstWholeBand.toString != "false") attr = scala.xml.Attribute(null, "isPrintInFirstWholeBand", __obj.attr_isPrintInFirstWholeBand.toString, attr)
        case ("@isPrintWhenDetailOverflows", _) => if (__obj.attr_isPrintWhenDetailOverflows.toString != "false") attr = scala.xml.Attribute(null, "isPrintWhenDetailOverflows", __obj.attr_isPrintWhenDetailOverflows.toString, attr)
        case ("@printWhenGroupChanges", _) => __obj.attr_printWhenGroupChanges foreach { x => attr = scala.xml.Attribute(null, "printWhenGroupChanges", x.toString, attr) }
        case ("@forecolor", _) => __obj.attr_forecolor foreach { x => attr = scala.xml.Attribute(null, "forecolor", x.toString, attr) }
        case ("@backcolor", _) => __obj.attr_backcolor foreach { x => attr = scala.xml.Attribute(null, "backcolor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ReportElement, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.property flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Property](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("property"), __scope, false) },
        __obj.propertyExpression flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.PropertyExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("propertyExpression"), __scope, false) },
        __obj.printWhenExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.PrintWhenExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("printWhenExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportPrintWhenExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.PrintWhenExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.PrintWhenExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.PrintWhenExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.PrintWhenExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  def buildReportStretchTypeTypeFormat = new DefaultReportStretchTypeTypeFormat {}
  trait DefaultReportStretchTypeTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.StretchTypeType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.StretchTypeType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.StretchTypeType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.StretchTypeType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.StretchTypeType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportPenType2Format = new DefaultReportPenType2Format {}
  trait DefaultReportPenType2Format extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.PenType2] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.PenType2] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.PenType2.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.PenType2.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.PenType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportFillTypeFormat = new DefaultReportFillTypeFormat {}
  trait DefaultReportFillTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.FillType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.FillType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.FillType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.FillType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.FillType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportGraphicElementFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.GraphicElement] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.GraphicElement] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "pen")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.GraphicElement(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Pen](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@stretchType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StretchTypeType](x, scalaxb.ElemName(node) :: stack)) } map { "@stretchType" -> _ },
        (node \ "@pen").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PenType2](x, scalaxb.ElemName(node) :: stack)) } map { "@pen" -> _ },
        (node \ "@fill").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.FillType](x, scalaxb.ElemName(node) :: stack)) } map { "@fill" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.GraphicElement, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@stretchType", _) => __obj.attr_stretchType foreach { x => attr = scala.xml.Attribute(null, "stretchType", x.toString, attr) }
        case ("@pen", _) => __obj.attr_pen foreach { x => attr = scala.xml.Attribute(null, "pen", x.toString, attr) }
        case ("@fill", _) => __obj.attr_fill foreach { x => attr = scala.xml.Attribute(null, "fill", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.GraphicElement, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.pen map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Pen](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("pen"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportRectangleFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Rectangle] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Rectangle] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "reportElement")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "graphicElement")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.Rectangle(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ReportElement](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.GraphicElement](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@radius").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@radius" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Rectangle, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@radius", _) => __obj.attr_radius foreach { x => attr = scala.xml.Attribute(null, "radius", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Rectangle, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ReportElement](__obj.reportElement, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("reportElement"), __scope, false),
        __obj.graphicElement map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.GraphicElement](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("graphicElement"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportEllipseFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Ellipse] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Ellipse] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "reportElement")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "graphicElement")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.Ellipse(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ReportElement](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.GraphicElement](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Ellipse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ReportElement](__obj.reportElement, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("reportElement"), __scope, false),
        __obj.graphicElement map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.GraphicElement](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("graphicElement"), __scope, false) } getOrElse {Nil})

  }

  def buildReportScaleImageTypeFormat = new DefaultReportScaleImageTypeFormat {}
  trait DefaultReportScaleImageTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ScaleImageType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.ScaleImageType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.ScaleImageType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.ScaleImageType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.ScaleImageType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportHAlignTypeFormat = new DefaultReportHAlignTypeFormat {}
  trait DefaultReportHAlignTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.HAlignType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.HAlignType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.HAlignType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.HAlignType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.HAlignType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportVAlignTypeFormat = new DefaultReportVAlignTypeFormat {}
  trait DefaultReportVAlignTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.VAlignType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.VAlignType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.VAlignType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.VAlignType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.VAlignType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsUsingCacheFormat = new DefaultReportIsUsingCacheFormat {}
  trait DefaultReportIsUsingCacheFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsUsingCache] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsUsingCache] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsUsingCache.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsUsingCache.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsUsingCache, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsLazyFormat = new DefaultReportIsLazyFormat {}
  trait DefaultReportIsLazyFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsLazy] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsLazy] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsLazy.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsLazy.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsLazy, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportOnErrorTypeFormat = new DefaultReportOnErrorTypeFormat {}
  trait DefaultReportOnErrorTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.OnErrorType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.OnErrorType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.OnErrorType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.OnErrorType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.OnErrorType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportImageFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Image] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Image] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "reportElement")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "box")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "graphicElement")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "imageExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "anchorNameExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkReferenceExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkWhenExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkAnchorExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkPageExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkTooltipExpression")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkParameter")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      com.iofficecorp.jasperserver.pumped.report.Image(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ReportElement](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Box](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.GraphicElement](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ImageExpression](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.AnchorNameExpression](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkReferenceExpression](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkWhenExpression](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkAnchorExpression](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkPageExpression](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkTooltipExpression](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkParameter](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@scaleImage").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ScaleImageType](x, scalaxb.ElemName(node) :: stack)) } map { "@scaleImage" -> _ },
        (node \ "@hAlign").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HAlignType](x, scalaxb.ElemName(node) :: stack)) } map { "@hAlign" -> _ },
        (node \ "@vAlign").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.VAlignType](x, scalaxb.ElemName(node) :: stack)) } map { "@vAlign" -> _ },
        (node \ "@isUsingCache").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsUsingCache](x, scalaxb.ElemName(node) :: stack)) } map { "@isUsingCache" -> _ },
        (node \ "@isLazy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsLazy](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsLazy](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@isLazy" -> _ },
        (node \ "@onErrorType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.OnErrorType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.OnErrorType](scala.xml.Text("Error"), scalaxb.ElemName(node) :: stack))) map { "@onErrorType" -> _ },
        (node \ "@evaluationTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ComplexEvaluationTime](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ComplexEvaluationTime](scala.xml.Text("Now"), scalaxb.ElemName(node) :: stack))) map { "@evaluationTime" -> _ },
        (node \ "@evaluationGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationGroup" -> _ },
        (node \ "@hyperlinkType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@hyperlinkType" -> _ },
        (node \ "@hyperlinkTarget").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@hyperlinkTarget" -> _ },
        (node \ "@bookmarkLevel").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("0"), scalaxb.ElemName(node) :: stack))) map { "@bookmarkLevel" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Image, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@scaleImage", _) => __obj.attr_scaleImage foreach { x => attr = scala.xml.Attribute(null, "scaleImage", x.toString, attr) }
        case ("@hAlign", _) => __obj.attr_hAlign foreach { x => attr = scala.xml.Attribute(null, "hAlign", x.toString, attr) }
        case ("@vAlign", _) => __obj.attr_vAlign foreach { x => attr = scala.xml.Attribute(null, "vAlign", x.toString, attr) }
        case ("@isUsingCache", _) => __obj.attr_isUsingCache foreach { x => attr = scala.xml.Attribute(null, "isUsingCache", x.toString, attr) }
        case ("@isLazy", _) => if (__obj.attr_isLazy.toString != "false") attr = scala.xml.Attribute(null, "isLazy", __obj.attr_isLazy.toString, attr)
        case ("@onErrorType", _) => if (__obj.attr_onErrorType.toString != "Error") attr = scala.xml.Attribute(null, "onErrorType", __obj.attr_onErrorType.toString, attr)
        case ("@evaluationTime", _) => if (__obj.attr_evaluationTime.toString != "Now") attr = scala.xml.Attribute(null, "evaluationTime", __obj.attr_evaluationTime.toString, attr)
        case ("@evaluationGroup", _) => __obj.attr_evaluationGroup foreach { x => attr = scala.xml.Attribute(null, "evaluationGroup", x.toString, attr) }
        case ("@hyperlinkType", _) => __obj.attr_hyperlinkType foreach { x => attr = scala.xml.Attribute(null, "hyperlinkType", x.toString, attr) }
        case ("@hyperlinkTarget", _) => __obj.attr_hyperlinkTarget foreach { x => attr = scala.xml.Attribute(null, "hyperlinkTarget", x.toString, attr) }
        case ("@bookmarkLevel", _) => if (__obj.attr_bookmarkLevel.toString != "0") attr = scala.xml.Attribute(null, "bookmarkLevel", __obj.attr_bookmarkLevel.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Image, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ReportElement](__obj.reportElement, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("reportElement"), __scope, false),
        __obj.box map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Box](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("box"), __scope, false) } getOrElse {Nil},
        __obj.graphicElement map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.GraphicElement](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("graphicElement"), __scope, false) } getOrElse {Nil},
        __obj.imageExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ImageExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("imageExpression"), __scope, false) } getOrElse {Nil},
        __obj.anchorNameExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.AnchorNameExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("anchorNameExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkReferenceExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkReferenceExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkReferenceExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkWhenExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkWhenExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkWhenExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkAnchorExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkAnchorExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkAnchorExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkPageExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkPageExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkPageExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkTooltipExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkTooltipExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkTooltipExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkParameter flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkParameter](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkParameter"), __scope, false) })

  }

  trait DefaultReportImageExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ImageExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ImageExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.ImageExpression(Seq.concat(p1.toList),
        scala.collection.immutable.ListMap(List(
        (node \ "@class").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("java.lang.String"), scalaxb.ElemName(node) :: stack))) map { "@class" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.ImageExpression, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@class", _) => if (__obj.attr_class.toString != "java.lang.String") attr = scala.xml.Attribute(null, "class", __obj.attr_class.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ImageExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  def buildReportBorderTypeFormat = new DefaultReportBorderTypeFormat {}
  trait DefaultReportBorderTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.BorderType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.BorderType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.BorderType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.BorderType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.BorderType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportTopBorderTypeFormat = new DefaultReportTopBorderTypeFormat {}
  trait DefaultReportTopBorderTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TopBorderType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.TopBorderType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.TopBorderType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.TopBorderType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.TopBorderType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportLeftBorderTypeFormat = new DefaultReportLeftBorderTypeFormat {}
  trait DefaultReportLeftBorderTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LeftBorderType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.LeftBorderType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.LeftBorderType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.LeftBorderType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.LeftBorderType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportBottomBorderTypeFormat = new DefaultReportBottomBorderTypeFormat {}
  trait DefaultReportBottomBorderTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.BottomBorderType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.BottomBorderType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.BottomBorderType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.BottomBorderType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.BottomBorderType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportRightBorderTypeFormat = new DefaultReportRightBorderTypeFormat {}
  trait DefaultReportRightBorderTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.RightBorderType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.RightBorderType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.RightBorderType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.RightBorderType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.RightBorderType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportBoxFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Box] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Box] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "pen")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "topPen")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "leftPen")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "bottomPen")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "rightPen")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.iofficecorp.jasperserver.pumped.report.Box(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Pen](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TopPen](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LeftPen](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BottomPen](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.RightPen](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@border").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BorderType](x, scalaxb.ElemName(node) :: stack)) } map { "@border" -> _ },
        (node \ "@borderColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@borderColor" -> _ },
        (node \ "@padding").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@padding" -> _ },
        (node \ "@topBorder").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TopBorderType](x, scalaxb.ElemName(node) :: stack)) } map { "@topBorder" -> _ },
        (node \ "@topBorderColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@topBorderColor" -> _ },
        (node \ "@topPadding").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@topPadding" -> _ },
        (node \ "@leftBorder").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LeftBorderType](x, scalaxb.ElemName(node) :: stack)) } map { "@leftBorder" -> _ },
        (node \ "@leftBorderColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@leftBorderColor" -> _ },
        (node \ "@leftPadding").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@leftPadding" -> _ },
        (node \ "@bottomBorder").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BottomBorderType](x, scalaxb.ElemName(node) :: stack)) } map { "@bottomBorder" -> _ },
        (node \ "@bottomBorderColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@bottomBorderColor" -> _ },
        (node \ "@bottomPadding").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@bottomPadding" -> _ },
        (node \ "@rightBorder").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.RightBorderType](x, scalaxb.ElemName(node) :: stack)) } map { "@rightBorder" -> _ },
        (node \ "@rightBorderColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@rightBorderColor" -> _ },
        (node \ "@rightPadding").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@rightPadding" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Box, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@border", _) => __obj.attr_border foreach { x => attr = scala.xml.Attribute(null, "border", x.toString, attr) }
        case ("@borderColor", _) => __obj.attr_borderColor foreach { x => attr = scala.xml.Attribute(null, "borderColor", x.toString, attr) }
        case ("@padding", _) => __obj.attr_padding foreach { x => attr = scala.xml.Attribute(null, "padding", x.toString, attr) }
        case ("@topBorder", _) => __obj.attr_topBorder foreach { x => attr = scala.xml.Attribute(null, "topBorder", x.toString, attr) }
        case ("@topBorderColor", _) => __obj.attr_topBorderColor foreach { x => attr = scala.xml.Attribute(null, "topBorderColor", x.toString, attr) }
        case ("@topPadding", _) => __obj.attr_topPadding foreach { x => attr = scala.xml.Attribute(null, "topPadding", x.toString, attr) }
        case ("@leftBorder", _) => __obj.attr_leftBorder foreach { x => attr = scala.xml.Attribute(null, "leftBorder", x.toString, attr) }
        case ("@leftBorderColor", _) => __obj.attr_leftBorderColor foreach { x => attr = scala.xml.Attribute(null, "leftBorderColor", x.toString, attr) }
        case ("@leftPadding", _) => __obj.attr_leftPadding foreach { x => attr = scala.xml.Attribute(null, "leftPadding", x.toString, attr) }
        case ("@bottomBorder", _) => __obj.attr_bottomBorder foreach { x => attr = scala.xml.Attribute(null, "bottomBorder", x.toString, attr) }
        case ("@bottomBorderColor", _) => __obj.attr_bottomBorderColor foreach { x => attr = scala.xml.Attribute(null, "bottomBorderColor", x.toString, attr) }
        case ("@bottomPadding", _) => __obj.attr_bottomPadding foreach { x => attr = scala.xml.Attribute(null, "bottomPadding", x.toString, attr) }
        case ("@rightBorder", _) => __obj.attr_rightBorder foreach { x => attr = scala.xml.Attribute(null, "rightBorder", x.toString, attr) }
        case ("@rightBorderColor", _) => __obj.attr_rightBorderColor foreach { x => attr = scala.xml.Attribute(null, "rightBorderColor", x.toString, attr) }
        case ("@rightPadding", _) => __obj.attr_rightPadding foreach { x => attr = scala.xml.Attribute(null, "rightPadding", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Box, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.pen map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Pen](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("pen"), __scope, false) } getOrElse {Nil},
        __obj.topPen map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.TopPen](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("topPen"), __scope, false) } getOrElse {Nil},
        __obj.leftPen map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.LeftPen](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("leftPen"), __scope, false) } getOrElse {Nil},
        __obj.bottomPen map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.BottomPen](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("bottomPen"), __scope, false) } getOrElse {Nil},
        __obj.rightPen map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.RightPen](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("rightPen"), __scope, false) } getOrElse {Nil})

  }

  def buildReportLineStyleTypeFormat = new DefaultReportLineStyleTypeFormat {}
  trait DefaultReportLineStyleTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LineStyleType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.LineStyleType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.LineStyleType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.LineStyleType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.LineStyleType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportTopPenFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TopPen] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.report.TopPen] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.TopPen] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.report.TopPen(scala.collection.immutable.ListMap(List(
        (node \ "@lineWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lineWidth" -> _ },
        (node \ "@lineStyle").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LineStyleType](x, scalaxb.ElemName(node) :: stack)) } map { "@lineStyle" -> _ },
        (node \ "@lineColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lineColor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.TopPen, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@lineWidth", _) => __obj.attr_lineWidth foreach { x => attr = scala.xml.Attribute(null, "lineWidth", x.toString, attr) }
        case ("@lineStyle", _) => __obj.attr_lineStyle foreach { x => attr = scala.xml.Attribute(null, "lineStyle", x.toString, attr) }
        case ("@lineColor", _) => __obj.attr_lineColor foreach { x => attr = scala.xml.Attribute(null, "lineColor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.TopPen, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  def buildReportLineStyleType2Format = new DefaultReportLineStyleType2Format {}
  trait DefaultReportLineStyleType2Format extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LineStyleType2] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.LineStyleType2] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.LineStyleType2.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.LineStyleType2.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.LineStyleType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportLeftPenFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LeftPen] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.report.LeftPen] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.LeftPen] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.report.LeftPen(scala.collection.immutable.ListMap(List(
        (node \ "@lineWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lineWidth" -> _ },
        (node \ "@lineStyle").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LineStyleType2](x, scalaxb.ElemName(node) :: stack)) } map { "@lineStyle" -> _ },
        (node \ "@lineColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lineColor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.LeftPen, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@lineWidth", _) => __obj.attr_lineWidth foreach { x => attr = scala.xml.Attribute(null, "lineWidth", x.toString, attr) }
        case ("@lineStyle", _) => __obj.attr_lineStyle foreach { x => attr = scala.xml.Attribute(null, "lineStyle", x.toString, attr) }
        case ("@lineColor", _) => __obj.attr_lineColor foreach { x => attr = scala.xml.Attribute(null, "lineColor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.LeftPen, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  def buildReportLineStyleType3Format = new DefaultReportLineStyleType3Format {}
  trait DefaultReportLineStyleType3Format extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LineStyleType3] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.LineStyleType3] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.LineStyleType3.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.LineStyleType3.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.LineStyleType3, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportBottomPenFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.BottomPen] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.report.BottomPen] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.BottomPen] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.report.BottomPen(scala.collection.immutable.ListMap(List(
        (node \ "@lineWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lineWidth" -> _ },
        (node \ "@lineStyle").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LineStyleType3](x, scalaxb.ElemName(node) :: stack)) } map { "@lineStyle" -> _ },
        (node \ "@lineColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lineColor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.BottomPen, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@lineWidth", _) => __obj.attr_lineWidth foreach { x => attr = scala.xml.Attribute(null, "lineWidth", x.toString, attr) }
        case ("@lineStyle", _) => __obj.attr_lineStyle foreach { x => attr = scala.xml.Attribute(null, "lineStyle", x.toString, attr) }
        case ("@lineColor", _) => __obj.attr_lineColor foreach { x => attr = scala.xml.Attribute(null, "lineColor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.BottomPen, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  def buildReportLineStyleType4Format = new DefaultReportLineStyleType4Format {}
  trait DefaultReportLineStyleType4Format extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LineStyleType4] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.LineStyleType4] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.LineStyleType4.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.LineStyleType4.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.LineStyleType4, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportRightPenFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.RightPen] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.report.RightPen] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.RightPen] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.report.RightPen(scala.collection.immutable.ListMap(List(
        (node \ "@lineWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lineWidth" -> _ },
        (node \ "@lineStyle").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LineStyleType4](x, scalaxb.ElemName(node) :: stack)) } map { "@lineStyle" -> _ },
        (node \ "@lineColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lineColor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.RightPen, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@lineWidth", _) => __obj.attr_lineWidth foreach { x => attr = scala.xml.Attribute(null, "lineWidth", x.toString, attr) }
        case ("@lineStyle", _) => __obj.attr_lineStyle foreach { x => attr = scala.xml.Attribute(null, "lineStyle", x.toString, attr) }
        case ("@lineColor", _) => __obj.attr_lineColor foreach { x => attr = scala.xml.Attribute(null, "lineColor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.RightPen, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultReportAnchorNameExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.AnchorNameExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.AnchorNameExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.AnchorNameExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.AnchorNameExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportHyperlinkReferenceExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.HyperlinkReferenceExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.HyperlinkReferenceExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.HyperlinkReferenceExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.HyperlinkReferenceExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportHyperlinkWhenExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.HyperlinkWhenExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.HyperlinkWhenExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.HyperlinkWhenExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.HyperlinkWhenExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportHyperlinkAnchorExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.HyperlinkAnchorExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.HyperlinkAnchorExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.HyperlinkAnchorExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.HyperlinkAnchorExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportHyperlinkPageExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.HyperlinkPageExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.HyperlinkPageExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.HyperlinkPageExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.HyperlinkPageExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportHyperlinkTooltipExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.HyperlinkTooltipExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.HyperlinkTooltipExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.HyperlinkTooltipExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.HyperlinkTooltipExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportHyperlinkParameterFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.HyperlinkParameter] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.HyperlinkParameter] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkParameterExpression")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.HyperlinkParameter(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkParameterExpression](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.HyperlinkParameter, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.attr_name.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.HyperlinkParameter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkParameterExpression](__obj.hyperlinkParameterExpression, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkParameterExpression"), __scope, false))

  }

  trait DefaultReportHyperlinkParameterExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.HyperlinkParameterExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.HyperlinkParameterExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.HyperlinkParameterExpression(Seq.concat(p1.toList),
        scala.collection.immutable.ListMap(List(
        (node \ "@class").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("java.lang.String"), scalaxb.ElemName(node) :: stack))) map { "@class" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.HyperlinkParameterExpression, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@class", _) => if (__obj.attr_class.toString != "java.lang.String") attr = scala.xml.Attribute(null, "class", __obj.attr_class.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.HyperlinkParameterExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportStaticTextFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.StaticText] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.StaticText] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "reportElement")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "box")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "textElement")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "text")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.iofficecorp.jasperserver.pumped.report.StaticText(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ReportElement](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Box](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TextElement](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Text](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.StaticText, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ReportElement](__obj.reportElement, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("reportElement"), __scope, false),
        __obj.box map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Box](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("box"), __scope, false) } getOrElse {Nil},
        __obj.textElement map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.TextElement](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("textElement"), __scope, false) } getOrElse {Nil},
        __obj.text map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Text](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("text"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportTextFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Text] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Text] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.Text(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Text, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  def buildReportTextAlignmentFormat = new DefaultReportTextAlignmentFormat {}
  trait DefaultReportTextAlignmentFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TextAlignment] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.TextAlignment] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.TextAlignment.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.TextAlignment.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.TextAlignment, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportVerticalAlignmentFormat = new DefaultReportVerticalAlignmentFormat {}
  trait DefaultReportVerticalAlignmentFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.VerticalAlignment] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.VerticalAlignment] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.VerticalAlignment.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.VerticalAlignment.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.VerticalAlignment, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportRotationTypeFormat = new DefaultReportRotationTypeFormat {}
  trait DefaultReportRotationTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.RotationType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.RotationType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.RotationType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.RotationType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.RotationType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportLineSpacingType2Format = new DefaultReportLineSpacingType2Format {}
  trait DefaultReportLineSpacingType2Format extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.LineSpacingType2] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.LineSpacingType2] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.LineSpacingType2.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.LineSpacingType2.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.LineSpacingType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsStyledTextTypeFormat = new DefaultReportIsStyledTextTypeFormat {}
  trait DefaultReportIsStyledTextTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsStyledTextType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsStyledTextType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsStyledTextType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsStyledTextType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsStyledTextType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportTextElementFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.TextElement] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.TextElement] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "font")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "paragraph")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.TextElement(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Font](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Paragraph](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@textAlignment").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TextAlignment](x, scalaxb.ElemName(node) :: stack)) } map { "@textAlignment" -> _ },
        (node \ "@verticalAlignment").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.VerticalAlignment](x, scalaxb.ElemName(node) :: stack)) } map { "@verticalAlignment" -> _ },
        (node \ "@rotation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.RotationType](x, scalaxb.ElemName(node) :: stack)) } map { "@rotation" -> _ },
        (node \ "@lineSpacing").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LineSpacingType2](x, scalaxb.ElemName(node) :: stack)) } map { "@lineSpacing" -> _ },
        (node \ "@isStyledText").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsStyledTextType](x, scalaxb.ElemName(node) :: stack)) } map { "@isStyledText" -> _ },
        (node \ "@markup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@markup" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.TextElement, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@textAlignment", _) => __obj.attr_textAlignment foreach { x => attr = scala.xml.Attribute(null, "textAlignment", x.toString, attr) }
        case ("@verticalAlignment", _) => __obj.attr_verticalAlignment foreach { x => attr = scala.xml.Attribute(null, "verticalAlignment", x.toString, attr) }
        case ("@rotation", _) => __obj.attr_rotation foreach { x => attr = scala.xml.Attribute(null, "rotation", x.toString, attr) }
        case ("@lineSpacing", _) => __obj.attr_lineSpacing foreach { x => attr = scala.xml.Attribute(null, "lineSpacing", x.toString, attr) }
        case ("@isStyledText", _) => __obj.attr_isStyledText foreach { x => attr = scala.xml.Attribute(null, "isStyledText", x.toString, attr) }
        case ("@markup", _) => __obj.attr_markup foreach { x => attr = scala.xml.Attribute(null, "markup", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.TextElement, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.font map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Font](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("font"), __scope, false) } getOrElse {Nil},
        __obj.paragraph map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Paragraph](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("paragraph"), __scope, false) } getOrElse {Nil})

  }

  def buildReportIsBoldType2Format = new DefaultReportIsBoldType2Format {}
  trait DefaultReportIsBoldType2Format extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsBoldType2] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsBoldType2] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsBoldType2.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsBoldType2.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsBoldType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsItalicType2Format = new DefaultReportIsItalicType2Format {}
  trait DefaultReportIsItalicType2Format extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsItalicType2] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsItalicType2] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsItalicType2.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsItalicType2.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsItalicType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsUnderlineType2Format = new DefaultReportIsUnderlineType2Format {}
  trait DefaultReportIsUnderlineType2Format extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsUnderlineType2] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsUnderlineType2] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsUnderlineType2.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsUnderlineType2.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsUnderlineType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsStrikeThroughType2Format = new DefaultReportIsStrikeThroughType2Format {}
  trait DefaultReportIsStrikeThroughType2Format extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsStrikeThroughType2] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsStrikeThroughType2] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsStrikeThroughType2.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsStrikeThroughType2.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsStrikeThroughType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsPdfEmbeddedType2Format = new DefaultReportIsPdfEmbeddedType2Format {}
  trait DefaultReportIsPdfEmbeddedType2Format extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsPdfEmbeddedType2] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsPdfEmbeddedType2] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsPdfEmbeddedType2.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsPdfEmbeddedType2.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsPdfEmbeddedType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportFontFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Font] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.report.Font] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.Font] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.report.Font(scala.collection.immutable.ListMap(List(
        (node \ "@reportFont").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@reportFont" -> _ },
        (node \ "@fontName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@fontName" -> _ },
        (node \ "@size").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@size" -> _ },
        (node \ "@isBold").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsBoldType2](x, scalaxb.ElemName(node) :: stack)) } map { "@isBold" -> _ },
        (node \ "@isItalic").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsItalicType2](x, scalaxb.ElemName(node) :: stack)) } map { "@isItalic" -> _ },
        (node \ "@isUnderline").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsUnderlineType2](x, scalaxb.ElemName(node) :: stack)) } map { "@isUnderline" -> _ },
        (node \ "@isStrikeThrough").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsStrikeThroughType2](x, scalaxb.ElemName(node) :: stack)) } map { "@isStrikeThrough" -> _ },
        (node \ "@pdfFontName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@pdfFontName" -> _ },
        (node \ "@pdfEncoding").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@pdfEncoding" -> _ },
        (node \ "@isPdfEmbedded").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsPdfEmbeddedType2](x, scalaxb.ElemName(node) :: stack)) } map { "@isPdfEmbedded" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Font, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@reportFont", _) => __obj.attr_reportFont foreach { x => attr = scala.xml.Attribute(null, "reportFont", x.toString, attr) }
        case ("@fontName", _) => __obj.attr_fontName foreach { x => attr = scala.xml.Attribute(null, "fontName", x.toString, attr) }
        case ("@size", _) => __obj.attr_size foreach { x => attr = scala.xml.Attribute(null, "size", x.toString, attr) }
        case ("@isBold", _) => __obj.attr_isBold foreach { x => attr = scala.xml.Attribute(null, "isBold", x.toString, attr) }
        case ("@isItalic", _) => __obj.attr_isItalic foreach { x => attr = scala.xml.Attribute(null, "isItalic", x.toString, attr) }
        case ("@isUnderline", _) => __obj.attr_isUnderline foreach { x => attr = scala.xml.Attribute(null, "isUnderline", x.toString, attr) }
        case ("@isStrikeThrough", _) => __obj.attr_isStrikeThrough foreach { x => attr = scala.xml.Attribute(null, "isStrikeThrough", x.toString, attr) }
        case ("@pdfFontName", _) => __obj.attr_pdfFontName foreach { x => attr = scala.xml.Attribute(null, "pdfFontName", x.toString, attr) }
        case ("@pdfEncoding", _) => __obj.attr_pdfEncoding foreach { x => attr = scala.xml.Attribute(null, "pdfEncoding", x.toString, attr) }
        case ("@isPdfEmbedded", _) => __obj.attr_isPdfEmbedded foreach { x => attr = scala.xml.Attribute(null, "isPdfEmbedded", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Font, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  def buildReportIsStretchWithOverflowFormat = new DefaultReportIsStretchWithOverflowFormat {}
  trait DefaultReportIsStretchWithOverflowFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsStretchWithOverflow] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsStretchWithOverflow] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsStretchWithOverflow.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsStretchWithOverflow.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsStretchWithOverflow, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsBlankWhenNullTypeFormat = new DefaultReportIsBlankWhenNullTypeFormat {}
  trait DefaultReportIsBlankWhenNullTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsBlankWhenNullType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsBlankWhenNullType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsBlankWhenNullType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsBlankWhenNullType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsBlankWhenNullType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportTextFieldFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.TextField] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.TextField] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "reportElement")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "box")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "textElement")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "textFieldExpression")) ~ 
      opt(any(_ => true)) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "anchorNameExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkReferenceExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkWhenExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkAnchorExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkPageExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkTooltipExpression")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkParameter")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      com.iofficecorp.jasperserver.pumped.report.TextField(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ReportElement](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Box](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TextElement](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TextFieldExpression](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.AnchorNameExpression](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkReferenceExpression](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkWhenExpression](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkAnchorExpression](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkPageExpression](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkTooltipExpression](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkParameter](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@isStretchWithOverflow").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsStretchWithOverflow](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsStretchWithOverflow](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@isStretchWithOverflow" -> _ },
        (node \ "@evaluationTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ComplexEvaluationTime](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ComplexEvaluationTime](scala.xml.Text("Now"), scalaxb.ElemName(node) :: stack))) map { "@evaluationTime" -> _ },
        (node \ "@evaluationGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationGroup" -> _ },
        (node \ "@pattern").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@pattern" -> _ },
        (node \ "@isBlankWhenNull").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsBlankWhenNullType](x, scalaxb.ElemName(node) :: stack)) } map { "@isBlankWhenNull" -> _ },
        (node \ "@hyperlinkType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@hyperlinkType" -> _ },
        (node \ "@hyperlinkTarget").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@hyperlinkTarget" -> _ },
        (node \ "@bookmarkLevel").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("0"), scalaxb.ElemName(node) :: stack))) map { "@bookmarkLevel" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.TextField, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@isStretchWithOverflow", _) => if (__obj.attr_isStretchWithOverflow.toString != "false") attr = scala.xml.Attribute(null, "isStretchWithOverflow", __obj.attr_isStretchWithOverflow.toString, attr)
        case ("@evaluationTime", _) => if (__obj.attr_evaluationTime.toString != "Now") attr = scala.xml.Attribute(null, "evaluationTime", __obj.attr_evaluationTime.toString, attr)
        case ("@evaluationGroup", _) => __obj.attr_evaluationGroup foreach { x => attr = scala.xml.Attribute(null, "evaluationGroup", x.toString, attr) }
        case ("@pattern", _) => __obj.attr_pattern foreach { x => attr = scala.xml.Attribute(null, "pattern", x.toString, attr) }
        case ("@isBlankWhenNull", _) => __obj.attr_isBlankWhenNull foreach { x => attr = scala.xml.Attribute(null, "isBlankWhenNull", x.toString, attr) }
        case ("@hyperlinkType", _) => __obj.attr_hyperlinkType foreach { x => attr = scala.xml.Attribute(null, "hyperlinkType", x.toString, attr) }
        case ("@hyperlinkTarget", _) => __obj.attr_hyperlinkTarget foreach { x => attr = scala.xml.Attribute(null, "hyperlinkTarget", x.toString, attr) }
        case ("@bookmarkLevel", _) => if (__obj.attr_bookmarkLevel.toString != "0") attr = scala.xml.Attribute(null, "bookmarkLevel", __obj.attr_bookmarkLevel.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.TextField, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ReportElement](__obj.reportElement, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("reportElement"), __scope, false),
        __obj.box map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Box](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("box"), __scope, false) } getOrElse {Nil},
        __obj.textElement map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.TextElement](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("textElement"), __scope, false) } getOrElse {Nil},
        __obj.textFieldExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.TextFieldExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("textFieldExpression"), __scope, false) } getOrElse {Nil},
        __obj.patternExpression map { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) } getOrElse {Nil},
        __obj.anchorNameExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.AnchorNameExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("anchorNameExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkReferenceExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkReferenceExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkReferenceExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkWhenExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkWhenExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkWhenExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkAnchorExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkAnchorExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkAnchorExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkPageExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkPageExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkPageExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkTooltipExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkTooltipExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkTooltipExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkParameter flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkParameter](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkParameter"), __scope, false) })

  }

  trait DefaultReportTextFieldExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.TextFieldExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.TextFieldExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.TextFieldExpression(Seq.concat(p1.toList),
        scala.collection.immutable.ListMap(List(
        (node \ "@class").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@class" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.TextFieldExpression, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@class", _) => __obj.attr_class foreach { x => attr = scala.xml.Attribute(null, "class", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.TextFieldExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  def buildReportIsUsingCacheTypeFormat = new DefaultReportIsUsingCacheTypeFormat {}
  trait DefaultReportIsUsingCacheTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsUsingCacheType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsUsingCacheType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsUsingCacheType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsUsingCacheType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsUsingCacheType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportRunToBottomFormat = new DefaultReportRunToBottomFormat {}
  trait DefaultReportRunToBottomFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.RunToBottom] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.RunToBottom] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.RunToBottom.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.RunToBottom.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.RunToBottom, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportOverflowTypeFormat = new DefaultReportOverflowTypeFormat {}
  trait DefaultReportOverflowTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.OverflowType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.OverflowType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.OverflowType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.OverflowType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.OverflowType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportSubreportFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Subreport] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Subreport] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "reportElement")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "parametersMapExpression")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "subreportParameter")) ~ 
      opt(((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "connectionExpression")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ConnectionExpression](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "dataSourceExpression")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DataSourceExpression](x, scalaxb.ElemName(node) :: stack))))) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "returnValue")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "subreportExpression")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      com.iofficecorp.jasperserver.pumped.report.Subreport(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ReportElement](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ParametersMapExpression](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.SubreportParameter](_, scalaxb.ElemName(node) :: stack) },
        p4,
        p5 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ReturnValue](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.SubreportExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@isUsingCache").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsUsingCacheType](x, scalaxb.ElemName(node) :: stack)) } map { "@isUsingCache" -> _ },
        (node \ "@runToBottom").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.RunToBottom](x, scalaxb.ElemName(node) :: stack)) } map { "@runToBottom" -> _ },
        (node \ "@overflowType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.OverflowType](x, scalaxb.ElemName(node) :: stack)) } map { "@overflowType" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Subreport, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@isUsingCache", _) => __obj.attr_isUsingCache foreach { x => attr = scala.xml.Attribute(null, "isUsingCache", x.toString, attr) }
        case ("@runToBottom", _) => __obj.attr_runToBottom foreach { x => attr = scala.xml.Attribute(null, "runToBottom", x.toString, attr) }
        case ("@overflowType", _) => __obj.attr_overflowType foreach { x => attr = scala.xml.Attribute(null, "overflowType", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Subreport, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ReportElement](__obj.reportElement, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("reportElement"), __scope, false),
        __obj.parametersMapExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ParametersMapExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("parametersMapExpression"), __scope, false) } getOrElse {Nil},
        __obj.subreportParameter flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.SubreportParameter](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("subreportParameter"), __scope, false) },
        __obj.subreportoption map { x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.report.SubreportOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.returnValue flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ReturnValue](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("returnValue"), __scope, false) },
        __obj.subreportExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.SubreportExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("subreportExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportParametersMapExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ParametersMapExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ParametersMapExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.ParametersMapExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ParametersMapExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportSubreportParameterFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.SubreportParameter] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.SubreportParameter] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "subreportParameterExpression")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.SubreportParameter(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.SubreportParameterExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.SubreportParameter, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.attr_name.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.SubreportParameter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.subreportParameterExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.SubreportParameterExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("subreportParameterExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportSubreportParameterExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.SubreportParameterExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.SubreportParameterExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.SubreportParameterExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.SubreportParameterExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  def buildReportCalculationTypeFormat = new DefaultReportCalculationTypeFormat {}
  trait DefaultReportCalculationTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.CalculationType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.CalculationType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.CalculationType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.CalculationType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.CalculationType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportReturnValueFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ReturnValue] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.report.ReturnValue] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.ReturnValue] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.report.ReturnValue(scala.collection.immutable.ListMap(List(
        (node \ "@subreportVariable").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@subreportVariable" -> _ },
        (node \ "@toVariable").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@toVariable" -> _ },
        (node \ "@calculation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CalculationType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CalculationType](scala.xml.Text("Nothing"), scalaxb.ElemName(node) :: stack))) map { "@calculation" -> _ },
        (node \ "@incrementerFactoryClass").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@incrementerFactoryClass" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.ReturnValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@subreportVariable", _) => __obj.attr_subreportVariable foreach { x => attr = scala.xml.Attribute(null, "subreportVariable", x.toString, attr) }
        case ("@toVariable", _) => __obj.attr_toVariable foreach { x => attr = scala.xml.Attribute(null, "toVariable", x.toString, attr) }
        case ("@calculation", _) => if (__obj.attr_calculation.toString != "Nothing") attr = scala.xml.Attribute(null, "calculation", __obj.attr_calculation.toString, attr)
        case ("@incrementerFactoryClass", _) => __obj.attr_incrementerFactoryClass foreach { x => attr = scala.xml.Attribute(null, "incrementerFactoryClass", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ReturnValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultReportConnectionExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ConnectionExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ConnectionExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.ConnectionExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ConnectionExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportDataSourceExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.DataSourceExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.DataSourceExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.DataSourceExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.DataSourceExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportSubreportExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.SubreportExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.SubreportExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.SubreportExpression(Seq.concat(p1.toList),
        scala.collection.immutable.ListMap(List(
        (node \ "@class").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@class" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.SubreportExpression, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@class", _) => __obj.attr_class foreach { x => attr = scala.xml.Attribute(null, "class", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.SubreportExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportElementGroupFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ElementGroup] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ElementGroup] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "break")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Break](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "line")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Line](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "rectangle")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Rectangle](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "ellipse")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Ellipse](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "image")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Image](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "staticText")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StaticText](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "textField")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TextField](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "subreport")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Subreport](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "pieChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PieChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "pie3DChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Pie3DChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "barChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BarChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "bar3DChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Bar3DChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xyBarChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XyBarChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "stackedBarChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StackedBarChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "stackedBar3DChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StackedBar3DChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "lineChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LineChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xyLineChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XyLineChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "areaChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.AreaChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xyAreaChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XyAreaChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "scatterChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ScatterChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "bubbleChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BubbleChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "timeSeriesChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TimeSeriesChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "highLowChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HighLowChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "candlestickChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CandlestickChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "meterChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.MeterChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "thermometerChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ThermometerChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "multiAxisChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.MultiAxisChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "stackedAreaChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StackedAreaChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "ganttChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.GanttChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "elementGroup")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ElementGroup](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "crosstab")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Crosstab](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "frame")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Frame](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "componentElement")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ComponentElement](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "genericElement")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.GenericElement](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.ElementGroup(p1) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ElementGroup, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.elementgroupoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.report.ElementGroupOption]](x, x.namespace, x.key, __scope, false) })

  }

  def buildReportIsShowLegendFormat = new DefaultReportIsShowLegendFormat {}
  trait DefaultReportIsShowLegendFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowLegend] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsShowLegend] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsShowLegend.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsShowLegend.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsShowLegend, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportChartFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Chart] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Chart] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "reportElement")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "box")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chartTitle")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chartSubtitle")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chartLegend")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "anchorNameExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkReferenceExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkWhenExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkAnchorExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkPageExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkTooltipExpression")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkParameter")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      com.iofficecorp.jasperserver.pumped.report.Chart(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ReportElement](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Box](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ChartTitle](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ChartSubtitle](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ChartLegend](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.AnchorNameExpression](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkReferenceExpression](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkWhenExpression](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkAnchorExpression](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkPageExpression](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkTooltipExpression](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkParameter](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@isShowLegend").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsShowLegend](x, scalaxb.ElemName(node) :: stack)) } map { "@isShowLegend" -> _ },
        (node \ "@evaluationTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime](scala.xml.Text("Now"), scalaxb.ElemName(node) :: stack))) map { "@evaluationTime" -> _ },
        (node \ "@evaluationGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationGroup" -> _ },
        (node \ "@hyperlinkType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@hyperlinkType" -> _ },
        (node \ "@hyperlinkTarget").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@hyperlinkTarget" -> _ },
        (node \ "@bookmarkLevel").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("0"), scalaxb.ElemName(node) :: stack))) map { "@bookmarkLevel" -> _ },
        (node \ "@customizerClass").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@customizerClass" -> _ },
        (node \ "@renderType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@renderType" -> _ },
        (node \ "@theme").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@theme" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Chart, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@isShowLegend", _) => __obj.attr_isShowLegend foreach { x => attr = scala.xml.Attribute(null, "isShowLegend", x.toString, attr) }
        case ("@evaluationTime", _) => if (__obj.attr_evaluationTime.toString != "Now") attr = scala.xml.Attribute(null, "evaluationTime", __obj.attr_evaluationTime.toString, attr)
        case ("@evaluationGroup", _) => __obj.attr_evaluationGroup foreach { x => attr = scala.xml.Attribute(null, "evaluationGroup", x.toString, attr) }
        case ("@hyperlinkType", _) => __obj.attr_hyperlinkType foreach { x => attr = scala.xml.Attribute(null, "hyperlinkType", x.toString, attr) }
        case ("@hyperlinkTarget", _) => __obj.attr_hyperlinkTarget foreach { x => attr = scala.xml.Attribute(null, "hyperlinkTarget", x.toString, attr) }
        case ("@bookmarkLevel", _) => if (__obj.attr_bookmarkLevel.toString != "0") attr = scala.xml.Attribute(null, "bookmarkLevel", __obj.attr_bookmarkLevel.toString, attr)
        case ("@customizerClass", _) => __obj.attr_customizerClass foreach { x => attr = scala.xml.Attribute(null, "customizerClass", x.toString, attr) }
        case ("@renderType", _) => __obj.attr_renderType foreach { x => attr = scala.xml.Attribute(null, "renderType", x.toString, attr) }
        case ("@theme", _) => __obj.attr_theme foreach { x => attr = scala.xml.Attribute(null, "theme", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Chart, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ReportElement](__obj.reportElement, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("reportElement"), __scope, false),
        __obj.box map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Box](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("box"), __scope, false) } getOrElse {Nil},
        __obj.chartTitle map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ChartTitle](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chartTitle"), __scope, false) } getOrElse {Nil},
        __obj.chartSubtitle map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ChartSubtitle](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chartSubtitle"), __scope, false) } getOrElse {Nil},
        __obj.chartLegend map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ChartLegend](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chartLegend"), __scope, false) } getOrElse {Nil},
        __obj.anchorNameExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.AnchorNameExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("anchorNameExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkReferenceExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkReferenceExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkReferenceExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkWhenExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkWhenExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkWhenExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkAnchorExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkAnchorExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkAnchorExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkPageExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkPageExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkPageExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkTooltipExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkTooltipExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkTooltipExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkParameter flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkParameter](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkParameter"), __scope, false) })

  }

  def buildReportPositionFormat = new DefaultReportPositionFormat {}
  trait DefaultReportPositionFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Position] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.Position] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.Position.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.Position.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.Position, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportChartTitleFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ChartTitle] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ChartTitle] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "font")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "titleExpression")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.ChartTitle(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Font](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TitleExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@position").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Position](x, scalaxb.ElemName(node) :: stack)) } map { "@position" -> _ },
        (node \ "@color").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@color" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.ChartTitle, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@position", _) => __obj.attr_position foreach { x => attr = scala.xml.Attribute(null, "position", x.toString, attr) }
        case ("@color", _) => __obj.attr_color foreach { x => attr = scala.xml.Attribute(null, "color", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ChartTitle, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.font map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Font](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("font"), __scope, false) } getOrElse {Nil},
        __obj.titleExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.TitleExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("titleExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportTitleExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.TitleExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.TitleExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.TitleExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.TitleExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportChartSubtitleFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ChartSubtitle] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ChartSubtitle] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "font")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "subtitleExpression")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.ChartSubtitle(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Font](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.SubtitleExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@color").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@color" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.ChartSubtitle, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@color", _) => __obj.attr_color foreach { x => attr = scala.xml.Attribute(null, "color", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ChartSubtitle, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.font map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Font](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("font"), __scope, false) } getOrElse {Nil},
        __obj.subtitleExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.SubtitleExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("subtitleExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportSubtitleExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.SubtitleExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.SubtitleExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.SubtitleExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.SubtitleExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  def buildReportPositionType2Format = new DefaultReportPositionType2Format {}
  trait DefaultReportPositionType2Format extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.PositionType2] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.PositionType2] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.PositionType2.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.PositionType2.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.PositionType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportChartLegendFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ChartLegend] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ChartLegend] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "font")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.ChartLegend(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Font](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@textColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@textColor" -> _ },
        (node \ "@backgroundColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@backgroundColor" -> _ },
        (node \ "@position").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PositionType2](x, scalaxb.ElemName(node) :: stack)) } map { "@position" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.ChartLegend, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@textColor", _) => __obj.attr_textColor foreach { x => attr = scala.xml.Attribute(null, "textColor", x.toString, attr) }
        case ("@backgroundColor", _) => __obj.attr_backgroundColor foreach { x => attr = scala.xml.Attribute(null, "backgroundColor", x.toString, attr) }
        case ("@position", _) => __obj.attr_position foreach { x => attr = scala.xml.Attribute(null, "position", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ChartLegend, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.font map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Font](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("font"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportItemLabelFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ItemLabel] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ItemLabel] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "font")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.ItemLabel(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Font](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@color").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@color" -> _ },
        (node \ "@backgroundColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@backgroundColor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.ItemLabel, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@color", _) => __obj.attr_color foreach { x => attr = scala.xml.Attribute(null, "color", x.toString, attr) }
        case ("@backgroundColor", _) => __obj.attr_backgroundColor foreach { x => attr = scala.xml.Attribute(null, "backgroundColor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ItemLabel, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.font map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Font](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("font"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportPieChartFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.PieChart] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.PieChart] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chart")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "pieDataset")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "piePlot")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.PieChart(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Chart](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PieDataset](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PiePlot](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.PieChart, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Chart](__obj.chart, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chart"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.PieDataset](__obj.pieDataset, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("pieDataset"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.PiePlot](__obj.piePlot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("piePlot"), __scope, false))

  }

  trait DefaultReportPieDatasetFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.PieDataset] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.PieDataset] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "dataset")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "pieSeries")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "keyExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "labelExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "sectionHyperlink")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "otherKeyExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "otherLabelExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "otherSectionHyperlink")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      com.iofficecorp.jasperserver.pumped.report.PieDataset(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Dataset](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PieSeries](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.KeyExpression](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LabelExpression](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.SectionHyperlink](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.OtherKeyExpression](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.OtherLabelExpression](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.OtherSectionHyperlink](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@minPercentage").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@minPercentage" -> _ },
        (node \ "@maxCount").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@maxCount" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.PieDataset, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@minPercentage", _) => __obj.attr_minPercentage foreach { x => attr = scala.xml.Attribute(null, "minPercentage", x.toString, attr) }
        case ("@maxCount", _) => __obj.attr_maxCount foreach { x => attr = scala.xml.Attribute(null, "maxCount", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.PieDataset, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataset map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Dataset](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("dataset"), __scope, false) } getOrElse {Nil},
        __obj.pieSeries flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.PieSeries](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("pieSeries"), __scope, false) },
        __obj.keyExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.KeyExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("keyExpression"), __scope, false) } getOrElse {Nil},
        __obj.valueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueExpression"), __scope, false) } getOrElse {Nil},
        __obj.labelExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.LabelExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("labelExpression"), __scope, false) } getOrElse {Nil},
        __obj.sectionHyperlink map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.SectionHyperlink](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("sectionHyperlink"), __scope, false) } getOrElse {Nil},
        __obj.otherKeyExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.OtherKeyExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("otherKeyExpression"), __scope, false) } getOrElse {Nil},
        __obj.otherLabelExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.OtherLabelExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("otherLabelExpression"), __scope, false) } getOrElse {Nil},
        __obj.otherSectionHyperlink map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.OtherSectionHyperlink](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("otherSectionHyperlink"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportPieSeriesFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.PieSeries] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.PieSeries] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "keyExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "labelExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "sectionHyperlink")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.iofficecorp.jasperserver.pumped.report.PieSeries(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.KeyExpression](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LabelExpression](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.SectionHyperlink](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.PieSeries, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.keyExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.KeyExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("keyExpression"), __scope, false) } getOrElse {Nil},
        __obj.valueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueExpression"), __scope, false) } getOrElse {Nil},
        __obj.labelExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.LabelExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("labelExpression"), __scope, false) } getOrElse {Nil},
        __obj.sectionHyperlink map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.SectionHyperlink](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("sectionHyperlink"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportKeyExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.KeyExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.KeyExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.KeyExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.KeyExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportValueExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ValueExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ValueExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.ValueExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ValueExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportLabelExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.LabelExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.LabelExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.LabelExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.LabelExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportOtherKeyExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.OtherKeyExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.OtherKeyExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.OtherKeyExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.OtherKeyExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportOtherLabelExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.OtherLabelExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.OtherLabelExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.OtherLabelExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.OtherLabelExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportSectionHyperlinkFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.SectionHyperlink] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.SectionHyperlink] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkReferenceExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkWhenExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkAnchorExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkPageExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkTooltipExpression")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkParameter")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      com.iofficecorp.jasperserver.pumped.report.SectionHyperlink(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkReferenceExpression](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkWhenExpression](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkAnchorExpression](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkPageExpression](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkTooltipExpression](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkParameter](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@hyperlinkType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@hyperlinkType" -> _ },
        (node \ "@hyperlinkTarget").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@hyperlinkTarget" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.SectionHyperlink, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@hyperlinkType", _) => __obj.attr_hyperlinkType foreach { x => attr = scala.xml.Attribute(null, "hyperlinkType", x.toString, attr) }
        case ("@hyperlinkTarget", _) => __obj.attr_hyperlinkTarget foreach { x => attr = scala.xml.Attribute(null, "hyperlinkTarget", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.SectionHyperlink, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.hyperlinkReferenceExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkReferenceExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkReferenceExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkWhenExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkWhenExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkWhenExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkAnchorExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkAnchorExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkAnchorExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkPageExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkPageExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkPageExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkTooltipExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkTooltipExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkTooltipExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkParameter flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkParameter](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkParameter"), __scope, false) })

  }

  trait DefaultReportOtherSectionHyperlinkFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.OtherSectionHyperlink] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.OtherSectionHyperlink] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkReferenceExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkWhenExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkAnchorExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkPageExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkTooltipExpression")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkParameter")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      com.iofficecorp.jasperserver.pumped.report.OtherSectionHyperlink(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkReferenceExpression](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkWhenExpression](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkAnchorExpression](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkPageExpression](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkTooltipExpression](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkParameter](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@hyperlinkType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@hyperlinkType" -> _ },
        (node \ "@hyperlinkTarget").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@hyperlinkTarget" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.OtherSectionHyperlink, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@hyperlinkType", _) => __obj.attr_hyperlinkType foreach { x => attr = scala.xml.Attribute(null, "hyperlinkType", x.toString, attr) }
        case ("@hyperlinkTarget", _) => __obj.attr_hyperlinkTarget foreach { x => attr = scala.xml.Attribute(null, "hyperlinkTarget", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.OtherSectionHyperlink, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.hyperlinkReferenceExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkReferenceExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkReferenceExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkWhenExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkWhenExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkWhenExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkAnchorExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkAnchorExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkAnchorExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkPageExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkPageExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkPageExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkTooltipExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkTooltipExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkTooltipExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkParameter flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkParameter](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkParameter"), __scope, false) })

  }

  def buildReportIsShowLabelsFormat = new DefaultReportIsShowLabelsFormat {}
  trait DefaultReportIsShowLabelsFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowLabels] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsShowLabels] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsShowLabels.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsShowLabels.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsShowLabels, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsCircularFormat = new DefaultReportIsCircularFormat {}
  trait DefaultReportIsCircularFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsCircular] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsCircular] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsCircular.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsCircular.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsCircular, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportPiePlotFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.PiePlot] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.PiePlot] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "plot")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "itemLabel")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.PiePlot(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Plot](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ItemLabel](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@isShowLabels").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsShowLabels](x, scalaxb.ElemName(node) :: stack)) } map { "@isShowLabels" -> _ },
        (node \ "@isCircular").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsCircular](x, scalaxb.ElemName(node) :: stack)) } map { "@isCircular" -> _ },
        (node \ "@labelFormat").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@labelFormat" -> _ },
        (node \ "@legendLabelFormat").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@legendLabelFormat" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.PiePlot, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@isShowLabels", _) => __obj.attr_isShowLabels foreach { x => attr = scala.xml.Attribute(null, "isShowLabels", x.toString, attr) }
        case ("@isCircular", _) => __obj.attr_isCircular foreach { x => attr = scala.xml.Attribute(null, "isCircular", x.toString, attr) }
        case ("@labelFormat", _) => __obj.attr_labelFormat foreach { x => attr = scala.xml.Attribute(null, "labelFormat", x.toString, attr) }
        case ("@legendLabelFormat", _) => __obj.attr_legendLabelFormat foreach { x => attr = scala.xml.Attribute(null, "legendLabelFormat", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.PiePlot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Plot](__obj.plot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("plot"), __scope, false),
        __obj.itemLabel map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ItemLabel](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("itemLabel"), __scope, false) } getOrElse {Nil})

  }

  def buildReportResetTypeTypeFormat = new DefaultReportResetTypeTypeFormat {}
  trait DefaultReportResetTypeTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ResetTypeType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.ResetTypeType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.ResetTypeType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.ResetTypeType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.ResetTypeType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIncrementTypeTypeFormat = new DefaultReportIncrementTypeTypeFormat {}
  trait DefaultReportIncrementTypeTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IncrementTypeType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IncrementTypeType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IncrementTypeType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IncrementTypeType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IncrementTypeType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportDatasetFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Dataset] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Dataset] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "incrementWhenExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "datasetRun")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.Dataset(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IncrementWhenExpression](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DatasetRun](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@resetType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ResetTypeType](x, scalaxb.ElemName(node) :: stack)) } map { "@resetType" -> _ },
        (node \ "@resetGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@resetGroup" -> _ },
        (node \ "@incrementType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IncrementTypeType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IncrementTypeType](scala.xml.Text("None"), scalaxb.ElemName(node) :: stack))) map { "@incrementType" -> _ },
        (node \ "@incrementGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@incrementGroup" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Dataset, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@resetType", _) => __obj.attr_resetType foreach { x => attr = scala.xml.Attribute(null, "resetType", x.toString, attr) }
        case ("@resetGroup", _) => __obj.attr_resetGroup foreach { x => attr = scala.xml.Attribute(null, "resetGroup", x.toString, attr) }
        case ("@incrementType", _) => if (__obj.attr_incrementType.toString != "None") attr = scala.xml.Attribute(null, "incrementType", __obj.attr_incrementType.toString, attr)
        case ("@incrementGroup", _) => __obj.attr_incrementGroup foreach { x => attr = scala.xml.Attribute(null, "incrementGroup", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Dataset, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.incrementWhenExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.IncrementWhenExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("incrementWhenExpression"), __scope, false) } getOrElse {Nil},
        __obj.datasetRun map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DatasetRun](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("datasetRun"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportIncrementWhenExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.IncrementWhenExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.IncrementWhenExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.IncrementWhenExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.IncrementWhenExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportDatasetRunFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.DatasetRun] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.DatasetRun] =
      phrase(safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "property")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "parametersMapExpression")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "datasetParameter")) ~ 
      opt(((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "connectionExpression")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ConnectionExpression](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "dataSourceExpression")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DataSourceExpression](x, scalaxb.ElemName(node) :: stack))))) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "returnValue")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.iofficecorp.jasperserver.pumped.report.DatasetRun(p1 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Property](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ParametersMapExpression](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DatasetParameter](_, scalaxb.ElemName(node) :: stack) },
        p4,
        p5 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DatasetReturnValue](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@subDataset").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@subDataset" -> _ },
        (node \ "@uuid").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@uuid" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.DatasetRun, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@subDataset", _) => attr = scala.xml.Attribute(null, "subDataset", __obj.attr_subDataset.toString, attr)
        case ("@uuid", _) => __obj.attr_uuid foreach { x => attr = scala.xml.Attribute(null, "uuid", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.DatasetRun, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.property flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Property](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("property"), __scope, false) },
        __obj.parametersMapExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ParametersMapExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("parametersMapExpression"), __scope, false) } getOrElse {Nil},
        __obj.datasetParameter flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DatasetParameter](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("datasetParameter"), __scope, false) },
        __obj.datasetrunoption map { x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.report.DatasetRunOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.returnValue flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DatasetReturnValue](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("returnValue"), __scope, false) })

  }

  def buildReportCalculationType2Format = new DefaultReportCalculationType2Format {}
  trait DefaultReportCalculationType2Format extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.CalculationType2] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.CalculationType2] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.CalculationType2.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.CalculationType2.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.CalculationType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportDatasetReturnValueFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.DatasetReturnValue] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.report.DatasetReturnValue] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.DatasetReturnValue] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.report.DatasetReturnValue(scala.collection.immutable.ListMap(List(
        (node \ "@fromVariable").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@fromVariable" -> _ },
        (node \ "@toVariable").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@toVariable" -> _ },
        (node \ "@calculation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CalculationType2](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CalculationType2](scala.xml.Text("Nothing"), scalaxb.ElemName(node) :: stack))) map { "@calculation" -> _ },
        (node \ "@incrementerFactoryClass").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@incrementerFactoryClass" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.DatasetReturnValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@fromVariable", _) => __obj.attr_fromVariable foreach { x => attr = scala.xml.Attribute(null, "fromVariable", x.toString, attr) }
        case ("@toVariable", _) => __obj.attr_toVariable foreach { x => attr = scala.xml.Attribute(null, "toVariable", x.toString, attr) }
        case ("@calculation", _) => if (__obj.attr_calculation.toString != "Nothing") attr = scala.xml.Attribute(null, "calculation", __obj.attr_calculation.toString, attr)
        case ("@incrementerFactoryClass", _) => __obj.attr_incrementerFactoryClass foreach { x => attr = scala.xml.Attribute(null, "incrementerFactoryClass", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.DatasetReturnValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultReportDatasetParameterFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.DatasetParameter] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.DatasetParameter] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "datasetParameterExpression")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.DatasetParameter(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DatasetParameterExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.DatasetParameter, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.attr_name.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.DatasetParameter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.datasetParameterExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DatasetParameterExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("datasetParameterExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportDatasetParameterExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.DatasetParameterExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.DatasetParameterExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.DatasetParameterExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.DatasetParameterExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  def buildReportOrientationTypeFormat = new DefaultReportOrientationTypeFormat {}
  trait DefaultReportOrientationTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.OrientationType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.OrientationType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.OrientationType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.OrientationType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.OrientationType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportPlotFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Plot] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Plot] =
      phrase(safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "seriesColor")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.Plot(p1 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.SeriesColor](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@backcolor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@backcolor" -> _ },
        (node \ "@orientation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.OrientationType](x, scalaxb.ElemName(node) :: stack)) } map { "@orientation" -> _ },
        (node \ "@backgroundAlpha").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@backgroundAlpha" -> _ },
        (node \ "@foregroundAlpha").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@foregroundAlpha" -> _ },
        (node \ "@labelRotation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@labelRotation" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Plot, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@backcolor", _) => __obj.attr_backcolor foreach { x => attr = scala.xml.Attribute(null, "backcolor", x.toString, attr) }
        case ("@orientation", _) => __obj.attr_orientation foreach { x => attr = scala.xml.Attribute(null, "orientation", x.toString, attr) }
        case ("@backgroundAlpha", _) => __obj.attr_backgroundAlpha foreach { x => attr = scala.xml.Attribute(null, "backgroundAlpha", x.toString, attr) }
        case ("@foregroundAlpha", _) => __obj.attr_foregroundAlpha foreach { x => attr = scala.xml.Attribute(null, "foregroundAlpha", x.toString, attr) }
        case ("@labelRotation", _) => __obj.attr_labelRotation foreach { x => attr = scala.xml.Attribute(null, "labelRotation", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Plot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.seriesColor flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.SeriesColor](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("seriesColor"), __scope, false) })

  }

  trait DefaultReportSeriesColorFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.SeriesColor] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.report.SeriesColor] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.SeriesColor] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.report.SeriesColor(scala.collection.immutable.ListMap(List(
        (node \ "@seriesOrder").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@seriesOrder" -> _ },
        (node \ "@color").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@color" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.SeriesColor, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@seriesOrder", _) => attr = scala.xml.Attribute(null, "seriesOrder", __obj.attr_seriesOrder.toString, attr)
        case ("@color", _) => attr = scala.xml.Attribute(null, "color", __obj.attr_color.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.SeriesColor, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultReportPie3DChartFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Pie3DChart] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Pie3DChart] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chart")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "pieDataset")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "pie3DPlot")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.Pie3DChart(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Chart](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PieDataset](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Pie3DPlot](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Pie3DChart, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Chart](__obj.chart, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chart"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.PieDataset](__obj.pieDataset, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("pieDataset"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Pie3DPlot](__obj.pie3DPlot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("pie3DPlot"), __scope, false))

  }

  def buildReportIsShowLabelsTypeFormat = new DefaultReportIsShowLabelsTypeFormat {}
  trait DefaultReportIsShowLabelsTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowLabelsType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsShowLabelsType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsShowLabelsType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsShowLabelsType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsShowLabelsType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsCircularTypeFormat = new DefaultReportIsCircularTypeFormat {}
  trait DefaultReportIsCircularTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsCircularType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsCircularType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsCircularType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsCircularType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsCircularType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportPie3DPlotFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Pie3DPlot] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Pie3DPlot] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "plot")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "itemLabel")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.Pie3DPlot(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Plot](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ItemLabel](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@isShowLabels").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsShowLabelsType](x, scalaxb.ElemName(node) :: stack)) } map { "@isShowLabels" -> _ },
        (node \ "@depthFactor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@depthFactor" -> _ },
        (node \ "@isCircular").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsCircularType](x, scalaxb.ElemName(node) :: stack)) } map { "@isCircular" -> _ },
        (node \ "@labelFormat").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@labelFormat" -> _ },
        (node \ "@legendLabelFormat").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@legendLabelFormat" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Pie3DPlot, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@isShowLabels", _) => __obj.attr_isShowLabels foreach { x => attr = scala.xml.Attribute(null, "isShowLabels", x.toString, attr) }
        case ("@depthFactor", _) => __obj.attr_depthFactor foreach { x => attr = scala.xml.Attribute(null, "depthFactor", x.toString, attr) }
        case ("@isCircular", _) => __obj.attr_isCircular foreach { x => attr = scala.xml.Attribute(null, "isCircular", x.toString, attr) }
        case ("@labelFormat", _) => __obj.attr_labelFormat foreach { x => attr = scala.xml.Attribute(null, "labelFormat", x.toString, attr) }
        case ("@legendLabelFormat", _) => __obj.attr_legendLabelFormat foreach { x => attr = scala.xml.Attribute(null, "legendLabelFormat", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Pie3DPlot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Plot](__obj.plot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("plot"), __scope, false),
        __obj.itemLabel map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ItemLabel](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("itemLabel"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportBarChartFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.BarChart] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.BarChart] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chart")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "categoryDataset")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "barPlot")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.BarChart(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Chart](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CategoryDataset](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BarPlot](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.BarChart, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Chart](__obj.chart, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chart"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CategoryDataset](__obj.categoryDataset, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("categoryDataset"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.BarPlot](__obj.barPlot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("barPlot"), __scope, false))

  }

  trait DefaultReportCategoryDatasetFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.CategoryDataset] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.CategoryDataset] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "dataset")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "categorySeries")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.CategoryDataset(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Dataset](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CategorySeries](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.CategoryDataset, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataset map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Dataset](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("dataset"), __scope, false) } getOrElse {Nil},
        __obj.categorySeries flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CategorySeries](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("categorySeries"), __scope, false) })

  }

  trait DefaultReportCategorySeriesFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.CategorySeries] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.CategorySeries] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "seriesExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "categoryExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "labelExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "itemHyperlink")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.iofficecorp.jasperserver.pumped.report.CategorySeries(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.SeriesExpression](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CategoryExpression](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LabelExpression](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ItemHyperlink](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.CategorySeries, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.seriesExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.SeriesExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("seriesExpression"), __scope, false) } getOrElse {Nil},
        __obj.categoryExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CategoryExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("categoryExpression"), __scope, false) } getOrElse {Nil},
        __obj.valueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueExpression"), __scope, false) } getOrElse {Nil},
        __obj.labelExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.LabelExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("labelExpression"), __scope, false) } getOrElse {Nil},
        __obj.itemHyperlink map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ItemHyperlink](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("itemHyperlink"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportSeriesExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.SeriesExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.SeriesExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.SeriesExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.SeriesExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportCategoryExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.CategoryExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.CategoryExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.CategoryExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.CategoryExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportItemHyperlinkFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ItemHyperlink] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ItemHyperlink] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkReferenceExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkWhenExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkAnchorExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkPageExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkTooltipExpression")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "hyperlinkParameter")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      com.iofficecorp.jasperserver.pumped.report.ItemHyperlink(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkReferenceExpression](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkWhenExpression](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkAnchorExpression](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkPageExpression](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkTooltipExpression](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkParameter](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@hyperlinkType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@hyperlinkType" -> _ },
        (node \ "@hyperlinkTarget").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@hyperlinkTarget" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.ItemHyperlink, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@hyperlinkType", _) => __obj.attr_hyperlinkType foreach { x => attr = scala.xml.Attribute(null, "hyperlinkType", x.toString, attr) }
        case ("@hyperlinkTarget", _) => __obj.attr_hyperlinkTarget foreach { x => attr = scala.xml.Attribute(null, "hyperlinkTarget", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ItemHyperlink, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.hyperlinkReferenceExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkReferenceExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkReferenceExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkWhenExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkWhenExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkWhenExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkAnchorExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkAnchorExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkAnchorExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkPageExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkPageExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkPageExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkTooltipExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkTooltipExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkTooltipExpression"), __scope, false) } getOrElse {Nil},
        __obj.hyperlinkParameter flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HyperlinkParameter](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("hyperlinkParameter"), __scope, false) })

  }

  def buildReportIsShowLabelsType2Format = new DefaultReportIsShowLabelsType2Format {}
  trait DefaultReportIsShowLabelsType2Format extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowLabelsType2] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsShowLabelsType2] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsShowLabelsType2.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsShowLabelsType2.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsShowLabelsType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsShowTickMarksFormat = new DefaultReportIsShowTickMarksFormat {}
  trait DefaultReportIsShowTickMarksFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowTickMarks] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsShowTickMarks] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsShowTickMarks.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsShowTickMarks.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsShowTickMarks, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsShowTickLabelsFormat = new DefaultReportIsShowTickLabelsFormat {}
  trait DefaultReportIsShowTickLabelsFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowTickLabels] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsShowTickLabels] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsShowTickLabels.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsShowTickLabels.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsShowTickLabels, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportBarPlotFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.BarPlot] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.BarPlot] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "plot")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "itemLabel")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "categoryAxisLabelExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "categoryAxisFormat")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueAxisLabelExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueAxisFormat")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "domainAxisMinValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "domainAxisMaxValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "rangeAxisMinValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "rangeAxisMaxValueExpression")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      com.iofficecorp.jasperserver.pumped.report.BarPlot(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Plot](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ItemLabel](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CategoryAxisLabelExpression](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CategoryAxisFormat](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisLabelExpression](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisFormat](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMinValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMaxValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMinValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMaxValueExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@isShowLabels").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsShowLabelsType2](x, scalaxb.ElemName(node) :: stack)) } map { "@isShowLabels" -> _ },
        (node \ "@isShowTickMarks").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsShowTickMarks](x, scalaxb.ElemName(node) :: stack)) } map { "@isShowTickMarks" -> _ },
        (node \ "@isShowTickLabels").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsShowTickLabels](x, scalaxb.ElemName(node) :: stack)) } map { "@isShowTickLabels" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.BarPlot, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@isShowLabels", _) => __obj.attr_isShowLabels foreach { x => attr = scala.xml.Attribute(null, "isShowLabels", x.toString, attr) }
        case ("@isShowTickMarks", _) => __obj.attr_isShowTickMarks foreach { x => attr = scala.xml.Attribute(null, "isShowTickMarks", x.toString, attr) }
        case ("@isShowTickLabels", _) => __obj.attr_isShowTickLabels foreach { x => attr = scala.xml.Attribute(null, "isShowTickLabels", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.BarPlot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Plot](__obj.plot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("plot"), __scope, false),
        __obj.itemLabel map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ItemLabel](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("itemLabel"), __scope, false) } getOrElse {Nil},
        __obj.categoryAxisLabelExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CategoryAxisLabelExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("categoryAxisLabelExpression"), __scope, false) } getOrElse {Nil},
        __obj.categoryAxisFormat map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CategoryAxisFormat](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("categoryAxisFormat"), __scope, false) } getOrElse {Nil},
        __obj.valueAxisLabelExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisLabelExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueAxisLabelExpression"), __scope, false) } getOrElse {Nil},
        __obj.valueAxisFormat map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisFormat](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueAxisFormat"), __scope, false) } getOrElse {Nil},
        __obj.domainAxisMinValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMinValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("domainAxisMinValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.domainAxisMaxValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMaxValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("domainAxisMaxValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.rangeAxisMinValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMinValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("rangeAxisMinValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.rangeAxisMaxValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMaxValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("rangeAxisMaxValueExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportCategoryAxisLabelExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.CategoryAxisLabelExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.CategoryAxisLabelExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.CategoryAxisLabelExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.CategoryAxisLabelExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportValueAxisLabelExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ValueAxisLabelExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ValueAxisLabelExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.ValueAxisLabelExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ValueAxisLabelExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportDomainAxisMinValueExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.DomainAxisMinValueExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.DomainAxisMinValueExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.DomainAxisMinValueExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.DomainAxisMinValueExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportDomainAxisMaxValueExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.DomainAxisMaxValueExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.DomainAxisMaxValueExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.DomainAxisMaxValueExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.DomainAxisMaxValueExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportRangeAxisMinValueExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.RangeAxisMinValueExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.RangeAxisMinValueExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.RangeAxisMinValueExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.RangeAxisMinValueExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportRangeAxisMaxValueExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.RangeAxisMaxValueExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.RangeAxisMaxValueExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.RangeAxisMaxValueExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.RangeAxisMaxValueExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportCategoryAxisFormatFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.CategoryAxisFormat] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.CategoryAxisFormat] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "axisFormat")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.CategoryAxisFormat(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.AxisFormat](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@labelRotation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@labelRotation" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.CategoryAxisFormat, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@labelRotation", _) => __obj.attr_labelRotation foreach { x => attr = scala.xml.Attribute(null, "labelRotation", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.CategoryAxisFormat, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.AxisFormat](__obj.axisFormat, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("axisFormat"), __scope, false))

  }

  trait DefaultReportValueAxisFormatFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ValueAxisFormat] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ValueAxisFormat] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "axisFormat")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.ValueAxisFormat(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.AxisFormat](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ValueAxisFormat, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.AxisFormat](__obj.axisFormat, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("axisFormat"), __scope, false))

  }

  trait DefaultReportAxisFormatFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.AxisFormat] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.AxisFormat] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "labelFont")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "tickLabelFont")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.AxisFormat(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LabelFont](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TickLabelFont](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@labelColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@labelColor" -> _ },
        (node \ "@tickLabelColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@tickLabelColor" -> _ },
        (node \ "@tickLabelMask").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@tickLabelMask" -> _ },
        (node \ "@verticalTickLabels").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@verticalTickLabels" -> _ },
        (node \ "@axisLineColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@axisLineColor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.AxisFormat, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@labelColor", _) => __obj.attr_labelColor foreach { x => attr = scala.xml.Attribute(null, "labelColor", x.toString, attr) }
        case ("@tickLabelColor", _) => __obj.attr_tickLabelColor foreach { x => attr = scala.xml.Attribute(null, "tickLabelColor", x.toString, attr) }
        case ("@tickLabelMask", _) => __obj.attr_tickLabelMask foreach { x => attr = scala.xml.Attribute(null, "tickLabelMask", x.toString, attr) }
        case ("@verticalTickLabels", _) => __obj.attr_verticalTickLabels foreach { x => attr = scala.xml.Attribute(null, "verticalTickLabels", x.toString, attr) }
        case ("@axisLineColor", _) => __obj.attr_axisLineColor foreach { x => attr = scala.xml.Attribute(null, "axisLineColor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.AxisFormat, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.labelFont map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.LabelFont](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("labelFont"), __scope, false) } getOrElse {Nil},
        __obj.tickLabelFont map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.TickLabelFont](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("tickLabelFont"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportLabelFontFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.LabelFont] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.LabelFont] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "font")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.LabelFont(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Font](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.LabelFont, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.font map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Font](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("font"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportTickLabelFontFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.TickLabelFont] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.TickLabelFont] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "font")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.TickLabelFont(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Font](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.TickLabelFont, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.font map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Font](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("font"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportBar3DChartFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Bar3DChart] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Bar3DChart] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chart")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "categoryDataset")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "bar3DPlot")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.Bar3DChart(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Chart](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CategoryDataset](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Bar3DPlot](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Bar3DChart, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Chart](__obj.chart, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chart"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CategoryDataset](__obj.categoryDataset, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("categoryDataset"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Bar3DPlot](__obj.bar3DPlot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("bar3DPlot"), __scope, false))

  }

  def buildReportIsShowLabelsType3Format = new DefaultReportIsShowLabelsType3Format {}
  trait DefaultReportIsShowLabelsType3Format extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowLabelsType3] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsShowLabelsType3] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsShowLabelsType3.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsShowLabelsType3.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsShowLabelsType3, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportBar3DPlotFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Bar3DPlot] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Bar3DPlot] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "plot")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "itemLabel")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "categoryAxisLabelExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "categoryAxisFormat")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueAxisLabelExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueAxisFormat")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "domainAxisMinValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "domainAxisMaxValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "rangeAxisMinValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "rangeAxisMaxValueExpression")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      com.iofficecorp.jasperserver.pumped.report.Bar3DPlot(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Plot](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ItemLabel](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CategoryAxisLabelExpression](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CategoryAxisFormat](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisLabelExpression](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisFormat](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMinValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMaxValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMinValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMaxValueExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@isShowLabels").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsShowLabelsType3](x, scalaxb.ElemName(node) :: stack)) } map { "@isShowLabels" -> _ },
        (node \ "@xOffset").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@xOffset" -> _ },
        (node \ "@yOffset").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@yOffset" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Bar3DPlot, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@isShowLabels", _) => __obj.attr_isShowLabels foreach { x => attr = scala.xml.Attribute(null, "isShowLabels", x.toString, attr) }
        case ("@xOffset", _) => __obj.attr_xOffset foreach { x => attr = scala.xml.Attribute(null, "xOffset", x.toString, attr) }
        case ("@yOffset", _) => __obj.attr_yOffset foreach { x => attr = scala.xml.Attribute(null, "yOffset", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Bar3DPlot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Plot](__obj.plot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("plot"), __scope, false),
        __obj.itemLabel map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ItemLabel](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("itemLabel"), __scope, false) } getOrElse {Nil},
        __obj.categoryAxisLabelExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CategoryAxisLabelExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("categoryAxisLabelExpression"), __scope, false) } getOrElse {Nil},
        __obj.categoryAxisFormat map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CategoryAxisFormat](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("categoryAxisFormat"), __scope, false) } getOrElse {Nil},
        __obj.valueAxisLabelExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisLabelExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueAxisLabelExpression"), __scope, false) } getOrElse {Nil},
        __obj.valueAxisFormat map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisFormat](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueAxisFormat"), __scope, false) } getOrElse {Nil},
        __obj.domainAxisMinValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMinValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("domainAxisMinValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.domainAxisMaxValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMaxValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("domainAxisMaxValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.rangeAxisMinValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMinValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("rangeAxisMinValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.rangeAxisMaxValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMaxValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("rangeAxisMaxValueExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportXyBarChartFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.XyBarChart] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.XyBarChart] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chart")) ~ 
      (((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "timePeriodDataset")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TimePeriodDataset](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "timeSeriesDataset")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TimeSeriesDataset](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xyDataset")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XyDataset](x, scalaxb.ElemName(node) :: stack))))) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "barPlot")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.XyBarChart(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Chart](p1, scalaxb.ElemName(node) :: stack),
        p2,
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BarPlot](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.XyBarChart, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Chart](__obj.chart, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chart"), __scope, false),
        (Some(__obj.xybarchartoption) map {x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.report.XyBarChartOption]](x, x.namespace, x.key, __scope, false)}).get,
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.BarPlot](__obj.barPlot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("barPlot"), __scope, false))

  }

  trait DefaultReportTimePeriodDatasetFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.TimePeriodDataset] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.TimePeriodDataset] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "dataset")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "timePeriodSeries")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.TimePeriodDataset(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Dataset](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TimePeriodSeries](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.TimePeriodDataset, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataset map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Dataset](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("dataset"), __scope, false) } getOrElse {Nil},
        __obj.timePeriodSeries flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.TimePeriodSeries](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("timePeriodSeries"), __scope, false) })

  }

  trait DefaultReportTimePeriodSeriesFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.TimePeriodSeries] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.TimePeriodSeries] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "seriesExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "startDateExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "endDateExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "labelExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "itemHyperlink")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      com.iofficecorp.jasperserver.pumped.report.TimePeriodSeries(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.SeriesExpression](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StartDateExpression](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.EndDateExpression](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LabelExpression](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ItemHyperlink](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.TimePeriodSeries, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.seriesExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.SeriesExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("seriesExpression"), __scope, false) } getOrElse {Nil},
        __obj.startDateExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.StartDateExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("startDateExpression"), __scope, false) } getOrElse {Nil},
        __obj.endDateExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.EndDateExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("endDateExpression"), __scope, false) } getOrElse {Nil},
        __obj.valueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueExpression"), __scope, false) } getOrElse {Nil},
        __obj.labelExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.LabelExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("labelExpression"), __scope, false) } getOrElse {Nil},
        __obj.itemHyperlink map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ItemHyperlink](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("itemHyperlink"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportStartDateExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.StartDateExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.StartDateExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.StartDateExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.StartDateExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportEndDateExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.EndDateExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.EndDateExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.EndDateExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.EndDateExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportStackedBarChartFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.StackedBarChart] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.StackedBarChart] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chart")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "categoryDataset")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "barPlot")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.StackedBarChart(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Chart](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CategoryDataset](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BarPlot](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.StackedBarChart, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Chart](__obj.chart, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chart"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CategoryDataset](__obj.categoryDataset, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("categoryDataset"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.BarPlot](__obj.barPlot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("barPlot"), __scope, false))

  }

  trait DefaultReportStackedAreaChartFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.StackedAreaChart] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.StackedAreaChart] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chart")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "categoryDataset")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "areaPlot")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.StackedAreaChart(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Chart](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CategoryDataset](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.AreaPlot](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.StackedAreaChart, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Chart](__obj.chart, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chart"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CategoryDataset](__obj.categoryDataset, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("categoryDataset"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.AreaPlot](__obj.areaPlot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("areaPlot"), __scope, false))

  }

  trait DefaultReportStackedBar3DChartFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.StackedBar3DChart] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.StackedBar3DChart] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chart")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "categoryDataset")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "bar3DPlot")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.StackedBar3DChart(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Chart](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CategoryDataset](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Bar3DPlot](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.StackedBar3DChart, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Chart](__obj.chart, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chart"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CategoryDataset](__obj.categoryDataset, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("categoryDataset"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Bar3DPlot](__obj.bar3DPlot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("bar3DPlot"), __scope, false))

  }

  trait DefaultReportLineChartFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.LineChart] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.LineChart] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chart")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "categoryDataset")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "linePlot")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.LineChart(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Chart](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CategoryDataset](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LinePlot](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.LineChart, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Chart](__obj.chart, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chart"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CategoryDataset](__obj.categoryDataset, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("categoryDataset"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.LinePlot](__obj.linePlot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("linePlot"), __scope, false))

  }

  def buildReportIsShowLinesFormat = new DefaultReportIsShowLinesFormat {}
  trait DefaultReportIsShowLinesFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowLines] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsShowLines] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsShowLines.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsShowLines.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsShowLines, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsShowShapesFormat = new DefaultReportIsShowShapesFormat {}
  trait DefaultReportIsShowShapesFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowShapes] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsShowShapes] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsShowShapes.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsShowShapes.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsShowShapes, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportLinePlotFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.LinePlot] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.LinePlot] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "plot")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "categoryAxisLabelExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "categoryAxisFormat")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueAxisLabelExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueAxisFormat")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "domainAxisMinValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "domainAxisMaxValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "rangeAxisMinValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "rangeAxisMaxValueExpression")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      com.iofficecorp.jasperserver.pumped.report.LinePlot(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Plot](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CategoryAxisLabelExpression](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CategoryAxisFormat](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisLabelExpression](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisFormat](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMinValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMaxValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMinValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMaxValueExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@isShowLines").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsShowLines](x, scalaxb.ElemName(node) :: stack)) } map { "@isShowLines" -> _ },
        (node \ "@isShowShapes").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsShowShapes](x, scalaxb.ElemName(node) :: stack)) } map { "@isShowShapes" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.LinePlot, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@isShowLines", _) => __obj.attr_isShowLines foreach { x => attr = scala.xml.Attribute(null, "isShowLines", x.toString, attr) }
        case ("@isShowShapes", _) => __obj.attr_isShowShapes foreach { x => attr = scala.xml.Attribute(null, "isShowShapes", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.LinePlot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Plot](__obj.plot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("plot"), __scope, false),
        __obj.categoryAxisLabelExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CategoryAxisLabelExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("categoryAxisLabelExpression"), __scope, false) } getOrElse {Nil},
        __obj.categoryAxisFormat map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CategoryAxisFormat](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("categoryAxisFormat"), __scope, false) } getOrElse {Nil},
        __obj.valueAxisLabelExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisLabelExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueAxisLabelExpression"), __scope, false) } getOrElse {Nil},
        __obj.valueAxisFormat map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisFormat](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueAxisFormat"), __scope, false) } getOrElse {Nil},
        __obj.domainAxisMinValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMinValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("domainAxisMinValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.domainAxisMaxValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMaxValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("domainAxisMaxValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.rangeAxisMinValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMinValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("rangeAxisMinValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.rangeAxisMaxValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMaxValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("rangeAxisMaxValueExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportXyLineChartFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.XyLineChart] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.XyLineChart] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chart")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xyDataset")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "linePlot")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.XyLineChart(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Chart](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XyDataset](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LinePlot](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.XyLineChart, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Chart](__obj.chart, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chart"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.XyDataset](__obj.xyDataset, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("xyDataset"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.LinePlot](__obj.linePlot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("linePlot"), __scope, false))

  }

  trait DefaultReportXyDatasetFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.XyDataset] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.XyDataset] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "dataset")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xySeries")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.XyDataset(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Dataset](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XySeries](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.XyDataset, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataset map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Dataset](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("dataset"), __scope, false) } getOrElse {Nil},
        __obj.xySeries flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.XySeries](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("xySeries"), __scope, false) })

  }

  def buildReportAutoSortFormat = new DefaultReportAutoSortFormat {}
  trait DefaultReportAutoSortFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.AutoSort] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.AutoSort] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.AutoSort.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.AutoSort.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.AutoSort, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportXySeriesFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.XySeries] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.XySeries] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "seriesExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "yValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "labelExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "itemHyperlink")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.iofficecorp.jasperserver.pumped.report.XySeries(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.SeriesExpression](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.YValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LabelExpression](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ItemHyperlink](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@autoSort").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.AutoSort](x, scalaxb.ElemName(node) :: stack)) } map { "@autoSort" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.XySeries, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@autoSort", _) => __obj.attr_autoSort foreach { x => attr = scala.xml.Attribute(null, "autoSort", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.XySeries, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.seriesExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.SeriesExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("seriesExpression"), __scope, false) } getOrElse {Nil},
        __obj.xValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.XValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("xValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.yValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.YValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("yValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.labelExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.LabelExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("labelExpression"), __scope, false) } getOrElse {Nil},
        __obj.itemHyperlink map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ItemHyperlink](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("itemHyperlink"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportXValueExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.XValueExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.XValueExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.XValueExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.XValueExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportYValueExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.YValueExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.YValueExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.YValueExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.YValueExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportAreaChartFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.AreaChart] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.AreaChart] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chart")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "categoryDataset")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "areaPlot")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.AreaChart(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Chart](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CategoryDataset](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.AreaPlot](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.AreaChart, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Chart](__obj.chart, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chart"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CategoryDataset](__obj.categoryDataset, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("categoryDataset"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.AreaPlot](__obj.areaPlot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("areaPlot"), __scope, false))

  }

  trait DefaultReportAreaPlotFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.AreaPlot] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.AreaPlot] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "plot")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "categoryAxisLabelExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "categoryAxisFormat")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueAxisLabelExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueAxisFormat")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "domainAxisMinValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "domainAxisMaxValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "rangeAxisMinValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "rangeAxisMaxValueExpression")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      com.iofficecorp.jasperserver.pumped.report.AreaPlot(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Plot](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CategoryAxisLabelExpression](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CategoryAxisFormat](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisLabelExpression](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisFormat](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMinValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMaxValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMinValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMaxValueExpression](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.AreaPlot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Plot](__obj.plot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("plot"), __scope, false),
        __obj.categoryAxisLabelExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CategoryAxisLabelExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("categoryAxisLabelExpression"), __scope, false) } getOrElse {Nil},
        __obj.categoryAxisFormat map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CategoryAxisFormat](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("categoryAxisFormat"), __scope, false) } getOrElse {Nil},
        __obj.valueAxisLabelExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisLabelExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueAxisLabelExpression"), __scope, false) } getOrElse {Nil},
        __obj.valueAxisFormat map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisFormat](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueAxisFormat"), __scope, false) } getOrElse {Nil},
        __obj.domainAxisMinValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMinValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("domainAxisMinValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.domainAxisMaxValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMaxValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("domainAxisMaxValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.rangeAxisMinValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMinValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("rangeAxisMinValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.rangeAxisMaxValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMaxValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("rangeAxisMaxValueExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportXyAreaChartFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.XyAreaChart] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.XyAreaChart] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chart")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xyDataset")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "areaPlot")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.XyAreaChart(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Chart](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XyDataset](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.AreaPlot](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.XyAreaChart, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Chart](__obj.chart, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chart"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.XyDataset](__obj.xyDataset, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("xyDataset"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.AreaPlot](__obj.areaPlot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("areaPlot"), __scope, false))

  }

  trait DefaultReportScatterChartFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ScatterChart] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ScatterChart] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chart")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xyDataset")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "scatterPlot")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.ScatterChart(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Chart](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XyDataset](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ScatterPlot](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ScatterChart, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Chart](__obj.chart, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chart"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.XyDataset](__obj.xyDataset, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("xyDataset"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ScatterPlot](__obj.scatterPlot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("scatterPlot"), __scope, false))

  }

  def buildReportIsShowLinesTypeFormat = new DefaultReportIsShowLinesTypeFormat {}
  trait DefaultReportIsShowLinesTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowLinesType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsShowLinesType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsShowLinesType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsShowLinesType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsShowLinesType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsShowShapesTypeFormat = new DefaultReportIsShowShapesTypeFormat {}
  trait DefaultReportIsShowShapesTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowShapesType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsShowShapesType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsShowShapesType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsShowShapesType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsShowShapesType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportScatterPlotFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ScatterPlot] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ScatterPlot] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "plot")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xAxisLabelExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xAxisFormat")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "yAxisLabelExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "yAxisFormat")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "domainAxisMinValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "domainAxisMaxValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "rangeAxisMinValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "rangeAxisMaxValueExpression")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      com.iofficecorp.jasperserver.pumped.report.ScatterPlot(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Plot](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XAxisLabelExpression](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XAxisFormat](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.YAxisLabelExpression](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.YAxisFormat](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMinValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMaxValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMinValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMaxValueExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@isShowLines").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsShowLinesType](x, scalaxb.ElemName(node) :: stack)) } map { "@isShowLines" -> _ },
        (node \ "@isShowShapes").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsShowShapesType](x, scalaxb.ElemName(node) :: stack)) } map { "@isShowShapes" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.ScatterPlot, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@isShowLines", _) => __obj.attr_isShowLines foreach { x => attr = scala.xml.Attribute(null, "isShowLines", x.toString, attr) }
        case ("@isShowShapes", _) => __obj.attr_isShowShapes foreach { x => attr = scala.xml.Attribute(null, "isShowShapes", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ScatterPlot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Plot](__obj.plot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("plot"), __scope, false),
        __obj.xAxisLabelExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.XAxisLabelExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("xAxisLabelExpression"), __scope, false) } getOrElse {Nil},
        __obj.xAxisFormat map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.XAxisFormat](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("xAxisFormat"), __scope, false) } getOrElse {Nil},
        __obj.yAxisLabelExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.YAxisLabelExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("yAxisLabelExpression"), __scope, false) } getOrElse {Nil},
        __obj.yAxisFormat map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.YAxisFormat](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("yAxisFormat"), __scope, false) } getOrElse {Nil},
        __obj.domainAxisMinValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMinValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("domainAxisMinValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.domainAxisMaxValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMaxValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("domainAxisMaxValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.rangeAxisMinValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMinValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("rangeAxisMinValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.rangeAxisMaxValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMaxValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("rangeAxisMaxValueExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportXAxisLabelExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.XAxisLabelExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.XAxisLabelExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.XAxisLabelExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.XAxisLabelExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportYAxisLabelExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.YAxisLabelExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.YAxisLabelExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.YAxisLabelExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.YAxisLabelExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportXAxisFormatFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.XAxisFormat] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.XAxisFormat] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "axisFormat")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.XAxisFormat(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.AxisFormat](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.XAxisFormat, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.AxisFormat](__obj.axisFormat, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("axisFormat"), __scope, false))

  }

  trait DefaultReportYAxisFormatFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.YAxisFormat] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.YAxisFormat] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "axisFormat")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.YAxisFormat(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.AxisFormat](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.YAxisFormat, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.AxisFormat](__obj.axisFormat, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("axisFormat"), __scope, false))

  }

  trait DefaultReportBubbleChartFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.BubbleChart] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.BubbleChart] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chart")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xyzDataset")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "bubblePlot")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.BubbleChart(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Chart](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XyzDataset](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BubblePlot](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.BubbleChart, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Chart](__obj.chart, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chart"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.XyzDataset](__obj.xyzDataset, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("xyzDataset"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.BubblePlot](__obj.bubblePlot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("bubblePlot"), __scope, false))

  }

  trait DefaultReportXyzDatasetFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.XyzDataset] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.XyzDataset] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "dataset")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xyzSeries")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.XyzDataset(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Dataset](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XyzSeries](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.XyzDataset, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataset map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Dataset](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("dataset"), __scope, false) } getOrElse {Nil},
        __obj.xyzSeries flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.XyzSeries](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("xyzSeries"), __scope, false) })

  }

  trait DefaultReportXyzSeriesFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.XyzSeries] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.XyzSeries] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "seriesExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "yValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "zValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "itemHyperlink")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.iofficecorp.jasperserver.pumped.report.XyzSeries(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.SeriesExpression](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.YValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ZValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ItemHyperlink](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.XyzSeries, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.seriesExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.SeriesExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("seriesExpression"), __scope, false) } getOrElse {Nil},
        __obj.xValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.XValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("xValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.yValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.YValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("yValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.zValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ZValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("zValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.itemHyperlink map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ItemHyperlink](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("itemHyperlink"), __scope, false) } getOrElse {Nil})

  }

  def buildReportScaleTypeFormat = new DefaultReportScaleTypeFormat {}
  trait DefaultReportScaleTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ScaleType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.ScaleType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.ScaleType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.ScaleType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.ScaleType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportBubblePlotFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.BubblePlot] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.BubblePlot] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "plot")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xAxisLabelExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xAxisFormat")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "yAxisLabelExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "yAxisFormat")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "domainAxisMinValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "domainAxisMaxValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "rangeAxisMinValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "rangeAxisMaxValueExpression")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      com.iofficecorp.jasperserver.pumped.report.BubblePlot(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Plot](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XAxisLabelExpression](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XAxisFormat](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.YAxisLabelExpression](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.YAxisFormat](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMinValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMaxValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMinValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMaxValueExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@scaleType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ScaleType](x, scalaxb.ElemName(node) :: stack)) } map { "@scaleType" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.BubblePlot, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@scaleType", _) => __obj.attr_scaleType foreach { x => attr = scala.xml.Attribute(null, "scaleType", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.BubblePlot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Plot](__obj.plot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("plot"), __scope, false),
        __obj.xAxisLabelExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.XAxisLabelExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("xAxisLabelExpression"), __scope, false) } getOrElse {Nil},
        __obj.xAxisFormat map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.XAxisFormat](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("xAxisFormat"), __scope, false) } getOrElse {Nil},
        __obj.yAxisLabelExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.YAxisLabelExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("yAxisLabelExpression"), __scope, false) } getOrElse {Nil},
        __obj.yAxisFormat map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.YAxisFormat](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("yAxisFormat"), __scope, false) } getOrElse {Nil},
        __obj.domainAxisMinValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMinValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("domainAxisMinValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.domainAxisMaxValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMaxValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("domainAxisMaxValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.rangeAxisMinValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMinValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("rangeAxisMinValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.rangeAxisMaxValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMaxValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("rangeAxisMaxValueExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportZValueExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ZValueExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ZValueExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.ZValueExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ZValueExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  def buildReportTimePeriodFormat = new DefaultReportTimePeriodFormat {}
  trait DefaultReportTimePeriodFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TimePeriod] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.TimePeriod] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.TimePeriod.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.TimePeriod.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.TimePeriod, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportTimeSeriesDatasetFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.TimeSeriesDataset] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.TimeSeriesDataset] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "dataset")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "timeSeries")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.TimeSeriesDataset(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Dataset](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TimeSeries](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@timePeriod").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TimePeriod](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TimePeriod](scala.xml.Text("Day"), scalaxb.ElemName(node) :: stack))) map { "@timePeriod" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.TimeSeriesDataset, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@timePeriod", _) => if (__obj.attr_timePeriod.toString != "Day") attr = scala.xml.Attribute(null, "timePeriod", __obj.attr_timePeriod.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.TimeSeriesDataset, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataset map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Dataset](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("dataset"), __scope, false) } getOrElse {Nil},
        __obj.timeSeries flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.TimeSeries](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("timeSeries"), __scope, false) })

  }

  trait DefaultReportTimeSeriesFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.TimeSeries] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.TimeSeries] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "seriesExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "timePeriodExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "labelExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "itemHyperlink")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.iofficecorp.jasperserver.pumped.report.TimeSeries(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.SeriesExpression](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TimePeriodExpression](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LabelExpression](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ItemHyperlink](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.TimeSeries, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.seriesExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.SeriesExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("seriesExpression"), __scope, false) } getOrElse {Nil},
        __obj.timePeriodExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.TimePeriodExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("timePeriodExpression"), __scope, false) } getOrElse {Nil},
        __obj.valueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueExpression"), __scope, false) } getOrElse {Nil},
        __obj.labelExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.LabelExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("labelExpression"), __scope, false) } getOrElse {Nil},
        __obj.itemHyperlink map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ItemHyperlink](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("itemHyperlink"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportTimePeriodExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.TimePeriodExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.TimePeriodExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.TimePeriodExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.TimePeriodExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportTimeSeriesChartFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.TimeSeriesChart] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.TimeSeriesChart] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chart")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "timeSeriesDataset")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "timeSeriesPlot")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.TimeSeriesChart(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Chart](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TimeSeriesDataset](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TimeSeriesPlot](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.TimeSeriesChart, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Chart](__obj.chart, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chart"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.TimeSeriesDataset](__obj.timeSeriesDataset, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("timeSeriesDataset"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.TimeSeriesPlot](__obj.timeSeriesPlot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("timeSeriesPlot"), __scope, false))

  }

  def buildReportIsShowLinesType2Format = new DefaultReportIsShowLinesType2Format {}
  trait DefaultReportIsShowLinesType2Format extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowLinesType2] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsShowLinesType2] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsShowLinesType2.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsShowLinesType2.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsShowLinesType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsShowShapesType2Format = new DefaultReportIsShowShapesType2Format {}
  trait DefaultReportIsShowShapesType2Format extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowShapesType2] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsShowShapesType2] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsShowShapesType2.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsShowShapesType2.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsShowShapesType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportTimeSeriesPlotFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.TimeSeriesPlot] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.TimeSeriesPlot] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "plot")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "timeAxisLabelExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "timeAxisFormat")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueAxisLabelExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueAxisFormat")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "domainAxisMinValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "domainAxisMaxValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "rangeAxisMinValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "rangeAxisMaxValueExpression")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      com.iofficecorp.jasperserver.pumped.report.TimeSeriesPlot(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Plot](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TimeAxisLabelExpression](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TimeAxisFormat](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisLabelExpression](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisFormat](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMinValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMaxValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMinValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMaxValueExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@isShowLines").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsShowLinesType2](x, scalaxb.ElemName(node) :: stack)) } map { "@isShowLines" -> _ },
        (node \ "@isShowShapes").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsShowShapesType2](x, scalaxb.ElemName(node) :: stack)) } map { "@isShowShapes" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.TimeSeriesPlot, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@isShowLines", _) => __obj.attr_isShowLines foreach { x => attr = scala.xml.Attribute(null, "isShowLines", x.toString, attr) }
        case ("@isShowShapes", _) => __obj.attr_isShowShapes foreach { x => attr = scala.xml.Attribute(null, "isShowShapes", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.TimeSeriesPlot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Plot](__obj.plot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("plot"), __scope, false),
        __obj.timeAxisLabelExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.TimeAxisLabelExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("timeAxisLabelExpression"), __scope, false) } getOrElse {Nil},
        __obj.timeAxisFormat map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.TimeAxisFormat](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("timeAxisFormat"), __scope, false) } getOrElse {Nil},
        __obj.valueAxisLabelExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisLabelExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueAxisLabelExpression"), __scope, false) } getOrElse {Nil},
        __obj.valueAxisFormat map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisFormat](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueAxisFormat"), __scope, false) } getOrElse {Nil},
        __obj.domainAxisMinValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMinValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("domainAxisMinValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.domainAxisMaxValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMaxValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("domainAxisMaxValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.rangeAxisMinValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMinValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("rangeAxisMinValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.rangeAxisMaxValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMaxValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("rangeAxisMaxValueExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportTimeAxisLabelExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.TimeAxisLabelExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.TimeAxisLabelExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.TimeAxisLabelExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.TimeAxisLabelExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportTimeAxisFormatFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.TimeAxisFormat] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.TimeAxisFormat] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "axisFormat")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.TimeAxisFormat(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.AxisFormat](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.TimeAxisFormat, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.AxisFormat](__obj.axisFormat, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("axisFormat"), __scope, false))

  }

  trait DefaultReportHighLowChartFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.HighLowChart] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.HighLowChart] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chart")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "highLowDataset")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "highLowPlot")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.HighLowChart(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Chart](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HighLowDataset](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HighLowPlot](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.HighLowChart, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Chart](__obj.chart, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chart"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HighLowDataset](__obj.highLowDataset, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("highLowDataset"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HighLowPlot](__obj.highLowPlot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("highLowPlot"), __scope, false))

  }

  trait DefaultReportHighLowDatasetFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.HighLowDataset] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.HighLowDataset] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "dataset")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "seriesExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "dateExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "highExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "lowExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "openExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "closeExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "volumeExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "itemHyperlink")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      com.iofficecorp.jasperserver.pumped.report.HighLowDataset(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Dataset](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.SeriesExpression](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DateExpression](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HighExpression](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LowExpression](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.OpenExpression](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CloseExpression](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.VolumeExpression](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ItemHyperlink](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.HighLowDataset, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataset map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Dataset](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("dataset"), __scope, false) } getOrElse {Nil},
        __obj.seriesExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.SeriesExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("seriesExpression"), __scope, false) } getOrElse {Nil},
        __obj.dateExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DateExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("dateExpression"), __scope, false) } getOrElse {Nil},
        __obj.highExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HighExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("highExpression"), __scope, false) } getOrElse {Nil},
        __obj.lowExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.LowExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("lowExpression"), __scope, false) } getOrElse {Nil},
        __obj.openExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.OpenExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("openExpression"), __scope, false) } getOrElse {Nil},
        __obj.closeExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CloseExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("closeExpression"), __scope, false) } getOrElse {Nil},
        __obj.volumeExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.VolumeExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("volumeExpression"), __scope, false) } getOrElse {Nil},
        __obj.itemHyperlink map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ItemHyperlink](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("itemHyperlink"), __scope, false) } getOrElse {Nil})

  }

  def buildReportIsShowCloseTicksFormat = new DefaultReportIsShowCloseTicksFormat {}
  trait DefaultReportIsShowCloseTicksFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowCloseTicks] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsShowCloseTicks] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsShowCloseTicks.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsShowCloseTicks.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsShowCloseTicks, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsShowOpenTicksFormat = new DefaultReportIsShowOpenTicksFormat {}
  trait DefaultReportIsShowOpenTicksFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowOpenTicks] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsShowOpenTicks] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsShowOpenTicks.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsShowOpenTicks.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsShowOpenTicks, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportHighLowPlotFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.HighLowPlot] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.HighLowPlot] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "plot")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "timeAxisLabelExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "timeAxisFormat")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueAxisLabelExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueAxisFormat")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "domainAxisMinValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "domainAxisMaxValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "rangeAxisMinValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "rangeAxisMaxValueExpression")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      com.iofficecorp.jasperserver.pumped.report.HighLowPlot(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Plot](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TimeAxisLabelExpression](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TimeAxisFormat](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisLabelExpression](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisFormat](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMinValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMaxValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMinValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMaxValueExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@isShowCloseTicks").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsShowCloseTicks](x, scalaxb.ElemName(node) :: stack)) } map { "@isShowCloseTicks" -> _ },
        (node \ "@isShowOpenTicks").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsShowOpenTicks](x, scalaxb.ElemName(node) :: stack)) } map { "@isShowOpenTicks" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.HighLowPlot, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@isShowCloseTicks", _) => __obj.attr_isShowCloseTicks foreach { x => attr = scala.xml.Attribute(null, "isShowCloseTicks", x.toString, attr) }
        case ("@isShowOpenTicks", _) => __obj.attr_isShowOpenTicks foreach { x => attr = scala.xml.Attribute(null, "isShowOpenTicks", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.HighLowPlot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Plot](__obj.plot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("plot"), __scope, false),
        __obj.timeAxisLabelExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.TimeAxisLabelExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("timeAxisLabelExpression"), __scope, false) } getOrElse {Nil},
        __obj.timeAxisFormat map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.TimeAxisFormat](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("timeAxisFormat"), __scope, false) } getOrElse {Nil},
        __obj.valueAxisLabelExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisLabelExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueAxisLabelExpression"), __scope, false) } getOrElse {Nil},
        __obj.valueAxisFormat map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisFormat](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueAxisFormat"), __scope, false) } getOrElse {Nil},
        __obj.domainAxisMinValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMinValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("domainAxisMinValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.domainAxisMaxValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMaxValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("domainAxisMaxValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.rangeAxisMinValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMinValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("rangeAxisMinValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.rangeAxisMaxValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMaxValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("rangeAxisMaxValueExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportDateExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.DateExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.DateExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.DateExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.DateExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportHighExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.HighExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.HighExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.HighExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.HighExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportLowExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.LowExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.LowExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.LowExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.LowExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportOpenExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.OpenExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.OpenExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.OpenExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.OpenExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportCloseExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.CloseExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.CloseExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.CloseExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.CloseExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportVolumeExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.VolumeExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.VolumeExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.VolumeExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.VolumeExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportCandlestickChartFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.CandlestickChart] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.CandlestickChart] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chart")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "highLowDataset")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "candlestickPlot")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.CandlestickChart(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Chart](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HighLowDataset](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CandlestickPlot](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.CandlestickChart, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Chart](__obj.chart, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chart"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HighLowDataset](__obj.highLowDataset, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("highLowDataset"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CandlestickPlot](__obj.candlestickPlot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("candlestickPlot"), __scope, false))

  }

  def buildReportIsShowVolumeFormat = new DefaultReportIsShowVolumeFormat {}
  trait DefaultReportIsShowVolumeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowVolume] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsShowVolume] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsShowVolume.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsShowVolume.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsShowVolume, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportCandlestickPlotFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.CandlestickPlot] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.CandlestickPlot] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "plot")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "timeAxisLabelExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "timeAxisFormat")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueAxisLabelExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueAxisFormat")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "domainAxisMinValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "domainAxisMaxValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "rangeAxisMinValueExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "rangeAxisMaxValueExpression")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      com.iofficecorp.jasperserver.pumped.report.CandlestickPlot(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Plot](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TimeAxisLabelExpression](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TimeAxisFormat](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisLabelExpression](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisFormat](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMinValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMaxValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMinValueExpression](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMaxValueExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@isShowVolume").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsShowVolume](x, scalaxb.ElemName(node) :: stack)) } map { "@isShowVolume" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.CandlestickPlot, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@isShowVolume", _) => __obj.attr_isShowVolume foreach { x => attr = scala.xml.Attribute(null, "isShowVolume", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.CandlestickPlot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Plot](__obj.plot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("plot"), __scope, false),
        __obj.timeAxisLabelExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.TimeAxisLabelExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("timeAxisLabelExpression"), __scope, false) } getOrElse {Nil},
        __obj.timeAxisFormat map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.TimeAxisFormat](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("timeAxisFormat"), __scope, false) } getOrElse {Nil},
        __obj.valueAxisLabelExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisLabelExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueAxisLabelExpression"), __scope, false) } getOrElse {Nil},
        __obj.valueAxisFormat map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueAxisFormat](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueAxisFormat"), __scope, false) } getOrElse {Nil},
        __obj.domainAxisMinValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMinValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("domainAxisMinValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.domainAxisMaxValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DomainAxisMaxValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("domainAxisMaxValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.rangeAxisMinValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMinValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("rangeAxisMinValueExpression"), __scope, false) } getOrElse {Nil},
        __obj.rangeAxisMaxValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.RangeAxisMaxValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("rangeAxisMaxValueExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportMeterChartFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.MeterChart] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.MeterChart] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chart")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueDataset")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "meterPlot")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.MeterChart(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Chart](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueDataset](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.MeterPlot](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.MeterChart, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Chart](__obj.chart, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chart"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueDataset](__obj.valueDataset, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueDataset"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.MeterPlot](__obj.meterPlot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("meterPlot"), __scope, false))

  }

  trait DefaultReportValueDatasetFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ValueDataset] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ValueDataset] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "dataset")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueExpression")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.ValueDataset(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Dataset](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueExpression](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ValueDataset, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataset map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Dataset](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("dataset"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueExpression](__obj.valueExpression, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueExpression"), __scope, false))

  }

  def buildReportShapeFormat = new DefaultReportShapeFormat {}
  trait DefaultReportShapeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.Shape] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.Shape] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.Shape.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.Shape.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.Shape, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportMeterPlotFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.MeterPlot] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.MeterPlot] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "plot")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "tickLabelFont")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueDisplay")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "dataRange")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "meterInterval")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.iofficecorp.jasperserver.pumped.report.MeterPlot(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Plot](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TickLabelFont](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueDisplay](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DataRange](p4, scalaxb.ElemName(node) :: stack),
        p5 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.MeterInterval](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@shape").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Shape](x, scalaxb.ElemName(node) :: stack)) } map { "@shape" -> _ },
        (node \ "@angle").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@angle" -> _ },
        (node \ "@units").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@units" -> _ },
        (node \ "@tickInterval").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@tickInterval" -> _ },
        (node \ "@meterColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@meterColor" -> _ },
        (node \ "@needleColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@needleColor" -> _ },
        (node \ "@tickColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@tickColor" -> _ },
        (node \ "@tickCount").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@tickCount" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.MeterPlot, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@shape", _) => __obj.attr_shape foreach { x => attr = scala.xml.Attribute(null, "shape", x.toString, attr) }
        case ("@angle", _) => __obj.attr_angle foreach { x => attr = scala.xml.Attribute(null, "angle", x.toString, attr) }
        case ("@units", _) => __obj.attr_units foreach { x => attr = scala.xml.Attribute(null, "units", x.toString, attr) }
        case ("@tickInterval", _) => __obj.attr_tickInterval foreach { x => attr = scala.xml.Attribute(null, "tickInterval", x.toString, attr) }
        case ("@meterColor", _) => __obj.attr_meterColor foreach { x => attr = scala.xml.Attribute(null, "meterColor", x.toString, attr) }
        case ("@needleColor", _) => __obj.attr_needleColor foreach { x => attr = scala.xml.Attribute(null, "needleColor", x.toString, attr) }
        case ("@tickColor", _) => __obj.attr_tickColor foreach { x => attr = scala.xml.Attribute(null, "tickColor", x.toString, attr) }
        case ("@tickCount", _) => __obj.attr_tickCount foreach { x => attr = scala.xml.Attribute(null, "tickCount", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.MeterPlot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Plot](__obj.plot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("plot"), __scope, false),
        __obj.tickLabelFont map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.TickLabelFont](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("tickLabelFont"), __scope, false) } getOrElse {Nil},
        __obj.valueDisplay map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueDisplay](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueDisplay"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DataRange](__obj.dataRange, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("dataRange"), __scope, false),
        __obj.meterInterval flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.MeterInterval](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("meterInterval"), __scope, false) })

  }

  trait DefaultReportValueDisplayFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ValueDisplay] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ValueDisplay] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "font")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.ValueDisplay(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Font](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@color").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@color" -> _ },
        (node \ "@mask").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@mask" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.ValueDisplay, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@color", _) => __obj.attr_color foreach { x => attr = scala.xml.Attribute(null, "color", x.toString, attr) }
        case ("@mask", _) => __obj.attr_mask foreach { x => attr = scala.xml.Attribute(null, "mask", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ValueDisplay, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.font map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Font](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("font"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportDataRangeFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.DataRange] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.DataRange] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "lowExpression")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "highExpression")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.DataRange(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LowExpression](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HighExpression](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.DataRange, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.LowExpression](__obj.lowExpression, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("lowExpression"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HighExpression](__obj.highExpression, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("highExpression"), __scope, false))

  }

  trait DefaultReportMeterIntervalFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.MeterInterval] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.MeterInterval] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "dataRange")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.MeterInterval(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DataRange](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@label").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@label" -> _ },
        (node \ "@color").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@color" -> _ },
        (node \ "@alpha").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@alpha" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.MeterInterval, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@label", _) => __obj.attr_label foreach { x => attr = scala.xml.Attribute(null, "label", x.toString, attr) }
        case ("@color", _) => __obj.attr_color foreach { x => attr = scala.xml.Attribute(null, "color", x.toString, attr) }
        case ("@alpha", _) => __obj.attr_alpha foreach { x => attr = scala.xml.Attribute(null, "alpha", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.MeterInterval, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DataRange](__obj.dataRange, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("dataRange"), __scope, false))

  }

  trait DefaultReportThermometerChartFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ThermometerChart] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ThermometerChart] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chart")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueDataset")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "thermometerPlot")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.ThermometerChart(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Chart](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueDataset](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ThermometerPlot](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ThermometerChart, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Chart](__obj.chart, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chart"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueDataset](__obj.valueDataset, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueDataset"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ThermometerPlot](__obj.thermometerPlot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("thermometerPlot"), __scope, false))

  }

  def buildReportValueLocationFormat = new DefaultReportValueLocationFormat {}
  trait DefaultReportValueLocationFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ValueLocation] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.ValueLocation] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.ValueLocation.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.ValueLocation.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.ValueLocation, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsShowValueLinesFormat = new DefaultReportIsShowValueLinesFormat {}
  trait DefaultReportIsShowValueLinesFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsShowValueLines] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsShowValueLines] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsShowValueLines.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsShowValueLines.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsShowValueLines, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportThermometerPlotFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ThermometerPlot] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ThermometerPlot] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "plot")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueDisplay")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "dataRange")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "lowRange")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "mediumRange")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "highRange")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      com.iofficecorp.jasperserver.pumped.report.ThermometerPlot(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Plot](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueDisplay](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DataRange](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LowRange](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.MediumRange](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HighRange](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@valueLocation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueLocation](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueLocation](scala.xml.Text("bulb"), scalaxb.ElemName(node) :: stack))) map { "@valueLocation" -> _ },
        (node \ "@isShowValueLines").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsShowValueLines](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsShowValueLines](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@isShowValueLines" -> _ },
        (node \ "@mercuryColor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@mercuryColor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.ThermometerPlot, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@valueLocation", _) => if (__obj.attr_valueLocation.toString != "bulb") attr = scala.xml.Attribute(null, "valueLocation", __obj.attr_valueLocation.toString, attr)
        case ("@isShowValueLines", _) => if (__obj.attr_isShowValueLines.toString != "false") attr = scala.xml.Attribute(null, "isShowValueLines", __obj.attr_isShowValueLines.toString, attr)
        case ("@mercuryColor", _) => __obj.attr_mercuryColor foreach { x => attr = scala.xml.Attribute(null, "mercuryColor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ThermometerPlot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Plot](__obj.plot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("plot"), __scope, false),
        __obj.valueDisplay map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueDisplay](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueDisplay"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DataRange](__obj.dataRange, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("dataRange"), __scope, false),
        __obj.lowRange map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.LowRange](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("lowRange"), __scope, false) } getOrElse {Nil},
        __obj.mediumRange map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.MediumRange](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("mediumRange"), __scope, false) } getOrElse {Nil},
        __obj.highRange map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.HighRange](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("highRange"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportLowRangeFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.LowRange] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.LowRange] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "dataRange")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.LowRange(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DataRange](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.LowRange, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DataRange](__obj.dataRange, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("dataRange"), __scope, false))

  }

  trait DefaultReportMediumRangeFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.MediumRange] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.MediumRange] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "dataRange")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.MediumRange(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DataRange](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.MediumRange, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DataRange](__obj.dataRange, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("dataRange"), __scope, false))

  }

  trait DefaultReportHighRangeFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.HighRange] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.HighRange] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "dataRange")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.HighRange(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DataRange](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.HighRange, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DataRange](__obj.dataRange, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("dataRange"), __scope, false))

  }

  trait DefaultReportMultiAxisChartFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.MultiAxisChart] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.MultiAxisChart] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chart")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "multiAxisPlot")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.MultiAxisChart(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Chart](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.MultiAxisPlot](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.MultiAxisChart, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Chart](__obj.chart, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chart"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.MultiAxisPlot](__obj.multiAxisPlot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("multiAxisPlot"), __scope, false))

  }

  trait DefaultReportMultiAxisPlotFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.MultiAxisPlot] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.MultiAxisPlot] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "plot")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "axis")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.MultiAxisPlot(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Plot](p1, scalaxb.ElemName(node) :: stack),
        p2 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Axis](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.MultiAxisPlot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Plot](__obj.plot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("plot"), __scope, false),
        __obj.axis flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Axis](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("axis"), __scope, false) })

  }

  def buildReportPositionType3Format = new DefaultReportPositionType3Format {}
  trait DefaultReportPositionType3Format extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.PositionType3] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.PositionType3] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.PositionType3.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.PositionType3.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.PositionType3, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportAxisFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Axis] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Axis] =
      phrase((((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "barChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BarChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "bar3DChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Bar3DChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xyBarChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XyBarChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "stackedBarChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StackedBarChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "stackedBar3DChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StackedBar3DChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "lineChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LineChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xyLineChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XyLineChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "areaChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.AreaChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xyAreaChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XyAreaChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "scatterChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ScatterChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "bubbleChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BubbleChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "timeSeriesChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TimeSeriesChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "highLowChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HighLowChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "candlestickChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CandlestickChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "stackedAreaChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StackedAreaChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "ganttChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.GanttChart](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.Axis(p1,
        scala.collection.immutable.ListMap(List(
        (node \ "@position").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PositionType3](x, scalaxb.ElemName(node) :: stack)) } map { "@position" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Axis, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@position", _) => __obj.attr_position foreach { x => attr = scala.xml.Attribute(null, "position", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Axis, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.axisoption) map {x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.report.AxisOption]](x, x.namespace, x.key, __scope, false)}).get)

  }

  def buildReportIsRepeatColumnHeadersFormat = new DefaultReportIsRepeatColumnHeadersFormat {}
  trait DefaultReportIsRepeatColumnHeadersFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsRepeatColumnHeaders] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsRepeatColumnHeaders] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsRepeatColumnHeaders.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsRepeatColumnHeaders.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsRepeatColumnHeaders, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportIsRepeatRowHeadersFormat = new DefaultReportIsRepeatRowHeadersFormat {}
  trait DefaultReportIsRepeatRowHeadersFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsRepeatRowHeaders] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsRepeatRowHeaders] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsRepeatRowHeaders.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsRepeatRowHeaders.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsRepeatRowHeaders, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportRunDirectionFormat = new DefaultReportRunDirectionFormat {}
  trait DefaultReportRunDirectionFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.RunDirection] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.RunDirection] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.RunDirection.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.RunDirection.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.RunDirection, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportHorizontalPositionFormat = new DefaultReportHorizontalPositionFormat {}
  trait DefaultReportHorizontalPositionFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.HorizontalPosition] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.HorizontalPosition] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.HorizontalPosition.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.HorizontalPosition.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.HorizontalPosition, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportCrosstabFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Crosstab] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Crosstab] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "reportElement")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "box")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "crosstabParameter")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "parametersMapExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "crosstabDataset")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "titleCell")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "crosstabHeaderCell")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "rowGroup")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "columnGroup")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "measure")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "crosstabCell")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "whenNoDataCell")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      com.iofficecorp.jasperserver.pumped.report.Crosstab(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ReportElement](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Box](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CrosstabParameter](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ParametersMapExpression](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CrosstabDataset](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CrosstabColumnCell](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CrosstabHeaderCell](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.RowGroup](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ColumnGroup](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Measure](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CrosstabCell](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.WhenNoDataCell](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@isRepeatColumnHeaders").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsRepeatColumnHeaders](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsRepeatColumnHeaders](scala.xml.Text("true"), scalaxb.ElemName(node) :: stack))) map { "@isRepeatColumnHeaders" -> _ },
        (node \ "@isRepeatRowHeaders").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsRepeatRowHeaders](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsRepeatRowHeaders](scala.xml.Text("true"), scalaxb.ElemName(node) :: stack))) map { "@isRepeatRowHeaders" -> _ },
        (node \ "@columnBreakOffset").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("10"), scalaxb.ElemName(node) :: stack))) map { "@columnBreakOffset" -> _ },
        (node \ "@runDirection").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.RunDirection](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.RunDirection](scala.xml.Text("LTR"), scalaxb.ElemName(node) :: stack))) map { "@runDirection" -> _ },
        (node \ "@ignoreWidth").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@ignoreWidth" -> _ },
        (node \ "@horizontalPosition").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HorizontalPosition](x, scalaxb.ElemName(node) :: stack)) } map { "@horizontalPosition" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Crosstab, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@isRepeatColumnHeaders", _) => if (__obj.attr_isRepeatColumnHeaders.toString != "true") attr = scala.xml.Attribute(null, "isRepeatColumnHeaders", __obj.attr_isRepeatColumnHeaders.toString, attr)
        case ("@isRepeatRowHeaders", _) => if (__obj.attr_isRepeatRowHeaders.toString != "true") attr = scala.xml.Attribute(null, "isRepeatRowHeaders", __obj.attr_isRepeatRowHeaders.toString, attr)
        case ("@columnBreakOffset", _) => if (__obj.attr_columnBreakOffset.toString != "10") attr = scala.xml.Attribute(null, "columnBreakOffset", __obj.attr_columnBreakOffset.toString, attr)
        case ("@runDirection", _) => if (__obj.attr_runDirection.toString != "LTR") attr = scala.xml.Attribute(null, "runDirection", __obj.attr_runDirection.toString, attr)
        case ("@ignoreWidth", _) => __obj.attr_ignoreWidth foreach { x => attr = scala.xml.Attribute(null, "ignoreWidth", x.toString, attr) }
        case ("@horizontalPosition", _) => __obj.attr_horizontalPosition foreach { x => attr = scala.xml.Attribute(null, "horizontalPosition", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Crosstab, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ReportElement](__obj.reportElement, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("reportElement"), __scope, false),
        __obj.box map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Box](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("box"), __scope, false) } getOrElse {Nil},
        __obj.crosstabParameter flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CrosstabParameter](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("crosstabParameter"), __scope, false) },
        __obj.parametersMapExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ParametersMapExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("parametersMapExpression"), __scope, false) } getOrElse {Nil},
        __obj.crosstabDataset map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CrosstabDataset](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("crosstabDataset"), __scope, false) } getOrElse {Nil},
        __obj.titleCell map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CrosstabColumnCell](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("titleCell"), __scope, false) } getOrElse {Nil},
        __obj.crosstabHeaderCell map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CrosstabHeaderCell](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("crosstabHeaderCell"), __scope, false) } getOrElse {Nil},
        __obj.rowGroup flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.RowGroup](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("rowGroup"), __scope, false) },
        __obj.columnGroup flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ColumnGroup](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("columnGroup"), __scope, false) },
        __obj.measure flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Measure](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("measure"), __scope, false) },
        __obj.crosstabCell flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CrosstabCell](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("crosstabCell"), __scope, false) },
        __obj.whenNoDataCell map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.WhenNoDataCell](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("whenNoDataCell"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportCrosstabParameterFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.CrosstabParameter] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.CrosstabParameter] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "parameterValueExpression")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.CrosstabParameter(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ParameterValueExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@class").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("java.lang.String"), scalaxb.ElemName(node) :: stack))) map { "@class" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.CrosstabParameter, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.attr_name.toString, attr)
        case ("@class", _) => if (__obj.attr_class.toString != "java.lang.String") attr = scala.xml.Attribute(null, "class", __obj.attr_class.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.CrosstabParameter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.parameterValueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ParameterValueExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("parameterValueExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportParameterValueExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ParameterValueExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ParameterValueExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.ParameterValueExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ParameterValueExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  def buildReportIsDataPreSortedFormat = new DefaultReportIsDataPreSortedFormat {}
  trait DefaultReportIsDataPreSortedFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.IsDataPreSorted] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.IsDataPreSorted] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.IsDataPreSorted.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.IsDataPreSorted.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.IsDataPreSorted, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportCrosstabDatasetFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.CrosstabDataset] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.CrosstabDataset] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "dataset")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.CrosstabDataset(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Dataset](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@isDataPreSorted").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsDataPreSorted](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.IsDataPreSorted](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@isDataPreSorted" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.CrosstabDataset, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@isDataPreSorted", _) => if (__obj.attr_isDataPreSorted.toString != "false") attr = scala.xml.Attribute(null, "isDataPreSorted", __obj.attr_isDataPreSorted.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.CrosstabDataset, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.dataset map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Dataset](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("dataset"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportCrosstabHeaderCellFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.CrosstabHeaderCell] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.CrosstabHeaderCell] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "cellContents")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.CrosstabHeaderCell(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CellContents](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.CrosstabHeaderCell, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CellContents](__obj.cellContents, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("cellContents"), __scope, false))

  }

  def buildReportTotalPositionFormat = new DefaultReportTotalPositionFormat {}
  trait DefaultReportTotalPositionFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TotalPosition] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.TotalPosition] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.TotalPosition.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.TotalPosition.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.TotalPosition, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportHeaderPositionFormat = new DefaultReportHeaderPositionFormat {}
  trait DefaultReportHeaderPositionFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.HeaderPosition] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.HeaderPosition] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.HeaderPosition.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.HeaderPosition.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.HeaderPosition, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportRowGroupFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.RowGroup] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.RowGroup] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "bucket")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "crosstabRowHeader")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "crosstabTotalRowHeader")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.RowGroup(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Bucket](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CrosstabRowHeader](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CrosstabTotalRowHeader](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@width").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@width" -> _ },
        (node \ "@totalPosition").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TotalPosition](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TotalPosition](scala.xml.Text("None"), scalaxb.ElemName(node) :: stack))) map { "@totalPosition" -> _ },
        (node \ "@headerPosition").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HeaderPosition](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HeaderPosition](scala.xml.Text("Top"), scalaxb.ElemName(node) :: stack))) map { "@headerPosition" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.RowGroup, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.attr_name.toString, attr)
        case ("@width", _) => attr = scala.xml.Attribute(null, "width", __obj.attr_width.toString, attr)
        case ("@totalPosition", _) => if (__obj.attr_totalPosition.toString != "None") attr = scala.xml.Attribute(null, "totalPosition", __obj.attr_totalPosition.toString, attr)
        case ("@headerPosition", _) => if (__obj.attr_headerPosition.toString != "Top") attr = scala.xml.Attribute(null, "headerPosition", __obj.attr_headerPosition.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.RowGroup, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Bucket](__obj.bucket, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("bucket"), __scope, false),
        __obj.crosstabRowHeader map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CrosstabRowHeader](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("crosstabRowHeader"), __scope, false) } getOrElse {Nil},
        __obj.crosstabTotalRowHeader map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CrosstabTotalRowHeader](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("crosstabTotalRowHeader"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportCrosstabRowHeaderFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.CrosstabRowHeader] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.CrosstabRowHeader] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "cellContents")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.CrosstabRowHeader(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CellContents](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.CrosstabRowHeader, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.cellContents map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CellContents](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("cellContents"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportCrosstabTotalRowHeaderFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.CrosstabTotalRowHeader] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.CrosstabTotalRowHeader] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "cellContents")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.CrosstabTotalRowHeader(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CellContents](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.CrosstabTotalRowHeader, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.cellContents map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CellContents](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("cellContents"), __scope, false) } getOrElse {Nil})

  }

  def buildReportTotalPositionTypeFormat = new DefaultReportTotalPositionTypeFormat {}
  trait DefaultReportTotalPositionTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.TotalPositionType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.TotalPositionType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.TotalPositionType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.TotalPositionType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.TotalPositionType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportHeaderPositionTypeFormat = new DefaultReportHeaderPositionTypeFormat {}
  trait DefaultReportHeaderPositionTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.HeaderPositionType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.HeaderPositionType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.HeaderPositionType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.HeaderPositionType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.HeaderPositionType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportColumnGroupFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ColumnGroup] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ColumnGroup] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "bucket")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "crosstabHeader")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "crosstabColumnHeader")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "crosstabTotalColumnHeader")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.iofficecorp.jasperserver.pumped.report.ColumnGroup(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Bucket](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CrosstabHeader](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CrosstabColumnHeader](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CrosstabTotalColumnHeader](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@height").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@height" -> _ },
        (node \ "@totalPosition").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TotalPositionType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TotalPositionType](scala.xml.Text("None"), scalaxb.ElemName(node) :: stack))) map { "@totalPosition" -> _ },
        (node \ "@headerPosition").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HeaderPositionType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HeaderPositionType](scala.xml.Text("Left"), scalaxb.ElemName(node) :: stack))) map { "@headerPosition" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.ColumnGroup, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.attr_name.toString, attr)
        case ("@height", _) => attr = scala.xml.Attribute(null, "height", __obj.attr_height.toString, attr)
        case ("@totalPosition", _) => if (__obj.attr_totalPosition.toString != "None") attr = scala.xml.Attribute(null, "totalPosition", __obj.attr_totalPosition.toString, attr)
        case ("@headerPosition", _) => if (__obj.attr_headerPosition.toString != "Left") attr = scala.xml.Attribute(null, "headerPosition", __obj.attr_headerPosition.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ColumnGroup, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Bucket](__obj.bucket, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("bucket"), __scope, false),
        __obj.crosstabHeader map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CrosstabHeader](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("crosstabHeader"), __scope, false) } getOrElse {Nil},
        __obj.crosstabColumnHeader map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CrosstabColumnHeader](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("crosstabColumnHeader"), __scope, false) } getOrElse {Nil},
        __obj.crosstabTotalColumnHeader map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CrosstabTotalColumnHeader](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("crosstabTotalColumnHeader"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportCrosstabColumnHeaderFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.CrosstabColumnHeader] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.CrosstabColumnHeader] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "cellContents")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.CrosstabColumnHeader(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CellContents](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.CrosstabColumnHeader, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.cellContents map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CellContents](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("cellContents"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportCrosstabTotalColumnHeaderFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.CrosstabTotalColumnHeader] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.CrosstabTotalColumnHeader] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "cellContents")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.CrosstabTotalColumnHeader(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CellContents](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.CrosstabTotalColumnHeader, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.cellContents map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CellContents](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("cellContents"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportCrosstabHeaderFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.CrosstabHeader] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.CrosstabHeader] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "cellContents")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.CrosstabHeader(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CellContents](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.CrosstabHeader, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CellContents](__obj.cellContents, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("cellContents"), __scope, false))

  }

  def buildReportOrderTypeFormat = new DefaultReportOrderTypeFormat {}
  trait DefaultReportOrderTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.OrderType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.OrderType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.OrderType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.OrderType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.OrderType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportBucketFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Bucket] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Bucket] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "bucketExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "orderByExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "comparatorExpression")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.Bucket(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BucketExpression](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.OrderByExpression](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ComparatorExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@class").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("java.lang.String"), scalaxb.ElemName(node) :: stack))) map { "@class" -> _ },
        (node \ "@order").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.OrderType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.OrderType](scala.xml.Text("Ascending"), scalaxb.ElemName(node) :: stack))) map { "@order" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Bucket, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@class", _) => if (__obj.attr_class.toString != "java.lang.String") attr = scala.xml.Attribute(null, "class", __obj.attr_class.toString, attr)
        case ("@order", _) => if (__obj.attr_order.toString != "Ascending") attr = scala.xml.Attribute(null, "order", __obj.attr_order.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Bucket, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.bucketExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.BucketExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("bucketExpression"), __scope, false) } getOrElse {Nil},
        __obj.orderByExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.OrderByExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("orderByExpression"), __scope, false) } getOrElse {Nil},
        __obj.comparatorExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ComparatorExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("comparatorExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportBucketExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.BucketExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.BucketExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.BucketExpression(Seq.concat(p1.toList),
        scala.collection.immutable.ListMap(List(
        (node \ "@class").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@class" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.BucketExpression, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@class", _) => __obj.attr_class foreach { x => attr = scala.xml.Attribute(null, "class", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.BucketExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportOrderByExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.OrderByExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.OrderByExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.OrderByExpression(Seq.concat(p1.toList),
        scala.collection.immutable.ListMap(List(
        (node \ "@class").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@class" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.OrderByExpression, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@class", _) => __obj.attr_class foreach { x => attr = scala.xml.Attribute(null, "class", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.OrderByExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportComparatorExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ComparatorExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ComparatorExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.ComparatorExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ComparatorExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  def buildReportPercentageOfFormat = new DefaultReportPercentageOfFormat {}
  trait DefaultReportPercentageOfFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.PercentageOf] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.PercentageOf] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.PercentageOf.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.PercentageOf.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.PercentageOf, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportMeasureFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Measure] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Measure] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "measureExpression")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.Measure(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.MeasureExpression](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@class").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@class" -> _ },
        (node \ "@calculation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.AggregationCalculationType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.AggregationCalculationType](scala.xml.Text("Nothing"), scalaxb.ElemName(node) :: stack))) map { "@calculation" -> _ },
        (node \ "@incrementerFactoryClass").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@incrementerFactoryClass" -> _ },
        (node \ "@percentageOf").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PercentageOf](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PercentageOf](scala.xml.Text("None"), scalaxb.ElemName(node) :: stack))) map { "@percentageOf" -> _ },
        (node \ "@percentageCalculatorClass").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@percentageCalculatorClass" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Measure, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.attr_name.toString, attr)
        case ("@class", _) => __obj.attr_class foreach { x => attr = scala.xml.Attribute(null, "class", x.toString, attr) }
        case ("@calculation", _) => if (__obj.attr_calculation.toString != "Nothing") attr = scala.xml.Attribute(null, "calculation", __obj.attr_calculation.toString, attr)
        case ("@incrementerFactoryClass", _) => __obj.attr_incrementerFactoryClass foreach { x => attr = scala.xml.Attribute(null, "incrementerFactoryClass", x.toString, attr) }
        case ("@percentageOf", _) => if (__obj.attr_percentageOf.toString != "None") attr = scala.xml.Attribute(null, "percentageOf", __obj.attr_percentageOf.toString, attr)
        case ("@percentageCalculatorClass", _) => __obj.attr_percentageCalculatorClass foreach { x => attr = scala.xml.Attribute(null, "percentageCalculatorClass", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Measure, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.measureExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.MeasureExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("measureExpression"), __scope, false) } getOrElse {Nil})

  }

  def buildReportAggregationCalculationTypeFormat = new DefaultReportAggregationCalculationTypeFormat {}
  trait DefaultReportAggregationCalculationTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.AggregationCalculationType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.AggregationCalculationType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.AggregationCalculationType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.AggregationCalculationType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.AggregationCalculationType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportMeasureExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.MeasureExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.MeasureExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.MeasureExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.MeasureExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportCrosstabCellFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.CrosstabCell] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.CrosstabCell] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "cellContents")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.CrosstabCell(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CellContents](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@width").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@width" -> _ },
        (node \ "@height").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@height" -> _ },
        (node \ "@rowTotalGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@rowTotalGroup" -> _ },
        (node \ "@columnTotalGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@columnTotalGroup" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.CrosstabCell, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@width", _) => __obj.attr_width foreach { x => attr = scala.xml.Attribute(null, "width", x.toString, attr) }
        case ("@height", _) => __obj.attr_height foreach { x => attr = scala.xml.Attribute(null, "height", x.toString, attr) }
        case ("@rowTotalGroup", _) => __obj.attr_rowTotalGroup foreach { x => attr = scala.xml.Attribute(null, "rowTotalGroup", x.toString, attr) }
        case ("@columnTotalGroup", _) => __obj.attr_columnTotalGroup foreach { x => attr = scala.xml.Attribute(null, "columnTotalGroup", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.CrosstabCell, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.cellContents map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CellContents](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("cellContents"), __scope, false) } getOrElse {Nil})

  }

  def buildReportModeType2Format = new DefaultReportModeType2Format {}
  trait DefaultReportModeType2Format extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ModeType2] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.ModeType2] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.ModeType2.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.ModeType2.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.ModeType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportCellContentsFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.CellContents] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.CellContents] =
      phrase(safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "property")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "box")) ~ 
      safeRep(((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "line")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Line](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "rectangle")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Rectangle](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "ellipse")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Ellipse](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "image")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Image](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "staticText")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StaticText](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "textField")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TextField](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "subreport")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Subreport](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "elementGroup")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ElementGroup](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "frame")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Frame](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "componentElement")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ComponentElement](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "genericElement")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.GenericElement](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.CellContents(p1 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Property](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Box](_, scalaxb.ElemName(node) :: stack) },
        p3,
        scala.collection.immutable.ListMap(List(
        (node \ "@backcolor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@backcolor" -> _ },
        (node \ "@mode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ModeType2](x, scalaxb.ElemName(node) :: stack)) } map { "@mode" -> _ },
        (node \ "@style").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@style" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.CellContents, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@backcolor", _) => __obj.attr_backcolor foreach { x => attr = scala.xml.Attribute(null, "backcolor", x.toString, attr) }
        case ("@mode", _) => __obj.attr_mode foreach { x => attr = scala.xml.Attribute(null, "mode", x.toString, attr) }
        case ("@style", _) => __obj.attr_style foreach { x => attr = scala.xml.Attribute(null, "style", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.CellContents, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.property flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Property](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("property"), __scope, false) },
        __obj.box map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Box](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("box"), __scope, false) } getOrElse {Nil},
        __obj.cellcontentsoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.report.CellContentsOption]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultReportWhenNoDataCellFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.WhenNoDataCell] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.WhenNoDataCell] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "cellContents")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.WhenNoDataCell(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CellContents](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.WhenNoDataCell, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CellContents](__obj.cellContents, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("cellContents"), __scope, false))

  }

  def buildReportBorderSplitTypeFormat = new DefaultReportBorderSplitTypeFormat {}
  trait DefaultReportBorderSplitTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.BorderSplitType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.BorderSplitType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.BorderSplitType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.BorderSplitType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.BorderSplitType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportFrameFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.Frame] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.Frame] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "reportElement")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "box")) ~ 
      safeRep(((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "break")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Break](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "line")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Line](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "rectangle")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Rectangle](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "ellipse")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Ellipse](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "image")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Image](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "staticText")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StaticText](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "textField")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TextField](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "subreport")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Subreport](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "pieChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PieChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "pie3DChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Pie3DChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "barChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BarChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "bar3DChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Bar3DChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xyBarChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XyBarChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "stackedBarChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StackedBarChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "stackedBar3DChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StackedBar3DChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "lineChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LineChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xyLineChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XyLineChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "areaChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.AreaChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "xyAreaChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.XyAreaChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "scatterChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ScatterChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "bubbleChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BubbleChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "timeSeriesChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TimeSeriesChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "highLowChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.HighLowChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "candlestickChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CandlestickChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "meterChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.MeterChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "thermometerChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ThermometerChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "multiAxisChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.MultiAxisChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "stackedAreaChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StackedAreaChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "ganttChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.GanttChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "elementGroup")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ElementGroup](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "crosstab")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Crosstab](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "frame")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Frame](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "componentElement")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ComponentElement](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "genericElement")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.GenericElement](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.Frame(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ReportElement](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Box](_, scalaxb.ElemName(node) :: stack) },
        p3,
        scala.collection.immutable.ListMap(List(
        (node \ "@borderSplitType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BorderSplitType](x, scalaxb.ElemName(node) :: stack)) } map { "@borderSplitType" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.Frame, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@borderSplitType", _) => __obj.attr_borderSplitType foreach { x => attr = scala.xml.Attribute(null, "borderSplitType", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.Frame, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ReportElement](__obj.reportElement, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("reportElement"), __scope, false),
        __obj.box map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Box](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("box"), __scope, false) } getOrElse {Nil},
        __obj.frameoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[com.iofficecorp.jasperserver.pumped.report.FrameOption]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultReportGanttChartFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.GanttChart] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.GanttChart] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "chart")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "ganttDataset")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "barPlot")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.GanttChart(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Chart](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.GanttDataset](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BarPlot](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.GanttChart, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Chart](__obj.chart, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("chart"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.GanttDataset](__obj.ganttDataset, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("ganttDataset"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.BarPlot](__obj.barPlot, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("barPlot"), __scope, false))

  }

  trait DefaultReportGanttDatasetFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.GanttDataset] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.GanttDataset] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "dataset")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "ganttSeries")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.GanttDataset(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Dataset](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.GanttSeries](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.GanttDataset, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataset map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Dataset](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("dataset"), __scope, false) } getOrElse {Nil},
        __obj.ganttSeries flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.GanttSeries](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("ganttSeries"), __scope, false) })

  }

  trait DefaultReportGanttSeriesFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.GanttSeries] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.GanttSeries] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "seriesExpression")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "taskExpression")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "subtaskExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "startDateExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "endDateExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "percentExpression")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      com.iofficecorp.jasperserver.pumped.report.GanttSeries(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.SeriesExpression](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.TaskExpression](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.SubtaskExpression](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.StartDateExpression](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.EndDateExpression](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.PercentExpression](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.GanttSeries, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.seriesExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.SeriesExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("seriesExpression"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.TaskExpression](__obj.taskExpression, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("taskExpression"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.SubtaskExpression](__obj.subtaskExpression, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("subtaskExpression"), __scope, false),
        __obj.startDateExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.StartDateExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("startDateExpression"), __scope, false) } getOrElse {Nil},
        __obj.endDateExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.EndDateExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("endDateExpression"), __scope, false) } getOrElse {Nil},
        __obj.percentExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.PercentExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("percentExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportTaskExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.TaskExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.TaskExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.TaskExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.TaskExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportSubtaskExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.SubtaskExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.SubtaskExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.SubtaskExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.SubtaskExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportPercentExpressionFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.PercentExpression] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.PercentExpression] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.PercentExpression(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.PercentExpression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportComponentElementFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ComponentElement] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ComponentElement] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "reportElement")) ~ 
      (((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "iconLabel")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.IconLabel](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "spiderChart")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.SpiderChart](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "map")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.MapType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "PDF417")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.PDF417](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "USPSIntelligentMail")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Barcode4JFourState](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "EAN8")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.EAN8](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "UPCE")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.UPCE](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "Interleaved2Of5")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Interleaved2Of5](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "DataMatrix")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.DataMatrix](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "Code128")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Barcode4JCode128able](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "barbecue")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Barbecue](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "Codabar")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Codabar](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "EAN128")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.EAN128](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "Code39")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Code39](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "UPCA")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.UPCA](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "EAN13")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.EAN13](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "RoyalMailCustomer")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Barcode4JFourState](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "POSTNET")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.POSTNET](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "QRCode")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.QRCode](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "sort")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Sort](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports/components"), "table")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Table](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.ComponentElement(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ReportElement](p1, scalaxb.ElemName(node) :: stack),
        p2) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ComponentElement, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ReportElement](__obj.reportElement, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("reportElement"), __scope, false),
        (Some(__obj.component) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)

  }

  trait DefaultReportComponentTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ComponentType] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.ComponentType] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("Barcode")) => Right(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Barcodable](node, stack))
          case (Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("Barcode4j")) => Right(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Barcode4jable](node, stack))
          case (Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("Barcode4JFourState")) => Right(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Barcode4JFourState](node, stack))
          case (Some("http://jasperreports.sourceforge.net/jasperreports/components"), Some("Barcode4JCode128")) => Right(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.components.Barcode4JCode128able](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.ComponentType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: com.iofficecorp.jasperserver.pumped.report.components.Barcodable => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.Barcodable](x, __namespace, __elementLabel, __scope, true)
      case x: com.iofficecorp.jasperserver.pumped.report.components.IconLabel => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.IconLabel](x, __namespace, __elementLabel, __scope, true)
      case x: com.iofficecorp.jasperserver.pumped.report.components.SpiderChart => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.SpiderChart](x, __namespace, __elementLabel, __scope, true)
      case x: com.iofficecorp.jasperserver.pumped.report.components.Table => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.Table](x, __namespace, __elementLabel, __scope, true)
      case x: com.iofficecorp.jasperserver.pumped.report.components.Sort => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.Sort](x, __namespace, __elementLabel, __scope, true)
      case x: com.iofficecorp.jasperserver.pumped.report.components.MapType => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.MapType](x, __namespace, __elementLabel, __scope, true)
      case x: com.iofficecorp.jasperserver.pumped.report.components.Barbecue => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.Barbecue](x, __namespace, __elementLabel, __scope, true)
      case x: com.iofficecorp.jasperserver.pumped.report.components.ListType => scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.components.ListType](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  def buildReportBasicEvaluationTimeFormat = new DefaultReportBasicEvaluationTimeFormat {}
  trait DefaultReportBasicEvaluationTimeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.BasicEvaluationTime, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildReportComplexEvaluationTimeFormat = new DefaultReportComplexEvaluationTimeFormat {}
  trait DefaultReportComplexEvaluationTimeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ComplexEvaluationTime] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.ComplexEvaluationTime] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.ComplexEvaluationTime.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.ComplexEvaluationTime.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.ComplexEvaluationTime, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportGenericElementFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.GenericElement] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.GenericElement] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "reportElement")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "genericElementType")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "genericElementParameter")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.GenericElement(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ReportElement](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.GenericElementType](p2, scalaxb.ElemName(node) :: stack),
        p3 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.GenericElementParameter](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@evaluationTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ComplexEvaluationTime](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ComplexEvaluationTime](scala.xml.Text("Now"), scalaxb.ElemName(node) :: stack))) map { "@evaluationTime" -> _ },
        (node \ "@evaluationGroup").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@evaluationGroup" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.GenericElement, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evaluationTime", _) => if (__obj.attr_evaluationTime.toString != "Now") attr = scala.xml.Attribute(null, "evaluationTime", __obj.attr_evaluationTime.toString, attr)
        case ("@evaluationGroup", _) => __obj.attr_evaluationGroup foreach { x => attr = scala.xml.Attribute(null, "evaluationGroup", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.GenericElement, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ReportElement](__obj.reportElement, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("reportElement"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.GenericElementType](__obj.genericElementType, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("genericElementType"), __scope, false),
        __obj.genericElementParameter flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.GenericElementParameter](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("genericElementParameter"), __scope, false) })

  }

  trait DefaultReportGenericElementTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.GenericElementType] with scalaxb.CanWriteChildNodes[com.iofficecorp.jasperserver.pumped.report.GenericElementType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.GenericElementType] = seq match {
      case node: scala.xml.Node => Right(com.iofficecorp.jasperserver.pumped.report.GenericElementType(scala.collection.immutable.ListMap(List(
        (node \ "@namespace").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@namespace" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.GenericElementType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@namespace", _) => attr = scala.xml.Attribute(null, "namespace", __obj.attr_namespace.toString, attr)
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.attr_name.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.GenericElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultReportValueExpression2Format extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ValueExpression2] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ValueExpression2] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.ValueExpression2(Seq.concat(p1.toList),
        scala.collection.immutable.ListMap(List(
        (node \ "@class").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("java.lang.Object"), scalaxb.ElemName(node) :: stack))) map { "@class" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.ValueExpression2, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@class", _) => if (__obj.attr_class.toString != "java.lang.Object") attr = scala.xml.Attribute(null, "class", __obj.attr_class.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ValueExpression2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportGenericElementParameterFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.GenericElementParameter] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.GenericElementParameter] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueExpression")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.GenericElementParameter(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueExpression2](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@skipWhenNull").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Boolean](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@skipWhenNull" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.GenericElementParameter, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.attr_name.toString, attr)
        case ("@skipWhenNull", _) => if (__obj.attr_skipWhenNull.toString != "false") attr = scala.xml.Attribute(null, "skipWhenNull", __obj.attr_skipWhenNull.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.GenericElementParameter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.valueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueExpression2](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueExpression"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultReportMultiAxisDataFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.MultiAxisData] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.MultiAxisData] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "multiAxisDataset")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "dataAxis")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "multiAxisMeasure")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.MultiAxisData(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.MultiAxisDataset](p1, scalaxb.ElemName(node) :: stack),
        p2 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.DataAxis](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.MultiAxisMeasure](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.MultiAxisData, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.MultiAxisDataset](__obj.multiAxisDataset, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("multiAxisDataset"), __scope, false),
        __obj.dataAxis flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.DataAxis](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("dataAxis"), __scope, false) },
        __obj.multiAxisMeasure flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.MultiAxisMeasure](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("multiAxisMeasure"), __scope, false) })

  }

  trait DefaultReportMultiAxisDatasetFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.MultiAxisDataset] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.MultiAxisDataset] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "dataset")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.MultiAxisDataset(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.Dataset](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.MultiAxisDataset, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.dataset map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.Dataset](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("dataset"), __scope, false) } getOrElse {Nil})

  }

  def buildReportAxisTypeFormat = new DefaultReportAxisTypeFormat {}
  trait DefaultReportAxisTypeFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.AxisType] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.AxisType] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.AxisType.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.AxisType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.AxisType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportDataAxisFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.DataAxis] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.DataAxis] =
      phrase(safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "axisLevel")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.DataAxis(p1 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.AxisLevel](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@axis").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.AxisType](x, scalaxb.ElemName(node) :: stack)) } map { "@axis" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.DataAxis, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@axis", _) => attr = scala.xml.Attribute(null, "axis", __obj.attr_axis.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.DataAxis, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.axisLevel flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.AxisLevel](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("axisLevel"), __scope, false) })

  }

  trait DefaultReportLabelExpression2Format extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.LabelExpression2] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.LabelExpression2] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.LabelExpression2(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.LabelExpression2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportAxisLevelFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.AxisLevel] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.AxisLevel] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "labelExpression")) ~ 
      (scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "axisLevelBucket")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.AxisLevel(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LabelExpression2](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.AxisLevelBucket](p2, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.AxisLevel, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.attr_name.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.AxisLevel, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.LabelExpression2](__obj.labelExpression, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("labelExpression"), __scope, false),
        scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.AxisLevelBucket](__obj.axisLevelBucket, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("axisLevelBucket"), __scope, false))

  }

  def buildReportOrderType2Format = new DefaultReportOrderType2Format {}
  trait DefaultReportOrderType2Format extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.OrderType2] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.OrderType2] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.OrderType2.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.OrderType2.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.OrderType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportAxisLevelBucketFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.AxisLevelBucket] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.AxisLevelBucket] =
      phrase(opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "bucketExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "comparatorExpression")) ~ 
      safeRep(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "bucketProperty")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.iofficecorp.jasperserver.pumped.report.AxisLevelBucket(p1.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BucketExpression](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ComparatorExpression](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.BucketProperty](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@class").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("java.lang.String"), scalaxb.ElemName(node) :: stack))) map { "@class" -> _ },
        (node \ "@order").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.OrderType2](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.OrderType2](scala.xml.Text("Ascending"), scalaxb.ElemName(node) :: stack))) map { "@order" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.AxisLevelBucket, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@class", _) => if (__obj.attr_class.toString != "java.lang.String") attr = scala.xml.Attribute(null, "class", __obj.attr_class.toString, attr)
        case ("@order", _) => if (__obj.attr_order.toString != "Ascending") attr = scala.xml.Attribute(null, "order", __obj.attr_order.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.AxisLevelBucket, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.bucketExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.BucketExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("bucketExpression"), __scope, false) } getOrElse {Nil},
        __obj.comparatorExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ComparatorExpression](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("comparatorExpression"), __scope, false) } getOrElse {Nil},
        __obj.bucketProperty flatMap { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.BucketProperty](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("bucketProperty"), __scope, false) })

  }

  trait DefaultReportBucketPropertyFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.BucketProperty] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.BucketProperty] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.BucketProperty(Seq.concat(p1.toList),
        scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.BucketProperty, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.attr_name.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.BucketProperty, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportLabelExpression3Format extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.LabelExpression3] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.LabelExpression3] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.LabelExpression3(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.LabelExpression3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportValueExpression3Format extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.ValueExpression3] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.ValueExpression3] =
      phrase(optTextRecord ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.ValueExpression3(Seq.concat(p1.toList)) })
    
    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.ValueExpression3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultReportMultiAxisMeasureFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.MultiAxisMeasure] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.MultiAxisMeasure] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "labelExpression")) ~ 
      opt(scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "valueExpression")) ^^
      { case p1 ~ p2 =>
      com.iofficecorp.jasperserver.pumped.report.MultiAxisMeasure(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.LabelExpression3](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ValueExpression3](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@class").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@class" -> _ },
        (node \ "@calculation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.AggregationCalculationType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.AggregationCalculationType](scala.xml.Text("Nothing"), scalaxb.ElemName(node) :: stack))) map { "@calculation" -> _ },
        (node \ "@incrementerFactoryClass").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@incrementerFactoryClass" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.MultiAxisMeasure, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.attr_name.toString, attr)
        case ("@class", _) => __obj.attr_class foreach { x => attr = scala.xml.Attribute(null, "class", x.toString, attr) }
        case ("@calculation", _) => if (__obj.attr_calculation.toString != "Nothing") attr = scala.xml.Attribute(null, "calculation", __obj.attr_calculation.toString, attr)
        case ("@incrementerFactoryClass", _) => __obj.attr_incrementerFactoryClass foreach { x => attr = scala.xml.Attribute(null, "incrementerFactoryClass", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.MultiAxisMeasure, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.LabelExpression3](__obj.labelExpression, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("labelExpression"), __scope, false),
        __obj.valueExpression map { scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.ValueExpression3](_, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("valueExpression"), __scope, false) } getOrElse {Nil})

  }

  def buildReportContentsPositionFormat = new DefaultReportContentsPositionFormat {}
  trait DefaultReportContentsPositionFormat extends scalaxb.XMLFormat[com.iofficecorp.jasperserver.pumped.report.ContentsPosition] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.iofficecorp.jasperserver.pumped.report.ContentsPosition] = seq match {
      case elem: scala.xml.Elem => Right(com.iofficecorp.jasperserver.pumped.report.ContentsPosition.fromString(elem.text, elem.scope))
      case _ => Right(com.iofficecorp.jasperserver.pumped.report.ContentsPosition.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.iofficecorp.jasperserver.pumped.report.ContentsPosition, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultReportCrosstabColumnCellFormat extends scalaxb.ElemNameParser[com.iofficecorp.jasperserver.pumped.report.CrosstabColumnCell] {
    val targetNamespace: Option[String] = Some("http://jasperreports.sourceforge.net/jasperreports")
    
    override def typeName: Option[String] = Some("CrosstabColumnCell")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.iofficecorp.jasperserver.pumped.report.CrosstabColumnCell] =
      phrase((scalaxb.ElemName(Some("http://jasperreports.sourceforge.net/jasperreports"), "cellContents")) ^^
      { case p1 =>
      com.iofficecorp.jasperserver.pumped.report.CrosstabColumnCell(scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.CellContents](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@height").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@height" -> _ },
        (node \ "@contentsPosition").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ContentsPosition](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.iofficecorp.jasperserver.pumped.report.ContentsPosition](scala.xml.Text("Left"), scalaxb.ElemName(node) :: stack))) map { "@contentsPosition" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.iofficecorp.jasperserver.pumped.report.CrosstabColumnCell, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@height", _) => attr = scala.xml.Attribute(null, "height", __obj.attr_height.toString, attr)
        case ("@contentsPosition", _) => if (__obj.attr_contentsPosition.toString != "Left") attr = scala.xml.Attribute(null, "contentsPosition", __obj.attr_contentsPosition.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.iofficecorp.jasperserver.pumped.report.CrosstabColumnCell, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.iofficecorp.jasperserver.pumped.report.CellContents](__obj.cellContents, Some("http://jasperreports.sourceforge.net/jasperreports"), Some("cellContents"), __scope, false))

  }


}

